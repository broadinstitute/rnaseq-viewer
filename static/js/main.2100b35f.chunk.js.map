{"version":3,"sources":["components/SideBarUtils.jsx","redux/utils/reducerFactories.js","redux/utils/modalReducer.js","components/Modal.jsx","components/EditLocusList.jsx","constants.js","utils/googleAuth.js","redux/selectors.js","components/EditRows.jsx","components/SearchRows.jsx","components/LeftSideBar.jsx","components/optionsPanels/BamOptionsPanel.jsx","components/optionsPanels/VcfOptionsPanel.jsx","components/optionsPanels/SpliceJunctionsOptionsPanel.jsx","components/optionsPanels/ColorPicker.jsx","components/optionsPanels/GcnvOptionsPanel.jsx","components/RightSideBar.jsx","components/About.jsx","components/UserInfo.jsx","components/Header.jsx","utils/throttle.js","components/IGV.jsx","components/RequestStatus.jsx","utils/localStorage.js","redux/initialState.js","components/InitialSettingsForm.jsx","components/BaseLayout.jsx","redux/rootReducer.js","App.js","index.js"],"names":["CategoryH3","styled","h3","OptionDiv","div","StyledPopup","Popup","ColorLegendIcon","Icon","OptionInput","input","createSingleValueReducer","updateActionType","initialState","debug","reducer","state","action","type","undefined","newValue","console","error","log","createSingleObjectReducer","updates","newState","createArrayReducer","actionTypeSuffix","Array","isArray","values","valuesToRemove","filter","v","includes","modals","key","updatesById","shallowCopy","Object","entries","forEach","id","obj","createObjectsByIdReducer","getModalOpen","modalName","open","ButtonLink","Button","attrs","basic","props","padding","color","fontWeight","ContainerDiv","StyledButton","CustomModal","handleClose","doClose","close","handleSave","trigger","this","React","cloneElement","onClick","Modal","isOpen","onClose","size","Header","title","floated","icon","name","Content","children","tabIndex","PureComponent","defaultProps","connect","ownProps","dispatch","e","preventDefault","confirmed","getState","confirmOnClose","confirming","LinkButton","a","EditLocusListButtonAndModal","render","locusList","setLocusList","length","newLocusList","textAreaValue","split","Boolean","Form","Field","control","TextArea","style","minHeight","defaultValue","onKeyUp","target","value","placeholder","join","EditLocusList","setLocus","map","locus","i","SUPPORTED_FILE_EXTENSIONS","SJ_MOTIFS","googleSignIn","gapi","auth2","getAuthInstance","authInstance","isSignedIn","get","signIn","getGoogleUserEmail","profile","currentUser","getBasicProfile","getEmail","getGoogleAccessToken","user","reloadAuthResponse","getAuthResponse","access_token","getLocus","getRightSideBarLocusList","rightSideBarLocusList","getLeftSideBarLocusList","leftSideBarLocusList","getGenome","genome","getDataTypesToShow","dataTypesToShow","getRowsInCategories","rowsInCategories","getSelectedRowNamesByCategoryName","selectedRowNamesByCategoryName","getSelectedSamplesByCategoryNameAndRowName","selectedSamplesByCategoryNameAndRowName","getSjOptions","sjOptions","getVcfOptions","vcfOptions","getBamOptions","bamOptions","getGcnvOptions","gcnvOptions","getUser","getInitialSettings","initialSettings","getInitialSettingsUrl","initialSettingsUrl","getInitialSettingsUrlHasBeenApplied","initialSettingsUrlHasBeenApplied","getAllDataTypes","createSelector","reduce","acc","category","rows","row","data","add","Set","getEnabledDataTypes","allDataTypes","dataType","getRowsByCategoryName","categoryName","getSelectedRowsByCategoryName","rowsByCategoryName","selectedRowNames","getTracks","selectedRowsByCategoryName","igvTracks","junctionsTrack","coverageTrack","j","url","push","format","label","indexURL","height","trackHeight","min","trackMin","max","trackMax","autoscale","highlightSamples","selectedSamples","sampleName","sampleSettings","onlyHandleClicksForHighlightedSamples","oauthToken","order","rowName","minUniquelyMappedReads","minTotalReads","maxFractionMultiMappedReads","minSplicedAlignmentOverhang","thicknessBasedOn","bounceHeightBasedOn","colorBy","colorByNumReadsThreshold","hideStrand","showOnlyPlusStrand","showOnlyMinusStrand","labelUniqueReadCount","labelMultiMappedReadCount","labelTotalReadCount","labelMotif","labelAnnotatedJunction","labelAnnotatedJunctionValue","hideAnnotatedJunctions","hideAnnotated","hideUnannotatedJunctions","hideUnannotated","hideMotifs","motif","indexed","displayMode","viewAsPairs","showSoftClips","tracks","ExampleDiv","ExamplePath","span","StyledRadio","Radio","position","EditRowsButtonAndModal","getInitialState","convertRowsToTextAreaValue","warningMessage","errorMessage","parseTextAreaValueToRows","trim","samples","invalidPaths","samplesBySampleName","samplePath","pathTokens","fileName","matchingExtensions","keys","ext","endsWith","filePrefix","replace","yaml","safeLoad","JSON","parse","flat","safeDump","flowLevel","stringify","formatRadioButtonChangeHandler","setState","checked","getInitialRowsInCategory","showResetButton","initialRowsInCategories","originalCategories","resetButtonClickHandler","initialRowsInCategory","handleModalSave","setRows","handleModalClose","fullTitle","someRowsHaveDescriptionOrMultipleDataFiles","some","description","disabled","onChange","marginLeft","content","float","Message","updateRows","actionType","StyledSearch","Search","INITIAL_STATE","isLoading","results","SearchRows","handleResultSelect","result","idTokens","updateSelectedRowNames","updateSelectedSamples","handleSearchChange","isRowSelected","getSelectedRowNames","getSelectedSamplesByRowName","getSelectedSamplesForRow","isSampleSelected","sample","setTimeout","inputStringRegExp","RegExp","_","escapeRegExp","resultsByCategoryName","resultsCounter","test","newResult","dataItemsWithSamples","warn","useCategories","resultsArray","item","actionLabel","loading","onResultSelect","onSearchChange","Component","selectedSamplesByRowName","CategoryDetails","DataTypeIcon","dataTypeIconColors","junctions","coverage","alignment","vcf","default","RowColorLabelsContainer","NoWrapDiv","RowColorLabelsWithPopup","d","paddingRight","toUpperCase","colSpan","fontSize","marginTop","s","navigator","clipboard","writeText","ShowTrackTypesPanel","enabledDataTypes","updateDataTypesToShow","checkBoxes","charAt","slice","Checkbox","toLocaleString","CategoryPanel","RowsPanel","RowPanel","data-row","RowDetails","inverted","LeftSideBar","dataTypes","updateSjOptions","newSettings","updateVcfOptions","updateBamOptions","keyCode","handleTextInput","parseInt","ColorByLegend","width","on","ColorSwatchBorder","ColorSwatch","flowing","ColorPicker","handleChange","handleApply","colorChangedHandler","hex","background","onChangeComplete","newColor","GrayText","StyledOptionDiv","HighlightedSamplesSectionHeading","HighlightedSamplesCategory","DeleteButton","SampleNameText","NONE_HIGHLIGHTED_MESSAGE","SamplePanel","unhighlightSample","updateSampleSettings","whiteSpace","HighlighedSamplesPanel","categoryObj","updateGcnvOptions","sampleSettingsByRowName","RightSideBar","AboutLink","href","UserInfo","googleUserEmail","HeaderRow","Grid","Row","Column1","Column","Column2","About","throttle","delay","fn","timerId","args","clearTimeout","IGV_SETTINGS","showIdeogram","showNavigation","showRuler","showCenterGuide","showCursorTrackingGuide","showCommandBar","StyledDiv","IGV","setContainerElement","element","container","ref","browser","ignoreNextTrackRemovedEvent","locusChangedHandler","trackRemovedHandler","userChangedHandler","igvBrowserOptions","Promise","resolve","load","client","init","clientId","scope","discoveryDocs","igv","createBrowser","then","track","nextProps","currentIGVLocus","$searchInput","val","nextIGVLocus","search","nextTrackSettingsByTrackName","nextTrackSettings","junctionTrackDisplaySettingsChanged","vcfTrackDisplaySettingsChanged","alignmentTrackDisplaySettingsChanged","gcnvTrackDisplaySettingsChanged","gcnvTrackHighlightedSamplesChanged","isEqual","removeTrackByName","loadTrack","event","newLocus","config","RequestStatus","status","IN_PROGRESS","SUCCEEDED","successMessage","ERROR","NONE","CACHE","REFERENCE_DATA_ROOT","DEFAULT_STATE","alignmentShading","KEYS_TO_PERSIST_IN_URL","KEYS_TO_PERSIST_IN_LOCAL_STORAGE","computeInitialState","stateFromLocalStorage","serializedState","localStorage","getItem","jsonString","LZString","decompress","err","loadState","REVERSE_KEY_NAME_LOOKUP","hashString","window","location","hash","stateFromUrlHash","keyValue","keyValueList","jsurl","updateLocalStorageAndUrl","compress","setItem","saveState","hashKeyValueList","StyledInput","Input","InitialSettingsForm","loadInitialSettingsUrl","globalState","updateInitialSettingsUrl","setInitialSettingsUrlHasBeenApplied","resetGlobalState","Error","isYaml","isJson","isUnknown","fetch","response","ok","statusText","toLowerCase","text","fileContents","settings","filteredSettings","applyInitialSettingsUrl","requestStatus","toString","exportCurrentSettings","EXCLUDED_KEYS","globalStateForExport","encodeURIComponent","textInputValue","align","download","newUrl","minWidth","otherReducers","combineReducers","assign","updatedRows","previousList","updatedList","from","trace","previousSelectedSamplesByRowName","previousSampleSettingsByRowName","updatedSelectedSamplesByRowName","updatedSampleSettingsByRowName","modalReducers","rootReducer","nextState","createReduxStore","createStore","compose","applyMiddleware","thunkMiddleware","App","store","BaseLayout","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.2100b35f.chunk.js","sourcesContent":["import styled from 'styled-components'\nimport { Icon, Popup } from 'semantic-ui-react'\n\nexport const CategoryH3 = styled.h3` \n  display: inline-block;\n  margin: 12px 0px 0px 0px !important;\n`\n\nexport const OptionDiv = styled.div`\n  padding-top: 3px;\n`\n\nexport const StyledPopup = styled(Popup)`\n  opacity: 0.95;\n`\n\nexport const ColorLegendIcon = styled(Icon)`\n  margin-top: 5px !important;\n`\n\nexport const OptionInput = styled.input`\n  display: inline;\n  width: 50px;\n  margin-left: 5px;\n  padding-left: 5px;\n`\n","/**\n * Redux reducers take a 'state' object representing the current application\n * state, and an 'action' object specifying some change to that state.\n * They apply the change and return the updated 'state' object.\n * For more details, see: http://redux.js.org/docs/basics/Reducers.html\n *\n * This module provides generic reducers that can be used to manage the following common types of\n * state shapes:\n *\n * { ... } - zero actions - arbitrary state shape that doesn't change after it's initialized, so\n *          this reducer doesn't perform any actions.\n *\n * value - single value - reducer supports 1 action that replaces the value with a new value.\n *\n * { key1: value1, key2: value2 .. } - single object - reducer supports 1 action that allows\n *          changing the values of one or more keys.\n *\n * { id1: { key1: value1, key2: value2, .. },\n *   id2: { key1: value1, key2: value2, .. },\n *   id3: ... }  -  objects by id - reducer supports several actions:\n *          adding or deleting objects by id, and updating the values within one or more objects\n *          specified by id.\n *\n *\n * ==========\n * Additional state shapes that may be implemnted as needed:\n *\n * { id1: value1, id2: value2 .. } - values by id - reducer supports several actions:\n *          adding or deleting values by id, and replacing one or more values by id.\n *\n * [ value1, value2, .. ] - single array - supports actions that add and remove values from the array\n *\n * { id1: [ value1, value2, .. ]\n *   id2: [ value1, value2, .. ] - arrays by id\n */\n\n/**\n * Reducer that can be used to manage any state that doesn't change after it's initialized.\n */\nexport const zeroActionsReducer = (state = {}) => {\n  return state\n}\n\n/**\n * Factory function that creates a reducer for managing any state object that's treated as a single\n * atomic value, where the only supported modification is to replace this value with a new value.\n *\n * As an example use case, lets say an app has one or more on/off toggles. Each of these toggles is\n * bound to a single state variable: 'isOn' which is either true or false.\n *\n * This function can be used to create the reducer(s) for managing a toggle's state:\n *\n * const rootReducer = combineReducers({\n *        toggleA: createSingleValueReducer('UPDATE_TOGGLE_A'),\n *        toggleB: createSingleValueReducer('UPDATE_TOGGLE_B'),\n *        ...\n *      })\n *\n * Here, the argument 'UPDATE_TOGGLE_A' specifies the action type that will later be dispatched\n * to update that toggle's state. For example, to set a toggle to \"off\":\n *\n * dispatch({\n *      type: 'UPDATE_TOGGLE_A',\n *      newValue: false,\n * })\n *\n * @param updateActionType (string) action.type that will later be used to replace the state with a\n * new state.\n */\nexport const createSingleValueReducer = (updateActionType, initialState, debug = false) => {\n  const reducer = (state = initialState, action) => {\n    if (!action) {\n      return state\n    }\n\n    switch (action.type) {\n      case updateActionType: {\n        if (action.newValue === undefined) {\n          console.error(`Invalid ${updateActionType} action: action.newValue is undefined: `, action)\n          return state\n        }\n        if (debug) {\n          console.log('singleValueReducer: applying action: ', action, 'State changing from ', state, ' to ', action.newValue)\n        }\n        return action.newValue\n      }\n      default:\n        return state\n    }\n  }\n\n  return reducer\n}\n\n\n/**\n * Factory function that creates a reducer for managing a state object with some fixed set of keys.\n * The reducer supports an 'UPDATE' action that can be used to set one or more\n * of these keys to new values.\n *\n * As an example use case, lets say an app displays several instances of a widget whose state\n * consists of this state object:\n *\n *    { isVisible: true, size: 5, names:  ['bob', 'gary', .. ], ... }\n *\n * This function can be used to create a reducer for this state:\n *\n *    const widgetReducer = createSingleObjectReducer('UPDATE_WIDGET')\n *\n * Here, the argument 'UPDATE_WIDGET' specifies the action type that will later be dispatched to\n * update the widget's state.\n *\n * After this, an action with type 'UPDATE_WIDGET' can be dispatched:\n *\n *    dispatch({\n *      type: 'UPDATE_WIDGET',\n *      updates: { isVisible: false, names: ['jim', 'liza'] }\n *    })\n *\n * which will cause the state object to be updated to:\n *\n *    { isVisible: false, size: 5, names:  ['jim', 'liza'], ... }\n *\n * These reducers can also be used with combineReducers(..):\n *\n *    const rootReducer = combineReducers({\n *        widget1: createSingleObjectReducer('UPDATE_WIDGET1'),\n *        widget2: createSingleObjectReducer('UPDATE_WIDGET2'),\n *        other: ..,\n *        ..\n *    })\n *\n * @param updateActionType (string) action.type that will later be used to update the state object.\n */\nexport const createSingleObjectReducer = (updateActionType, initialState = {}, debug = false) => {\n  const reducer = (state = initialState, action) => {\n    if (!action) {\n      return state\n    }\n\n    switch (action.type) {\n      case updateActionType: {\n        if (action.updates === undefined) {\n          console.error(`Invalid ${updateActionType} action: action.updates is undefined: `, action)\n          return state\n        }\n\n        const newState = { ...state, ...action.updates }\n        if (debug) {\n          console.log('singleObjectReducer: applying action: ', action, 'State changing from ', state, ' to ', newState)\n        }\n        return newState\n      }\n      default:\n        return state\n    }\n  }\n\n  return reducer\n}\n\n\n/**\n * Factory function that creates a reducer for managing an array of items.\n * The reducer supports 'ADD' and 'REMOVE' actions for adding/removing one or more items from the array.\n * It also supports a 'SET' action that replaces the existing array with a new one (or can be used to set\n * it to an empty array).\n *\n * An example use case is a list of track names in IGV:\n *\n *    [ 'Sample1', 'Sample2']\n *\n * This function can be used to create a reducer for this state:\n *\n *    const samplesReducer = createArrayReducer('SAMPLES', [ 'Sample1', 'Sample2'])\n *\n * Here, the argument 'SAMPLES' means the reducer will support the following action types:\n *    'ADD_SAMPLES'     (to add one or more samples to the end of the list)\n *    'REMOVE_SAMPLES'  (to remove or more samples from the list)\n *    'SET_SAMPLES'     (to replace existing samples with a new array of 0 or more samples)\n *\n * After this, an 'ADD_SAMPLES' action can be dispatched as follows:\n *\n *    dispatch({\n *      type: 'ADD_SAMPLES',\n *      values: ['Sample3', 'Sample4']\n *    })\n *\n * which will cause the state object to be updated to:\n *\n *    [ 'Sample1', 'Sample2', 'Sample3', 'Sample4']\n *\n * These reducers can also be used with combineReducers(..):\n *\n *    const rootReducer = combineReducers({\n *        samples: createArrayReducer('SAMPLES', ['Sample1', 'Sample2']),\n *        tags: createArrayReducer('TAGS'),\n *        other: ..,\n *        ..\n *    })\n *\n * @param updateActionType (string) action.type that will later be used to update the state object.\n */\nexport const createArrayReducer = (actionTypeSuffix, initialState = [], debug = false) => {\n  const reducer = (state = initialState, action) => {\n    if (!action) {\n      return state\n    }\n\n    switch (action.type) {\n      case `SET_${actionTypeSuffix}`:\n      case `ADD_${actionTypeSuffix}`:\n      case `REMOVE_${actionTypeSuffix}`: {\n        if (!Array.isArray(action.values)) {\n          console.error(`Invalid ${action.type} action: action.values is undefined or not an array: `, action)\n          return state\n        }\n\n        let newState\n        if (action.type === `SET_${actionTypeSuffix}`) {\n          newState = [...action.values] // make a copy of action.values\n        } else if (action.type === `ADD_${actionTypeSuffix}`) {\n          newState = [...state, ...action.values]\n        } else {\n          const valuesToRemove = action.values\n          newState = state.filter((v) => !valuesToRemove.includes(v))\n        }\n\n        if (debug) {\n          console.log('createArrayReducer: applying action: ', action, 'State changing from ', state, ' to ', newState)\n        }\n        return newState\n      }\n\n      default:\n        return state\n    }\n  }\n\n  return reducer\n}\n\n/**\n * Factory function that creates a reducer for managing a state object that looks like:\n *\n * { id1: { key1: valueA, key2: valueB, key3: valueC },\n *   id2: { key1: valueI, key2: valueJ, key3: valueK },\n *   id3: ...\n * }\n *\n * This state object is analogous to a database table, where the contained objects represent table\n * rows and have identical sets of keys but different values, so that each key can be thought of as\n * a column in the table.\n *\n * This reducer supports a single action type that can be used to transform the underlying state\n * in several ways:\n *    - adding new objects by id\n *    - deleting objects by id\n *    - updating the values within one or more existing objects by id\n *\n * As an example, the reducer can be created as follows:\n *\n *      const tableRowReducer = createObjectsByIdReducer('UPDATE_TABLE_X')\n *\n * Here, the 'UPDATE_TABLE_X' argument specifies the action type that will later be dispatched\n * to perform modifications. For example, the action below will change some of the values and also\n * both delete some ids and add some new ids:\n *\n * dispatch({\n *   type: 'UPDATE_TABLE_X',\n *   updatesById: {\n *     id1: { key2: valueM },                                 // update key2 value in object with id1\n *     idNew: { key1: valueX, key2: valueY, key3: valueZ },   // add new object and id\n *     id2: null,                                             // delete id2\n *   }\n *  })\n *\n * The resulting state after this action would look like:\n *\n * { id1: { key1: valueA, key2: valueM, key3: valueC },\n *   idNew: { key1: valueX, key2: valueY, key3: valueZ },\n *   id3: ...\n * }\n *\n * @param updateStateActionId (string) action.type that will later be used to update the state object.\n */\nexport const createObjectsByIdReducer = (updateActionType, key, initialState = {}, debug = false) => {\n  const reducer = (state = initialState, action) => {\n    if (!action) {\n      return state\n    }\n\n    switch (action.type) {\n      case updateActionType: {\n        if (action.updatesById === undefined) {\n          console.error(`Invalid ${updateActionType} action. action.updatesById is undefined: `, action)\n          return state\n        }\n        let updates = action.updatesById\n        if (key) {\n          if (!(key in updates)) {\n            return state\n          }\n          updates = updates[key]\n        }\n        const shallowCopy = { ...state }\n        Object.entries(updates).forEach(([id, obj]) => {\n          if (obj == null) {\n            // if the id is mapped to a null or undefined value, then delete this id\n            delete shallowCopy[id]\n          } else if (shallowCopy[id]) {\n            shallowCopy[id] = { ...shallowCopy[id], ...obj }\n          } else {\n            shallowCopy[id] = { ...obj }\n          }\n        })\n\n        if (debug) {\n          console.log('objectsByIdReducer: applying action: ', action, 'State changing from: ', state, ' to ', shallowCopy)\n        }\n        return shallowCopy\n      }\n      default:\n        return state\n    }\n  }\n\n  return reducer\n}\n\n\n/**\n * Factory function that creates a reducer for managing a state object that looks like:\n *\n * {\n *    loading: false,\n *    error: null,\n * }\n *\n * This state object encapsulates an entity type that is fetched from the server\n *\n * This reducer supports a two action types:\n * 1) A request action that sets the state to loading\n * 2) A receive action that indicates the loading has completed\n *\n * @param requestActionType (string) action.type representing a \"request\" event\n * @param receiveActionType (string) action.type representing a \"receive\" event\n */\nexport const loadingReducer = (requestActionType, receiveActionType, initialState = { isLoading: false, errorMessage: null }, debug = false) => {\n  const reducer = (state = initialState, action) => {\n    switch (action.type) {\n      case requestActionType:\n        if (debug) {\n          console.log(`fetchObjectsReducer: applying action: ${action.type}. State changing to loading`)\n        }\n        return { ...state, isLoading: true }\n\n      case receiveActionType:\n        if (debug) {\n          console.log(`fetchObjectsReducer: applying action: ${action.type}. State changing to received: ${action.byGuid}`)\n        }\n        return { ...state, isLoading: false, errorMessage: action.error }\n\n      default:\n        return state\n    }\n  }\n  return reducer\n}\n","import { createObjectsByIdReducer } from './reducerFactories'\n\n\n// actions\nconst UPDATE_MODAL_STATE = 'UPDATE_MODAL_STATE'\n\n// action creators\nexport const openModal = (modalName) => (dispatch) => (\n  dispatch({ type: UPDATE_MODAL_STATE, updatesById: { [modalName]: { open: true } } })\n)\n\nexport const closeModal = (modalName, confirmed) => (dispatch, getState) => {\n  if (getState().modals[modalName].confirmOnClose && !confirmed) {\n    dispatch({ type: UPDATE_MODAL_STATE, updatesById: { [modalName]: { confirming: true } } })\n  } else {\n    dispatch({ type: UPDATE_MODAL_STATE, updatesById: { [modalName]: { open: false, confirming: false, confirmOnClose: null } } })\n  }\n}\n\n// root reducer\nexport default {\n  modals: createObjectsByIdReducer(UPDATE_MODAL_STATE),\n}\n\n// basic selectors\nexport const getModalOpen = (state, modalName) => state.modals[modalName] && state.modals[modalName].open\n","/* eslint-disable react/destructuring-assignment */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport { Button, Modal, Icon } from 'semantic-ui-react'\n\nimport { getModalOpen, openModal, closeModal } from '../redux/utils/modalReducer'\n\nexport const ButtonLink = styled(Button).attrs({ basic: true })`\n  &.ui.button.basic {\n    white-space: nowrap;\n    border: none;\n    padding: ${(props) => props.padding || 0};\n    color: ${(props) => props.color || '#4183C4'} !important;\n    text-decoration: none;\n    font-weight: ${(props) => props.fontWeight || 'inherit'};\n    box-shadow: none !important;\n    user-select: auto;\n    \n    &:hover, &:focus, &:active {\n      color: #1e70bf !important;\n      background: transparent !important;\n    }\n    \n    &[class*=\"right labeled\"].icon {\n      padding-left: 0 !important;\n      padding-right: 2.1em !important;\n      \n      > .icon {\n        background-color: initial;\n      }\n    }\n  }\n`\n\nconst ContainerDiv = styled.div`\n  float: right;\n  padding: 0px 20px 20px 20px;\n`\n\nconst StyledButton = styled(Button)`\n  margin-left: 10px !important;\n  width: 100px;\n`\n\n\nclass CustomModal extends React.PureComponent\n{\n  handleClose = () => {\n    let doClose = true\n    if (this.props.handleClose) {\n      doClose = this.props.handleClose()\n    }\n    if (doClose) {\n      this.props.close()\n    }\n  }\n\n  handleSave = () => {\n    let doClose = true\n    if (this.props.handleSave) {\n      doClose = this.props.handleSave()\n    }\n    if (doClose) {\n      this.props.close()\n    }\n  }\n\n  render() {\n    const trigger = this.props.trigger ? React.cloneElement(this.props.trigger, { onClick: this.props.open }) : null\n    return (\n      <Modal open={this.props.isOpen} trigger={trigger} onClose={this.handleClose} size={this.props.size}>\n        <Modal.Header>\n          {this.props.title}\n          <ButtonLink floated=\"right\" onClick={this.handleClose} icon={<Icon name=\"remove\" color=\"grey\" />} />\n        </Modal.Header>\n        <Modal.Content>\n          {this.props.children}\n        </Modal.Content>\n        <ContainerDiv>\n          <StyledButton tabIndex={0} onClick={this.handleClose} type=\"button\">Cancel</StyledButton>\n          <StyledButton tabIndex={0} onClick={this.handleSave} type=\"submit\" color=\"blue\">{ this.props.handleSave ? 'Save' : 'Ok' }</StyledButton>\n        </ContainerDiv>\n      </Modal>\n    )\n  }\n}\n\nCustomModal.defaultProps = {\n  size: 'small',\n}\n\nCustomModal.propTypes = {\n  trigger: PropTypes.node,\n  title: PropTypes.string,\n  handleSave: PropTypes.func,\n  handleClose: PropTypes.func,\n  size: PropTypes.oneOf(['small', 'large', 'fullscreen']),\n  isOpen: PropTypes.bool,\n  open: PropTypes.func,\n  close: PropTypes.func,\n  children: PropTypes.node,\n}\n\n\nconst mapStateToProps = (state, ownProps) => ({\n  isOpen: getModalOpen(state, ownProps.modalName),\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    open: (e) => {\n      e.preventDefault()\n      dispatch(openModal(ownProps.modalName))\n    },\n    close: () => {\n      dispatch(closeModal(ownProps.modalName, true))\n    },\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomModal)\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport { Form, TextArea } from 'semantic-ui-react'\nimport Modal from './Modal'\n\nconst LinkButton = styled.a`\n  cursor: pointer;\n`\n\nclass EditLocusListButtonAndModal extends React.PureComponent {\n\n  constructor(props) {\n    super(props)\n\n    const {\n      locusList,\n    } = this.props\n\n    this.textAreaValue = (locusList || []).join('\\n') // TextArea refs don't work - probably because its a pure component, so use this hack\n  }\n\n  render = () => {\n    const {\n      locusList,\n      name,\n      setLocusList,\n    } = this.props\n\n    const title = `Locus List - ${name}`\n\n    return (\n      <Modal\n        title={title}\n        size=\"large\"\n        modalName={title}\n        trigger={\n          <LinkButton>\n            {\n              (locusList || []).length > 0\n                ? <div><br />Edit Locus List</div>\n                : <div>Add Locus List To Side Bar</div>\n            }\n          </LinkButton>\n        }\n        handleSave={() => {\n          const newLocusList = this.textAreaValue.split(/[,\\s]+/).filter(Boolean)\n          setLocusList(newLocusList)\n\n          return true\n        }}\n      >\n        <Form>\n          <Form.Field\n            control={TextArea}\n            style={{ minHeight: '300px' }}\n            defaultValue={this.textAreaValue}\n            onKeyUp={(e) => { this.textAreaValue = e.target.value }}\n            placeholder=\"Enter genomic positions, intervals, and/or gene names separated by commas, spaces, or new lines. &#10;\n              These can be in any format recognized by the IGV search bar. &#10;\n              For example: DMD, ENST00000589830, chr1:55516888, 2:152341851-152591002\"\n          />\n        </Form>\n        <br />\n        <b><i>NOTE:</i></b> This locus list will be saved across page refreshes in this browser, &nbsp;\n        but will not be recorded in the page url like other settings.&nbsp;\n        Sharing or bookmarking this page won&apos;t include the contents of this list.\n      </Modal>)\n  }\n}\n\nEditLocusListButtonAndModal.propTypes = {\n  name: PropTypes.string,\n  locusList: PropTypes.array,\n  setLocusList: PropTypes.func,\n}\n\nconst EditLocusList = ({ name, locusList, setLocus, setLocusList }) => (\n  <div>\n    {\n      locusList.map((locus, i) => <div key={locus}>{i + 1}. &nbsp; <LinkButton onClick={() => { setLocus(locus) }}>{locus}</LinkButton></div>)\n    }\n    <EditLocusListButtonAndModal name={name} locusList={locusList} setLocusList={setLocusList} />\n  </div>)\n\n\nEditLocusList.propTypes = {\n  name: PropTypes.string,\n  locusList: PropTypes.array,\n  setLocus: PropTypes.func,\n  setLocusList: PropTypes.func,\n}\n\nexport default EditLocusList\n","\nexport const SUPPORTED_FILE_EXTENSIONS = {\n  '.bigWig': 'coverage',\n\n  '.junctions.bed': 'spliceJunctions',\n  '.spliceJunctions.bed': 'spliceJunctions',\n  '.junctions.bed.gz': 'spliceJunctions',\n  '.spliceJunctions.bed.gz': 'spliceJunctions',\n\n  '.bam': 'bam',\n  '.cram': 'bam',\n\n  '.vcf': 'vcf',\n  '.vcf.gz': 'vcf',\n\n  '.wig': 'wig',\n  '.bedGraph': 'wig',\n\n  /*\n  '.bed': 'annotation',\n  '.bed.gz': 'annotation',\n  '.gff3': 'annotation',\n  '.gtf': 'annotation',\n  '.gtf.gz': 'annotation',\n  '.genePred': 'annotation',\n  '.bigBed': 'annotation',\n   */\n}\n\nexport const SJ_MOTIFS = ['GT/AG', 'CT/AC', 'GC/AG', 'CT/GC', 'AT/AC', 'GT/AT', 'non-canonical']\nexport const SJ_DEFAULT_COLOR_BY_NUM_READS_THRESHOLD = 5\n\nexport const GCNV_DEFAULT_HIGHLIGHT_COLOR = 'blue'\n","/* eslint-disable no-undef */\n\nconst RNA_VIEWER_CLIENT_ID = '61200892608-qphtf65o323setqdcfj4hnf601mmetvs.apps.googleusercontent.com'\n\nexport const initGoogleClient = () => new Promise((resolve) => {\n  if (typeof gapi === 'undefined') {\n    return\n  }\n\n  // init all gapi modules\n  gapi.load('client:auth2', () => {\n    gapi.client.load('storage', 'v1', () => {\n      gapi.client.init({\n        clientId: RNA_VIEWER_CLIENT_ID,\n        scope: 'https://www.googleapis.com/auth/devstorage.read_only',\n        discoveryDocs: ['https://www.googleapis.com/discovery/v1/apis/storage/v1/rest'],\n      })\n\n      resolve()\n    })\n  })\n})\n\nexport const googleSignIn = async () => {\n\n  const authInstance = await gapi.auth2.getAuthInstance()\n  if (!authInstance.isSignedIn.get()) {\n    await authInstance.signIn()\n  }\n}\n\nexport const getGoogleUserEmail = async () => {\n  const authInstance = await gapi.auth2.getAuthInstance()\n  const profile = authInstance.currentUser.get().getBasicProfile()\n\n  return profile.getEmail()\n}\n\nexport const getGoogleAccessToken = async () => {\n  // use OAuth2 to get an access token for RNA-seq viewer to access the google storage API on behalf of the user\n  const authInstance = await gapi.auth2.getAuthInstance()\n  const user = authInstance.currentUser.get()\n  if (!authInstance.isSignedIn.get()) {\n    user.reloadAuthResponse()\n  }\n\n  return user.getAuthResponse().access_token\n}\n\nexport const googleSignOut = async () => {\n  const authInstance = await gapi.auth2.getAuthInstance()\n  if (authInstance.isSignedIn.get()) {\n    await authInstance.signOut()\n  }\n}\n\nexport const listGoogleStorageFiles = async (gsPath) => {\n  if (!gsPath.startsWith('gs://')) {\n    console.error(`${gsPath} doesn't start with \"gs://\"`)\n    return []\n  }\n\n  const gsPathParts = gsPath.split('/')\n  if (gsPathParts.length < 3) {\n    console.error(`${gsPath} must be of the form \"gs://bucket-name/...\"`)\n    return []\n  }\n\n  const bucketName = gsPathParts[2]\n  const bucketSubdir = gsPathParts.slice(3).join('/')\n\n  return gapi.client.storage.objects.list({ bucket: bucketName, prefix: bucketSubdir, maxResults: 1000 })\n}\n","/* eslint-disable no-nested-ternary */\n/* eslint-disable object-shorthand */\n/* eslint-disable array-callback-return */\n\nimport { createSelector } from 'reselect'\nimport { getGoogleAccessToken } from '../utils/googleAuth'\nimport { SJ_MOTIFS, SJ_DEFAULT_COLOR_BY_NUM_READS_THRESHOLD, GCNV_DEFAULT_HIGHLIGHT_COLOR } from '../constants'\n\nexport const getLocus = (state) => state.locus\nexport const getRightSideBarLocusList = (state) => state.rightSideBarLocusList\nexport const getLeftSideBarLocusList = (state) => state.leftSideBarLocusList\nexport const getGenome = (state) => state.genome\nexport const getDataTypesToShow = (state) => state.dataTypesToShow\nexport const getRowsInCategories = (state) => state.rowsInCategories\nexport const getSelectedRowNamesByCategoryName = (state) => state.selectedRowNamesByCategoryName\nexport const getSelectedSamplesByCategoryNameAndRowName = (state) => state.selectedSamplesByCategoryNameAndRowName\nexport const getSjOptions = (state) => state.sjOptions\nexport const getVcfOptions = (state) => state.vcfOptions\nexport const getBamOptions = (state) => state.bamOptions\nexport const getGcnvOptions = (state) => state.gcnvOptions\nexport const getUser = (state) => state.user\nexport const getInitialSettings = (state) => state.initialSettings\nexport const getInitialSettingsUrl = (state) => state.initialSettingsUrl\nexport const getInitialSettingsUrlHasBeenApplied = (state) => state.initialSettingsUrlHasBeenApplied\n\nexport const getAllDataTypes = createSelector(\n  getRowsInCategories,\n  (rowsInCategories) => {\n    return [...rowsInCategories.reduce((acc, category) => {\n      category.rows.forEach((row) => {\n        if (row.data) {\n          row.data.forEach((data) => {\n            if (data.type) {\n              acc.add(data.type)\n            }\n          })\n        }\n      })\n      return acc\n    }, new Set())]\n  })\n\n\nexport const getEnabledDataTypes = createSelector(\n  getAllDataTypes,\n  getDataTypesToShow,\n  (allDataTypes, dataTypesToShow) => {\n    return allDataTypes.length < 2 ? allDataTypes : allDataTypes.filter((dataType) => dataTypesToShow.includes(dataType))\n  })\n\nexport const getRowsByCategoryName = createSelector(\n  getRowsInCategories,\n  (rowsInCategories) => {\n    return rowsInCategories.reduce((acc, category) => {\n      return { ...acc, [category.categoryName]: category.rows }\n    }, {})\n  })\n\n\nexport const getSelectedRowsByCategoryName = createSelector(\n  getSelectedRowNamesByCategoryName,\n  getRowsByCategoryName,\n  (selectedRowNamesByCategoryName, rowsByCategoryName) => {\n    return Object.entries(selectedRowNamesByCategoryName).reduce((acc, [categoryName, selectedRowNames]) => {\n      if (!rowsByCategoryName[categoryName]) {\n        return acc\n      }\n      return { ...acc, [categoryName]: rowsByCategoryName[categoryName].filter((row) => selectedRowNames.includes(row.name)) }\n    }, {})\n  })\n\n\nexport const getTracks = createSelector(\n  getSelectedRowsByCategoryName,\n  getSelectedSamplesByCategoryNameAndRowName,\n  getDataTypesToShow,\n  getSjOptions,\n  getVcfOptions,\n  getBamOptions,\n  getGcnvOptions,\n  (\n    selectedRowsByCategoryName,\n    selectedSamplesByCategoryNameAndRowName,\n    dataTypesToShow,\n    sjOptions,\n    vcfOptions,\n    bamOptions,\n    gcnvOptions,\n  ) => {\n    const igvTracks = []\n\n    Object.entries(selectedRowsByCategoryName).forEach(([categoryName, selectedRows]) => selectedRows.forEach((row, i) => {\n      let junctionsTrack\n      let coverageTrack\n      (row.data || []).forEach((data, j) => {\n        //docs @ https://github.com/igvteam/igv.js/wiki/Wig-Track\n\n        if (data.type === 'gcnv_bed') { // && vcfOptions.showGcnv\n          //docs @ https://github.com/igvteam/igv.js/wiki/Alignment-Track\n          console.log(`Adding ${data.url} track #`, i * 100 + j)\n\n          igvTracks.push({\n            type: 'gcnv',\n            format: 'gcnv',\n            name: `${row.name} ${data.label || ''}`,\n            url: data.url,\n            indexURL: `${data.url}.tbi`,\n            height: gcnvOptions.trackHeight,\n            min: gcnvOptions.trackMin,\n            max: gcnvOptions.trackMax,\n            autoscale: gcnvOptions.autoscale,\n            highlightSamples: (((selectedSamplesByCategoryNameAndRowName[categoryName] || {}).selectedSamples || {})[row.name] || []).reduce(\n              (acc, sampleName) => {\n                acc[sampleName] = ((((selectedSamplesByCategoryNameAndRowName[categoryName] || {}).sampleSettings || {})[row.name] || {})[sampleName] || {}).color || GCNV_DEFAULT_HIGHLIGHT_COLOR\n                return acc\n              }, {}),\n            onlyHandleClicksForHighlightedSamples: gcnvOptions.onlyHandleClicksForHighlightedSamples,\n            oauthToken: getGoogleAccessToken,\n            order: i * 100 + j,\n            rowName: row.name,\n            categoryName: categoryName,\n          })\n        }\n        else if ((data.type === 'junctions' || data.url.includes('junctions.bed')) && dataTypesToShow.includes('junctions')) {\n          junctionsTrack = {\n            type: 'spliceJunctions',\n            format: 'bed',\n            url: data.url,\n            indexURL: `${data.url}.tbi`,\n            oauthToken: getGoogleAccessToken,\n            order: i * 10,\n            name: row.name,\n            height: sjOptions.trackHeight,\n            minUniquelyMappedReads: sjOptions.minUniquelyMappedReads,\n            minTotalReads: sjOptions.minTotalReads,\n            maxFractionMultiMappedReads: sjOptions.maxFractionMultiMappedReads,\n            minSplicedAlignmentOverhang: sjOptions.minSplicedAlignmentOverhang,\n            thicknessBasedOn: sjOptions.thicknessBasedOn, //options: numUniqueReads (default), numReads, isAnnotatedJunction\n            bounceHeightBasedOn: sjOptions.bounceHeightBasedOn, //options: random (default), distance, thickness\n            colorBy: sjOptions.colorBy, //options: numUniqueReads (default), numReads, isAnnotatedJunction, strand, motif\n            colorByNumReadsThreshold: sjOptions.colorByNumReadsThreshold !== undefined ? sjOptions.colorByNumReadsThreshold : SJ_DEFAULT_COLOR_BY_NUM_READS_THRESHOLD,\n            hideStrand: sjOptions.showOnlyPlusStrand ? '-' : (sjOptions.showOnlyMinusStrand ? '+' : undefined),\n            labelUniqueReadCount: sjOptions.labelUniqueReadCount,\n            labelMultiMappedReadCount: sjOptions.labelMultiMappedReadCount,\n            labelTotalReadCount: sjOptions.labelTotalReadCount,\n            labelMotif: sjOptions.labelMotif,\n            labelAnnotatedJunction: sjOptions.labelAnnotatedJunction && sjOptions.labelAnnotatedJunctionValue,\n            hideAnnotatedJunctions: sjOptions.hideAnnotated,\n            hideUnannotatedJunctions: sjOptions.hideUnannotated,\n            hideMotifs: SJ_MOTIFS.filter((motif) => sjOptions[`hideMotif${motif}`]), //options: 'GT/AG', 'CT/AC', 'GC/AG', 'CT/GC', 'AT/AC', 'GT/AT', 'non-canonical'\n            rowName: row.name,\n            categoryName: categoryName,\n          }\n        }\n        else if ((data.type === 'coverage' || data.url.includes('.bigWig')) && dataTypesToShow.includes('coverage')) {\n          coverageTrack = {\n            type: 'wig',\n            format: 'bigwig',\n            url: data.url,\n            oauthToken: getGoogleAccessToken,\n            name: row.name,\n            height: sjOptions.trackHeight,\n            order: i * 10 + j,\n            rowName: row.name,\n            categoryName: categoryName,\n          }\n\n          if (data.url.includes('spliceai')) {\n            coverageTrack.color = (value) => {\n              let c\n              if (value < 0.5) {\n                c = 'rgb(180,180,180)'\n              }\n              else if (value < 0.8) {\n                c = 'rgb(180,180,0)'\n              }\n              else {\n                c = 'rgb(200,0,0)'\n              }\n\n              return c\n            }\n          }\n        }\n        else if ((data.type === 'vcf' || data.url.includes('.vcf')) && dataTypesToShow.includes('vcf')) {\n          //docs @ https://github.com/igvteam/igv.js/wiki/Alignment-Track\n          console.log(`Adding ${data.url} track #`, i * 100 + j)\n\n          igvTracks.push({\n            type: 'variant',\n            format: 'vcf',\n            url: data.url,\n            indexURL: `${data.url}.tbi`,\n            indexed: true,\n            name: `${row.name} ${data.label || data.type}`,\n            displayMode: vcfOptions.displayMode,\n            oauthToken: getGoogleAccessToken,\n            order: i * 100 + j,\n            rowName: row.name,\n            categoryName: categoryName,\n          })\n        }\n        else if ((data.type === 'alignment' || data.url.includes('.bam') || data.url.includes('.cram')) && dataTypesToShow.includes('alignment')) {\n          //docs @ https://github.com/igvteam/igv.js/wiki/Alignment-Track\n          console.log(`Adding ${data.url} track #`, i * 100 + j)\n\n          igvTracks.push({\n            type: 'alignment',\n            url: data.url,\n            indexed: true,\n            name: `${row.name} ${data.label || ''}`,\n            height: bamOptions.trackHeight,\n            colorBy: bamOptions.colorBy,\n            viewAsPairs: bamOptions.viewAsPairs,\n            showSoftClips: bamOptions.showSoftClips,\n            oauthToken: getGoogleAccessToken,\n            order: i * 100 + j,\n            rowName: row.name,\n            categoryName: categoryName,\n          })\n        }\n      })\n\n      if (coverageTrack && junctionsTrack) {\n        console.log(`Adding ${junctionsTrack.url} & ${coverageTrack.url} track`)\n        igvTracks.push({\n          type: 'merged',\n          name: junctionsTrack.name,\n          height: sjOptions.trackHeight,\n          tracks: [coverageTrack, junctionsTrack],\n          order: i * 10 + 2,\n          rowName: row.name,\n          categoryName: categoryName,\n        })\n      } else if (junctionsTrack) {\n        console.log(`Adding ${junctionsTrack.url} track`)\n        igvTracks.push(junctionsTrack)\n      } else if (coverageTrack) {\n        console.log(`Adding ${coverageTrack.url} track`)\n        igvTracks.push(coverageTrack)\n      }\n    }))\n\n    /*\n    igvTracks.push({\n      name: 'Gencode v32 Genes',\n      format: 'refgene',\n      url: 'gs://macarthurlab-rnaseq/reference_tracks/gencode_v32_knownGene.sorted.txt.gz',\n      indexURL: 'gs://macarthurlab-rnaseq/reference_tracks/gencode_v32_knownGene.sorted.txt.gz.tbi',\n      indexed: true,\n      searchable: true,\n      height: 350,\n      visibilityWindow: -1,\n      displayMode: 'EXPANDED',\n      order: 1000001,\n      color: 'rgb(76,171,225)',\n      oauthToken: getGoogleAccessToken,\n    })\n    */\n\n    return igvTracks\n  },\n)\n","/* eslint-disable react/jsx-one-expression-per-line */\n/* eslint-disable react/self-closing-comp */\n/* eslint-disable object-shorthand */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport { Form, Icon, Message, Popup, Radio, TextArea } from 'semantic-ui-react'\nimport yaml from 'js-yaml'\n\nimport Modal from './Modal'\nimport { SUPPORTED_FILE_EXTENSIONS } from '../constants'\nimport { getInitialSettings } from '../redux/selectors'\n\nconst LinkButton = styled.a`\n  cursor: pointer;\n  padding: 10px 10px 10px 0px;\n  display: inline-block;\n`\n\nconst ExampleDiv = styled.div`\n  font-family: monospace;\n  margin: 20px 30px;\n  padding: 10px;\n  background-color: #F7F7F7;\n  white-space: nowrap;\n`\n\nconst ExamplePath = styled.span`\n  font-family: monospace;\n  background-color: #F7F7F7;\n`\n\nconst StyledRadio = styled(Radio)`\n  label {\n    margin: 10px 0px 10px 20px;\n    padding-left: 1.4em !important;\n  }\n`\n\nconst StyledPopup = styled(Popup).attrs({ position: 'bottom center' })`\n`\n\n\nclass EditRowsButtonAndModal extends React.PureComponent {\n\n  getInitialState = () => {\n    const {\n      rows,\n    } = this.props\n    const format = rows && rows.length > 0 ? 'yaml' : 'basic'\n\n    return {\n      format: format,\n      textAreaValue: this.convertRowsToTextAreaValue(rows || [], format),\n      warningMessage: null,\n      errorMessage: null,\n    }\n  }\n\n  constructor(props) {\n    super(props)\n\n    this.state = this.getInitialState()\n  }\n\n  parseTextAreaValueToRows = (textAreaValue, format) => {\n    if (!textAreaValue.trim()) {\n      return { rows: [], errorMessage: null }\n    }\n\n    let samples = []\n    let errorMessage = null\n    const invalidPaths = []\n\n    if (format === 'basic') {\n      const samplePaths = textAreaValue.split(/[,\\s]+/).filter(Boolean)\n\n      const samplesBySampleName = samplePaths.reduce((acc, samplePath) => {\n        const pathTokens = samplePath.split('/')\n        const fileName = pathTokens[pathTokens.length - 1]\n        const matchingExtensions = Object.keys(SUPPORTED_FILE_EXTENSIONS).filter((ext) => fileName.endsWith(ext))\n        if (matchingExtensions.length === 0) {\n          invalidPaths.push(samplePath)\n        } else {\n          const ext = matchingExtensions[0]\n          const filePrefix = fileName.replace(ext, '')\n          if (!acc[filePrefix]) {\n            acc[filePrefix] = {}\n          }\n          acc[filePrefix].name = filePrefix\n          acc[filePrefix][SUPPORTED_FILE_EXTENSIONS[ext]] = samplePath\n        }\n        return acc\n      }, {})\n\n      samples = Object.values(samplesBySampleName)\n\n    } else if (format === 'yaml' || format === 'json') {\n      try {\n        samples = yaml.safeLoad(textAreaValue)\n        //TODO validate\n      } catch (e) {\n        errorMessage = `Unable to parse YAML: ${e}`\n      }\n    } else if (format === 'json') {\n      try {\n        samples = JSON.parse(textAreaValue)\n        //TODO validate\n      } catch (e) {\n        errorMessage = `Unable to parse JSON: ${e}`\n      }\n    }\n\n    if (invalidPaths.length > 0) {\n      errorMessage = `These paths have unexpected file suffixes: ${invalidPaths.join(', ')}`\n    }\n\n    return { samples, errorMessage }\n  }\n\n  convertRowsToTextAreaValue = (rows, format) => {\n    if (!rows || rows.length === 0) {\n      return ''\n    }\n\n    let textAreaValue\n    if (format === 'basic') {\n      textAreaValue = rows.map((row) => Object.keys(row)\n        .filter(\n          (key) => key !== 'name' && key !== 'description')\n        .map(\n          (key) => row[key]))\n        .flat().join('\\n')\n    } else if (format === 'yaml') {\n      textAreaValue = yaml.safeDump(rows, { flowLevel: 2 })\n    } else if (format === 'json') {\n      textAreaValue = JSON.stringify(rows, null, 2)\n    }\n\n    return textAreaValue\n  }\n\n  formatRadioButtonChangeHandler = (e, data) => {\n    const {\n      textAreaValue,\n      format,\n    } = this.state\n\n    const { rows, errorMessage } = this.parseTextAreaValueToRows(textAreaValue, format)\n    if (errorMessage) {\n      e.preventDefault()\n      this.setState({ errorMessage: errorMessage })\n      return false\n    }\n    this.setState({ errorMessage: '' })\n\n    if (data.checked) {\n      this.setState({ format: data.label, textAreaValue: this.convertRowsToTextAreaValue(rows, data.label) })\n    }\n\n    return true\n  }\n\n  getInitialRowsInCategory = () => {\n    // cache originalCategories for reset button\n    const {\n      categoryName,\n      showResetButton,\n      initialRowsInCategories,\n    } = this.props\n\n    if (showResetButton && initialRowsInCategories) {\n      const originalCategories = initialRowsInCategories.filter((category) => category.categoryName === categoryName)\n      if (originalCategories.length > 0) {\n        return originalCategories[0].rows\n      }\n    }\n\n    return []\n  }\n\n  resetButtonClickHandler = () => {\n    const {\n      format,\n    } = this.state\n\n    const initialRowsInCategory = this.getInitialRowsInCategory()\n    const textAreaValue = this.convertRowsToTextAreaValue(initialRowsInCategory, format)\n    this.setState({ textAreaValue: textAreaValue })\n  }\n\n  handleModalSave = () => {\n    const {\n      setRows,\n    } = this.props\n\n    const {\n      textAreaValue,\n      format,\n    } = this.state\n\n    const { rows, errorMessage } = this.parseTextAreaValueToRows(textAreaValue, format)\n\n    if (errorMessage) {\n      this.setState({ errorMessage: errorMessage })\n      return false\n    }\n\n    setRows(rows)\n    return true\n\n  }\n\n  handleModalClose = () => {\n    this.setState(this.getInitialState())\n    return true\n  }\n\n  render = () => {\n    const {\n      rows,\n      title,\n      showResetButton,\n      trigger,\n    } = this.props\n\n    const {\n      format,\n      textAreaValue,\n      warningMessage,\n      errorMessage,\n    } = this.state\n\n    const fullTitle = `${title} Rows`\n    let initialRowsInCategory\n    if (showResetButton) {\n      initialRowsInCategory = this.getInitialRowsInCategory()\n    }\n\n    const someRowsHaveDescriptionOrMultipleDataFiles = rows.some(\n      (row) => row.description || Object.keys(row).filter((key) => key !== 'name' && key !== 'description').length > 1,\n    )\n\n    return (\n      <Modal\n        title={fullTitle}\n        size=\"large\"\n        modalName={fullTitle}\n        trigger={trigger}\n        handleSave={this.handleModalSave}\n        handleClose={this.handleModalClose}\n      >\n        <div>\n          Enter google bucket path(s) for <i>.bigWig</i>, <i>.junctions.bed.gz</i>, <i>.bam/.cram</i>, or <i>.vcf.gz</i> files:<br />\n          <br />\n          <div>\n            <b>Format:</b>\n            <StyledRadio name=\"format\" label=\"basic\" disabled={someRowsHaveDescriptionOrMultipleDataFiles} checked={format === 'basic'} onChange={this.formatRadioButtonChangeHandler} />\n            <StyledPopup trigger={<Icon style={{ marginLeft: '8px' }} name=\"question circle outline\" />} content={\n              <div>\n                {\n                  someRowsHaveDescriptionOrMultipleDataFiles && (\n                  <div>\n                    <b>[Disabled]</b> because some rows have multiple data files and/or a description.<br />\n                    <br />\n                  </div>)\n                }\n                <b>Basic format</b>:<br />\n                <br />\n                Enter a list of paths separated by commas, spaces or new lines. <br />\n                <br />\n                Example:<br />\n                <ExampleDiv>\n                  gs://your-bucket/dir/sample-name1.bigWig <br />\n                  gs://your-bucket/dir/sample2.bigWig <br />\n                  gs://your-bucket/dir/sample-name1.junctions.bed.gz <br />\n                  gs://your-bucket/dir/sample-name1.bam <br />\n                  gs://your-bucket/dir/sample2.junctions.bed.gz <br />\n                </ExampleDiv>\n                Paths that have the same prefix (like <ExamplePath>gs://your-bucket/dir/sample-name1</ExamplePath> in the example) will be interpreted as different data types from the same sample.<br />\n                <br />\n                The order of paths doesn&apos;t matter.\n              </div>\n            }\n            />\n\n            <StyledRadio name=\"format\" label=\"yaml\" checked={format === 'yaml'} onChange={this.formatRadioButtonChangeHandler} />\n            <StyledPopup trigger={<Icon style={{ marginLeft: '8px' }} name=\"question circle outline\" />}\n              content={\n                <div>\n                  <b>YAML format</b>:<br />\n                  <br />\n                  Provides per-sample file paths just like the Basic format, but allows additional meta-data to be specified - such as sample descriptions - as well as more flexibility in file names.<br />\n                  <ExampleDiv>\n                    - name: sample1 <br />\n                      &nbsp; description: description of sample1 <br />\n                      &nbsp; coverage: gs://your-bucket/dir/sample-name1.bigWig <br />\n                      &nbsp; junctions: gs://your-bucket/dir2/sample-name1.junctions.bed.gz <br />\n                      &nbsp; bam: gs://your-bucket/dir3/sample-name1.bam <br />\n                      &nbsp; vcf: gs://your-bucket/dir3/sample-name1-wgs-variants.vcf.gz <br />\n                    - name: sample2 <br />\n                      &nbsp; coverage: gs://your-bucket/dir/sample2.bigWig <br />\n                      &nbsp; junctions: gs://your-bucket/dir2/sample2.junctions.bed.gz <br />\n                  </ExampleDiv>\n                </div>\n              }\n            />\n            <StyledRadio name=\"format\" label=\"json\" checked={format === 'json'} onChange={this.formatRadioButtonChangeHandler} />\n            <StyledPopup trigger={<Icon style={{ marginLeft: '8px' }} name=\"question circle outline\" />}\n              content={\n                <div>\n                  <b>JSON format</b>:<br />\n                  <br />\n                  Identical to YAML, but represented in the JSON format.<br />\n                  <ExampleDiv>\n                    {'[{'}<br />\n                    {' \"name\": \"sample1\",'}<br />\n                    {' \"coverage\": \"gs://your-bucket/dir/sample-name1.bigWig\", '}<br />\n                    {' \"junctions\": \"gs://your-bucket/dir2/sample-name1.junctions.bed.gz\", '}<br />\n                    {' \"bam\": \"gs://your-bucket/dir3/sample-name1.bam\", '}<br />\n                    {' \"vcf\": \"gs://your-bucket/dir3/sample-name1-wgs-variants.vcf.gz\" '}<br />\n                    {'}, {'}<br />\n                    {' \"name\": \"sample2\", '}<br />\n                    {' \"coverage\": \"gs://your-bucket/dir/sample2.bigWig\", '}<br />\n                    {' \"junctions\": \"gs://your-bucket/dir2/sample2.junctions.bed.gz\" '}<br />\n                    {'}]'}<br />\n                  </ExampleDiv>\n                </div>\n              }\n            />\n            {\n              showResetButton && (\n              <LinkButton style={{ float: 'right' }} onClick={this.resetButtonClickHandler}>\n                Reset {(initialRowsInCategory && initialRowsInCategory.length > 0) ? `To ${initialRowsInCategory.length} Original Samples` : null}\n              </LinkButton>)\n            }\n          </div>\n        </div>\n        <Form>\n          <TextArea\n            style={{ minHeight: '300px' }}\n            value={textAreaValue}\n            onChange={(e) => {\n              this.setState({ textAreaValue: e.target.value })\n            }}\n            placeholder=\"Enter file path(s)\"\n          >\n          </TextArea>\n        </Form>\n\n        <br />\n        <b><i>NOTE:</i></b> These paths will be saved across page refreshes in this browser, but will not be recorded in the page url like other settings. Sharing or bookmarking this page won&apos;t include these paths.\n        {\n          warningMessage && (\n          <Message color=\"yellow\">\n            {warningMessage}\n          </Message>)\n        }\n        {\n          errorMessage && (\n          <Message color=\"red\">\n            {errorMessage}\n          </Message>)\n        }\n      </Modal>)\n  }\n}\n\nEditRowsButtonAndModal.propTypes = {\n  title: PropTypes.string,\n  categoryName: PropTypes.string,\n  rows: PropTypes.array,\n  setRows: PropTypes.func,\n  trigger: PropTypes.node,\n  showResetButton: PropTypes.bool,\n  initialRowsInCategories: PropTypes.array,\n}\n\n\nconst AddOrEditRows = ({ category, initialRowsInCategories, updateRows }) => {\n  return (\n    <div>\n      <EditRowsButtonAndModal\n        key={`${JSON.stringify(category.rows)}_add`}\n        title={`Add ${category.categoryName}`}\n        categoryName={category.categoryName}\n        rows={[]}\n        setRows={(rows) => updateRows('ADD', category.categoryName, rows)}\n        initialRowsInCategories={initialRowsInCategories}\n        trigger={<LinkButton>Add {category.rows.length === 0 ? category.categoryName : null} Rows</LinkButton>}\n      />\n      {category.rows.length > 0 && <EditRowsButtonAndModal\n        key={`${JSON.stringify(category.rows)}_edit`}\n        title={`Edit ${category.categoryName}`}\n        categoryName={category.categoryName}\n        rows={category.rows}\n        setRows={(rows) => updateRows('SET', category.categoryName, rows)}\n        initialRowsInCategories={initialRowsInCategories}\n        trigger={<LinkButton>Edit Rows</LinkButton>}\n        showResetButton\n      />}\n    </div>)\n}\n\nAddOrEditRows.propTypes = {\n  category: PropTypes.object,\n  initialRowsInCategories: PropTypes.array,\n  updateRows: PropTypes.func,\n}\n\nconst mapStateToProps = (state) => ({\n  initialRowsInCategories: getInitialSettings(state).rowsInCategories,\n})\n\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateRows: (actionType, categoryName, rows) => {\n    dispatch({\n      type: `${actionType}_ROWS`,\n      categoryName: categoryName,\n      rows: rows,\n    })\n  },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddOrEditRows)\n","/* eslint-disable react/destructuring-assignment */\n/* eslint-disable react/require-optimization */\n\nimport _ from 'lodash'\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport { Search } from 'semantic-ui-react'\nimport {\n  getRowsInCategories,\n  getSelectedRowNamesByCategoryName, getSelectedSamplesByCategoryNameAndRowName,\n} from '../redux/selectors'\n\nconst StyledSearch = styled(Search)`\n  margin-top: 15px; \n  .prompt {\n    border-radius: 2px !important;\n    width: 155px;\n  }\n  \n  input {\n      max-width: none !important;\n      padding: 5px !important;\n  }\n  .results {\n      min-width: max-content;\n  }\n`\n\nconst MAX_AUTOCOMPLETE_RESULTS = 10\nconst INITIAL_STATE = { isLoading: false, results: [], value: '' }\n\nclass SearchRows extends React.Component {\n\n  constructor() {\n    super()\n    this.state = INITIAL_STATE\n  }\n\n  handleResultSelect = (e, { result }) => {\n    this.setState({ value: '' })\n\n    console.log(e, result)\n\n    const idTokens = result.id.split('!!')\n    const action = idTokens[0]\n    const categoryName = idTokens[1]\n    const rowName = idTokens[2]\n    const sampleName = idTokens[3]\n\n    if (sampleName) {\n      if (action === 'ADD') {\n        this.props.updateSelectedRowNames(action, categoryName, [rowName])\n      }\n      this.props.updateSelectedSamples(action, categoryName, { [rowName]: [sampleName] })\n    } else {\n      this.props.updateSelectedRowNames(action, categoryName, [rowName])\n    }\n  }\n\n  handleSearchChange = (e, { value }) => {\n    this.setState({ isLoading: true, value })\n\n    const getSelectedRowNames = (categoryName) => (this.props.selectedRowNamesByCategoryName[categoryName] || [])\n    const isRowSelected = (categoryName, rowName) => getSelectedRowNames(categoryName).includes(rowName)\n\n    const getSelectedSamplesByRowName = (categoryName) => ((this.props.selectedSamplesByCategoryNameAndRowName[categoryName] || {}).selectedSamples || {})\n    const getSelectedSamplesForRow = (categoryName, rowName) => (getSelectedSamplesByRowName(categoryName)[rowName] || [])\n    const isSampleSelected = (categoryName, rowName, sample) => getSelectedSamplesForRow(categoryName, rowName).includes(sample)\n\n    setTimeout(() => {\n      if (this.state.value.length < 1) {\n        return this.setState(INITIAL_STATE)\n      }\n\n      const inputStringRegExp = new RegExp(_.escapeRegExp(this.state.value), 'i')\n\n      const resultsByCategoryName = {}\n      let resultsCounter = 0\n\n      // search actions\n      if (inputStringRegExp.test('Hide')) {\n        Object.keys(this.props.selectedRowNamesByCategoryName).forEach((categoryName) => {\n          if (resultsCounter >= MAX_AUTOCOMPLETE_RESULTS) return\n          this.props.selectedRowNamesByCategoryName[categoryName].forEach((rowName) => {\n            if (resultsCounter >= MAX_AUTOCOMPLETE_RESULTS) return\n            resultsByCategoryName[categoryName] = resultsByCategoryName[categoryName] || []\n            const newResult = { action: 'REMOVE', categoryName, rowName }\n            if (!_.some(resultsByCategoryName[categoryName], newResult)) {\n              resultsByCategoryName[categoryName].push(newResult)\n            }\n            resultsCounter += 1\n          })\n        })\n      }\n\n      if (inputStringRegExp.test('Hide') || inputStringRegExp.test('Hide sample')) {\n        Object.keys(this.props.selectedSamplesByCategoryNameAndRowName).forEach((categoryName) => {\n          if (resultsCounter >= MAX_AUTOCOMPLETE_RESULTS) return\n          Object.keys(getSelectedSamplesByRowName(categoryName)).forEach((rowName) => {\n            if (resultsCounter >= MAX_AUTOCOMPLETE_RESULTS || !isRowSelected(categoryName, rowName)) return\n            getSelectedSamplesForRow(categoryName, rowName).forEach((sample) => {\n              if (resultsCounter >= MAX_AUTOCOMPLETE_RESULTS) return\n              resultsByCategoryName[categoryName] = resultsByCategoryName[categoryName] || []\n              const newResult = { action: 'REMOVE', categoryName, rowName, sample }\n              if (!_.some(resultsByCategoryName[categoryName], newResult)) {\n                resultsByCategoryName[categoryName].push(newResult)\n              }\n              resultsCounter += 1\n            })\n          })\n        })\n      }\n\n      // search rows\n      this.props.rowsInCategories.forEach((category) => {\n        if (resultsCounter >= MAX_AUTOCOMPLETE_RESULTS) return\n        category.rows.forEach((row) => {\n          if (resultsCounter >= MAX_AUTOCOMPLETE_RESULTS) return\n          if (inputStringRegExp.test(row.name)) {\n            resultsByCategoryName[category.categoryName] = resultsByCategoryName[category.categoryName] || []\n            const newResult = {\n              action: isRowSelected(category.categoryName, row.name) ? 'REMOVE' : 'ADD',\n              categoryName: category.categoryName,\n              rowName: row.name,\n            }\n            if (!_.some(resultsByCategoryName[category.categoryName], newResult)) {\n              resultsByCategoryName[category.categoryName].push(newResult)\n            }\n            resultsCounter += 1\n          }\n\n          if (!row.data) {\n            return\n          }\n\n          const dataItemsWithSamples = row.data.filter((data) => data.samples && data.samples.length > 0)\n          if (dataItemsWithSamples.length > 1) {\n            console.warn('Found row with multiple data items each of which has a samples array. This may behave unexpectedly if there are duplicate samples')\n          }\n\n          dataItemsWithSamples.forEach((data) => {\n            (data.samples || []).forEach((sample) => {\n              if (resultsCounter >= MAX_AUTOCOMPLETE_RESULTS) return\n              if (inputStringRegExp.test(sample)) {\n                resultsByCategoryName[category.categoryName] = resultsByCategoryName[category.categoryName] || []\n                const newResult = {\n                  action: isRowSelected(category.categoryName, row.name) && isSampleSelected(category.categoryName, row.name, sample) ? 'REMOVE' : 'ADD',\n                  categoryName: category.categoryName,\n                  rowName: row.name,\n                  sample,\n                }\n                if (!_.some(resultsByCategoryName[category.categoryName], newResult)) {\n                  resultsByCategoryName[category.categoryName].push(newResult)\n                }\n                resultsCounter += 1\n              }\n            })\n          })\n        })\n      })\n\n      const useCategories = this.props.rowsInCategories.length > 1\n      const results = useCategories ? {} : []\n      Object.keys(resultsByCategoryName).forEach((categoryName) => {\n        if (useCategories) {\n          results[categoryName] = { name: categoryName, results: [] }\n        }\n        const resultsArray = useCategories ? results[categoryName].results : results\n        resultsByCategoryName[categoryName].forEach((item) => {\n          if (item.sample) {\n            const actionLabel = item.action === 'ADD' ? 'Show sample' : 'Hide sample'\n            resultsArray.push({\n              id: `${item.action}!!${categoryName}!!${item.rowName}!!${item.sample}`,\n              title: `${actionLabel} ${item.rowName} > ${item.sample}`,\n            })\n          } else {\n            const actionLabel = item.action === 'ADD' ? 'Show' : 'Hide'\n            resultsArray.push({\n              id: `${item.action}!!${categoryName}!!${item.rowName}`,\n              title: `${actionLabel} ${item.rowName}`,\n            })\n          }\n        })\n      })\n\n      return this.setState({\n        isLoading: false,\n        results,\n      })\n    }, 300)\n  }\n\n  render = () => {\n    const { isLoading, value, results } = this.state\n\n    return <StyledSearch\n      category={this.props.rowsInCategories.length > 1}\n      loading={isLoading}\n      onResultSelect={this.handleResultSelect}\n      onSearchChange={this.handleSearchChange}\n      placeholder=\"Select data\"\n      results={results}\n      value={value}\n    />\n  }\n}\n\nSearchRows.propTypes = {\n  rowsInCategories: PropTypes.array,\n  selectedRowNamesByCategoryName: PropTypes.object,\n  selectedSamplesByCategoryNameAndRowName: PropTypes.object,\n  updateSelectedRowNames: PropTypes.func,\n  updateSelectedSamples: PropTypes.func,\n}\n\nconst mapStateToProps = (state) => ({\n  rowsInCategories: getRowsInCategories(state),\n  selectedRowNamesByCategoryName: getSelectedRowNamesByCategoryName(state),\n  selectedSamplesByCategoryNameAndRowName: getSelectedSamplesByCategoryNameAndRowName(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateSelectedRowNames: (actionType, categoryName, selectedRowNames) => {\n    dispatch({\n      type: `${actionType}_SELECTED_ROW_NAMES`,\n      categoryName,\n      selectedRowNames,\n    })\n  },\n\n  updateSelectedSamples: (actionType, categoryName, selectedSamplesByRowName) => {\n    dispatch({\n      type: `${actionType}_SELECTED_SAMPLES`,\n      categoryName,\n      selectedSamplesByRowName,\n    })\n  },\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchRows)\n","/* eslint-disable react/jsx-one-expression-per-line */\n/* eslint-disable implicit-arrow-linebreak */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport { Checkbox, Icon, Popup } from 'semantic-ui-react'\nimport { CategoryH3, OptionDiv, StyledPopup } from './SideBarUtils'\nimport EditLocusList from './EditLocusList'\nimport AddOrEditRows from './EditRows'\nimport SearchRows from './SearchRows'\nimport {\n  getLeftSideBarLocusList,\n  getRowsInCategories,\n  getAllDataTypes,\n  getEnabledDataTypes,\n  getSelectedRowNamesByCategoryName,\n} from '../redux/selectors'\n\nconst CategoryDetails = styled.div`\n  display: inline-block;\n  margin: 0px 0px 0px 15px;\n  color: #999;\n  white-space: nowrap;\n`\n\nconst DataTypeIcon = styled.div.attrs({ name: 'stop' })`\n  color: ${(props) => props.color};\n  border: 3px solid ${(props) => props.color};\n  display: inline-block;\n  width: 6px;\n  border-radius: 1px;\n  height: 10px;\n  cursor: pointer;\n`\n\nconst dataTypeIconColors = {\n  junctions: '#B0B0EC',\n  coverage: '#B5D29A',\n  alignment: '#5DB6E9',\n  vcf: '#E6A01B',\n  default: '#000000',\n}\n\nconst LinkButton = styled.a`\n  cursor: pointer;\n  padding: 10px 10px 10px 0px;\n  display: inline-block;\n`\n\nconst RowColorLabelsContainer = styled.span`\n  padding-left: 5px;\n  white-space: nowrap;\n`\n\nconst NoWrapDiv = styled.div`\n  white-space: nowrap;\n`\n\nconst RowColorLabelsWithPopup = ({ row }) => {\n  const handleCopyToClipboard = () => {\n    const s = (row.data || []).map((d) => d.url).join('\\n')\n    navigator.clipboard.writeText(s)\n  }\n\n  return (<Popup\n    content={\n      <table>\n        <tbody>\n          {\n            (row.data || []).map((d) =>\n              <tr key={`${d.url} ${d.type}`}>\n                <td style={{ paddingRight: '10px' }}><b>{d.type && d.type.toUpperCase()}:</b></td><td><NoWrapDiv>{d.url}</NoWrapDiv></td>\n              </tr>,\n            )\n          }\n          <tr><td colSpan={2}><div style={{ fontSize: 'small', color: 'grey', marginTop: '10px' }}>(click to copy paths)</div></td></tr>\n        </tbody>\n      </table>\n    }\n    position=\"right center\"\n    trigger={\n      <RowColorLabelsContainer onClick={handleCopyToClipboard}>\n        {\n          (row.data || []).map((d) => <DataTypeIcon key={`${d.url} ${d.type}`} color={dataTypeIconColors[d.type] || dataTypeIconColors.default} />)\n        }\n      </RowColorLabelsContainer>\n    }\n    style={{ marginLeft: '2px' }}\n  />)\n}\n\nRowColorLabelsWithPopup.propTypes = {\n  row: PropTypes.object,\n}\n\nconst ShowTrackTypesPanel = ({ allDataTypes, enabledDataTypes, updateDataTypesToShow }) => {\n  if (allDataTypes.length < 2) {\n    return null\n  }\n\n  const checkBoxes = [...allDataTypes].map((dataType) => {\n    let label = dataType\n    if (dataType === 'junctions') {\n      label = 'Splice Junctions'\n    } else if (dataType === 'vcf') {\n      label = 'VCF'\n    } else if (dataType === 'gcnv_bed') {\n      label = 'gCNV'\n    } else {\n      label = label.charAt(0).toUpperCase() + label.slice(1) //to Title case\n    }\n\n    return (\n      <OptionDiv key={dataType}>\n        <Checkbox label={`${label.toLocaleString()}`} checked={enabledDataTypes.includes(dataType)} onChange={(e, data) => updateDataTypesToShow(data.checked ? 'ADD' : 'REMOVE', [dataType])} />\n        <RowColorLabelsContainer><Popup content={`This color stripe marks rows that have ${label} data. Select this checkbox to show ${label} tracks for each row selected below.`} position=\"right center\" trigger={<DataTypeIcon color={dataTypeIconColors[dataType] || dataTypeIconColors.default} />} /></RowColorLabelsContainer>\n      </OptionDiv>)\n  })\n\n  return (\n    <div>\n      <CategoryH3>SHOW TRACK TYPES</CategoryH3>\n      {checkBoxes}\n    </div>)\n}\n\nShowTrackTypesPanel.propTypes = {\n  allDataTypes: PropTypes.array,\n  enabledDataTypes: PropTypes.array,\n  updateDataTypesToShow: PropTypes.func,\n}\n\n\nconst CategoryPanel = ({ category, updateSelectedRowNames }) => (\n  <div>\n    <CategoryH3>{category.categoryName.toUpperCase()}</CategoryH3>\n    {\n      category.rows.length >= 12 && <CategoryDetails>{`(N=${category.rows.length}) `}</CategoryDetails>\n    }\n    {\n      category.rows.length > 0 && (\n      <div>\n        <LinkButton onClick={\n          (e) => {\n            e.preventDefault()\n            updateSelectedRowNames('SET', category.categoryName, [])\n          }\n        }\n        >\n          Uncheck All\n        </LinkButton>\n      </div>)\n    }\n  </div>)\n\nCategoryPanel.propTypes = {\n  category: PropTypes.object,\n  updateSelectedRowNames: PropTypes.func,\n}\n\nconst RowsPanel = ({ rowsInCategories, selectedRowNamesByCategoryName, updateSelectedRowNames }) => (\n  rowsInCategories.map((category, i) => (\n    <div key={category.categoryName || i}>\n      <CategoryPanel category={category} updateSelectedRowNames={updateSelectedRowNames} />\n      {\n        category.rows.map((row, j) => {\n          const selectedRowNames = selectedRowNamesByCategoryName[category.categoryName] || []\n          return <RowPanel key={row.name || j} row={row} categoryName={category.categoryName} selectedRowNames={selectedRowNames} updateSelectedRowNames={updateSelectedRowNames} />\n        })\n      }\n      <AddOrEditRows category={category} />\n    </div>),\n  ))\n\nRowsPanel.propTypes = {\n  rowsInCategories: PropTypes.array,\n  selectedRowNamesByCategoryName: PropTypes.object,\n  updateSelectedRowNames: PropTypes.func,\n}\n\n\nconst RowPanel = ({ row, categoryName, selectedRowNames, updateSelectedRowNames }) => (\n  <NoWrapDiv>\n    <Checkbox\n      label={row.name}\n      checked={selectedRowNames.includes(row.name)}\n      data-row={row.name}\n      onChange={(e, data) => updateSelectedRowNames(data.checked ? 'ADD' : 'REMOVE', categoryName, [data['data-row']])}\n    />\n    <RowDetails row={row} />\n    <RowColorLabelsWithPopup row={row} />\n  </NoWrapDiv>)\n\nRowPanel.propTypes = {\n  row: PropTypes.object,\n  categoryName: PropTypes.string,\n  selectedRowNames: PropTypes.array,\n  updateSelectedRowNames: PropTypes.func,\n}\n/*\nconst DataSubrows = ({ data }) => {\n  if (!data) {\n    return null\n  }\n\n  const items = []\n  data.filter((d) => d.type === 'gcnv_bed' && d.samples).forEach((d) => {\n    d.samples.forEach((sample) => {\n      items.push(<Checkbox\n        key={sample}\n        label={sample}\n        checked={false}\n        onChange={(e, _) => console.log(e, _)}\n      />)\n    })\n  })\n\n  return items\n}\n\nDataSubrows.propTypes = {\n  data: PropTypes.array,\n}\n*/\n\nconst RowDetails = ({ row }) => {\n  return (\n    row.description\n      ? <StyledPopup inverted\n        content={row.description}\n        position=\"right center\"\n        trigger={\n          <Icon style={{ marginLeft: '10px' }} name=\"question circle outline\" />\n        }\n      />\n      : null)\n}\n\nRowDetails.propTypes = {\n  row: PropTypes.object,\n}\n\n\nclass LeftSideBar extends React.PureComponent\n{\n  render() {\n    //const params = new URLSearchParams(window.location.search)\n    const {\n      locusList,\n      rowsInCategories,\n      allDataTypes,\n      enabledDataTypes,\n      selectedRowNamesByCategoryName,\n      setLocus,\n      setLocusList,\n      updateDataTypesToShow,\n      updateSelectedRowNames,\n    } = this.props\n\n    return (\n      <div>\n        <EditLocusList name=\"Left Side Bar\" locusList={locusList} setLocus={setLocus} setLocusList={setLocusList} />\n        <ShowTrackTypesPanel\n          allDataTypes={allDataTypes}\n          enabledDataTypes={enabledDataTypes}\n          updateDataTypesToShow={updateDataTypesToShow}\n        />\n        <SearchRows />\n        <RowsPanel\n          rowsInCategories={rowsInCategories}\n          selectedRowNamesByCategoryName={selectedRowNamesByCategoryName}\n          updateSelectedRowNames={updateSelectedRowNames}\n        />\n      </div>)\n  }\n}\n\nLeftSideBar.propTypes = {\n  locusList: PropTypes.array,\n  rowsInCategories: PropTypes.array,\n  allDataTypes: PropTypes.array,\n  enabledDataTypes: PropTypes.array,\n  selectedRowNamesByCategoryName: PropTypes.object,\n  setLocus: PropTypes.func,\n  setLocusList: PropTypes.func,\n  updateDataTypesToShow: PropTypes.func,\n  updateSelectedRowNames: PropTypes.func,\n}\n\nconst mapStateToProps = (state) => ({\n  locusList: getLeftSideBarLocusList(state),\n  rowsInCategories: getRowsInCategories(state),\n  allDataTypes: getAllDataTypes(state),\n  enabledDataTypes: getEnabledDataTypes(state),\n  selectedRowNamesByCategoryName: getSelectedRowNamesByCategoryName(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  setLocus: (locus) => {\n    dispatch({\n      type: 'UPDATE_LOCUS',\n      newValue: locus,\n    })\n  },\n  setLocusList: (locusList) => {\n    dispatch({\n      type: 'SET_LEFT_SIDE_BAR_LOCUS_LIST',\n      values: locusList,\n    })\n  },\n  updateDataTypesToShow: (actionType, dataTypes) => {\n    dispatch({\n      type: `${actionType}_DATA_TYPES_TO_SHOW`,\n      values: dataTypes,\n    })\n  },\n  updateSelectedRowNames: (actionType, categoryName, selectedRowNames) => {\n    dispatch({\n      type: `${actionType}_SELECTED_ROW_NAMES`,\n      categoryName,\n      selectedRowNames,\n    })\n  },\n  updateSjOptions: (newSettings) => {\n    dispatch({\n      type: 'UPDATE_SJ_OPTIONS',\n      updates: newSettings,\n    })\n  },\n  updateVcfOptions: (newSettings) => {\n    dispatch({\n      type: 'UPDATE_VCF_OPTIONS',\n      updates: newSettings,\n    })\n  },\n  updateBamOptions: (newSettings) => {\n    dispatch({\n      type: 'UPDATE_BAM_OPTIONS',\n      updates: newSettings,\n    })\n  },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LeftSideBar)\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { Checkbox } from 'semantic-ui-react'\nimport { CategoryH3, OptionDiv, OptionInput } from '../SideBarUtils'\nimport { getBamOptions } from '../../redux/selectors'\n\nconst BamOptionsPanel = ({ bamOptions, updateBamOptions }) => {\n  const handleTextInput = (e, name, value = null) => {\n    if (e.keyCode === 13) {\n      updateBamOptions({ [name]: value || e.target.value })\n    }\n  }\n\n  return (\n    <div>\n      <CategoryH3>BAM TRACK <br />OPTIONS</CategoryH3><br />\n      <OptionDiv>Track height: <OptionInput key={`track-height-${bamOptions.trackHeight}`} type=\"text\" defaultValue={bamOptions.trackHeight} onKeyUp={(e) => handleTextInput(e, 'trackHeight', parseInt(e.target.value, 10))} /> px</OptionDiv>\n      <OptionDiv><Checkbox label=\"View as pairs\" checked={bamOptions.viewAsPairs} onChange={(e, data) => updateBamOptions({ viewAsPairs: data.checked })} /></OptionDiv>\n      <OptionDiv><Checkbox label=\"Show soft-clips\" checked={bamOptions.showSoftClips} onChange={(e, data) => updateBamOptions({ showSoftClips: data.checked })} /></OptionDiv>\n      <OptionDiv>Color by:</OptionDiv>\n      <OptionDiv>\n        <select value={bamOptions.colorBy} onChange={(e) => updateBamOptions({ colorBy: e.target.value })}>\n          <option value=\"strand\">Strand</option>\n          <option value=\"firstOfPairStrand\">First-of-pair strand</option>\n          <option value=\"pairOrientation\">Pair orientation</option>\n          <option value=\"fragmentLength\">Insert size (TLEN)</option>\n          <option value=\"none\">None</option>\n        </select>\n      </OptionDiv>\n    </div>)\n}\n\nBamOptionsPanel.propTypes = {\n  bamOptions: PropTypes.object,\n  updateBamOptions: PropTypes.func,\n}\n\nconst mapStateToProps = (state) => ({\n  bamOptions: getBamOptions(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateBamOptions: (newSettings) => {\n    dispatch({\n      type: 'UPDATE_BAM_OPTIONS',\n      updates: newSettings,\n    })\n  },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BamOptionsPanel)\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { CategoryH3, OptionDiv } from '../SideBarUtils'\nimport { getVcfOptions } from '../../redux/selectors'\n\nconst VcfOptionsPanel = ({ vcfOptions, updateVcfOptions }) => {\n  return (\n    <div>\n      <CategoryH3>VCF TRACK <br />OPTIONS</CategoryH3><br />\n      <OptionDiv>\n        Display mode: &nbsp;\n        <select value={vcfOptions.displayMode} onChange={(e) => updateVcfOptions({ displayMode: e.target.value })}>\n          <option value=\"COLLAPSED\">Collapse</option>\n          <option value=\"SQUISHED\">Squish</option>\n          <option value=\"EXPANDED\">Expand</option>\n        </select>\n      </OptionDiv>\n    </div>)\n}\n\nVcfOptionsPanel.propTypes = {\n  vcfOptions: PropTypes.object,\n  updateVcfOptions: PropTypes.func,\n}\n\nconst mapStateToProps = (state) => ({\n  vcfOptions: getVcfOptions(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateVcfOptions: (newSettings) => {\n    dispatch({\n      type: 'UPDATE_VCF_OPTIONS',\n      updates: newSettings,\n    })\n  },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(VcfOptionsPanel)\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport { Checkbox, Icon, Radio } from 'semantic-ui-react'\nimport { CategoryH3, ColorLegendIcon, OptionDiv, OptionInput, StyledPopup } from '../SideBarUtils'\nimport { SJ_MOTIFS, SJ_DEFAULT_COLOR_BY_NUM_READS_THRESHOLD } from '../../constants'\nimport { getSjOptions } from '../../redux/selectors'\n\n\nconst StyledRadio = styled(Radio)`\n  label {\n    margin-left: 10px;\n    margin-bottom: 10px;\n    padding-left: 1.4em !important;\n  }\n`\n\nconst ColorByLegend = ({ sjOptions, handleTextInput }) => {\n  if (sjOptions.colorBy === 'strand') {\n    return (\n      <div>\n        <ColorLegendIcon name=\"stop\" style={{ color: '#b0b0ec' }} /> plus\n        <ColorLegendIcon name=\"stop\" style={{ color: '#ecb0b0', marginLeft: '10px' }} /> minus\n      </div>)\n  }\n\n  if (sjOptions.colorBy === 'motif') {\n    // IGV.js Dark2 color palette\n    return (\n      <div>\n        <ColorLegendIcon name=\"stop\" style={{ color: 'rgb(27,158,119)' }} /> GT/AG <br />\n        <ColorLegendIcon name=\"stop\" style={{ color: 'rgb(217,95,2)' }} /> CT/AC <br />\n        <ColorLegendIcon name=\"stop\" style={{ color: 'rgb(117,112,179)' }} /> GC/AG <br />\n        <ColorLegendIcon name=\"stop\" style={{ color: 'rgb(231,41,138)' }} /> CT/GC <br />\n        <ColorLegendIcon name=\"stop\" style={{ color: 'rgb(102,166,30)' }} /> AT/AC <br />\n        <ColorLegendIcon name=\"stop\" style={{ color: 'rgb(230,171,2)' }} /> GT/AT <br />\n        <ColorLegendIcon name=\"stop\" style={{ color: 'rgb(166,118,29)' }} /> non-canonical <br />\n      </div>)\n  }\n\n  if (sjOptions.colorBy === 'numUniqueReads' || sjOptions.colorBy === 'numReads') {\n    return (\n      <div>\n        # reads<ColorLegendIcon name=\"stop\" style={{ color: '#AAAAAA', marginLeft: '10px' }} />\n        &nbsp;≤ &nbsp;\n        <OptionInput\n          type=\"text\"\n          key={`num-reads-${sjOptions.colorByNumReadsThreshold}`}\n          defaultValue={sjOptions.colorByNumReadsThreshold !== undefined ? sjOptions.colorByNumReadsThreshold : SJ_DEFAULT_COLOR_BY_NUM_READS_THRESHOLD}\n          onKeyUp={(e) => handleTextInput(e, 'colorByNumReadsThreshold')}\n          style={{ width: '35px' }}\n        />\n        &nbsp; &lt; &nbsp;\n        <ColorLegendIcon name=\"stop\" style={{ color: 'blue' }} />\n      </div>)\n  }\n  if (sjOptions.colorBy === 'isAnnotatedJunction') {\n    return (\n      <div>\n        <ColorLegendIcon name=\"stop\" style={{ color: '#b0b0ec' }} /> known junction <br />\n        <ColorLegendIcon name=\"stop\" style={{ color: 'orange' }} /> novel junction\n      </div>)\n  }\n\n  return <div />\n}\n\nColorByLegend.propTypes = {\n  sjOptions: PropTypes.object,\n  handleTextInput: PropTypes.func,\n}\n\nconst SpliceJunctionsOptionsPanel = ({ sjOptions, updateSjOptions }) => {\n  const handleTextInput = (e, name, value = null) => {\n    if (e.keyCode === 13) {\n      updateSjOptions({ [name]: value || e.target.value })\n    }\n  }\n\n  return (\n    <div>\n      <CategoryH3>JUNCTION TRACK <br />OPTIONS</CategoryH3><br />\n      <OptionDiv>Track height: <OptionInput key={`track-height-${sjOptions.trackHeight}`} type=\"text\" defaultValue={sjOptions.trackHeight} onKeyUp={(e) => handleTextInput(e, 'trackHeight', parseInt(e.target.value, 10))} /> px</OptionDiv>\n      <OptionDiv>Color by:</OptionDiv>\n      <OptionDiv>\n        <select value={sjOptions.colorBy} onChange={(e) => updateSjOptions({ colorBy: e.target.value })}>\n          <option value=\"strand\">strand</option>\n          <option value=\"motif\">donor/acceptor motif</option>\n          <option value=\"numUniqueReads\"># uniquely-mapped reads</option>\n          <option value=\"numReads\"># total reads</option>\n          <option value=\"isAnnotatedJunction\">is known junction</option>\n        </select>\n        <ColorByLegend sjOptions={sjOptions} handleTextInput={handleTextInput} />\n      </OptionDiv>\n      <OptionDiv>Junction thickness:</OptionDiv>\n      <OptionDiv>\n        <select value={sjOptions.thicknessBasedOn} onChange={(e) => updateSjOptions({ thicknessBasedOn: e.target.value })}>\n          <option value=\"numUniqueReads\"># uniquely-mapped reads</option>\n          <option value=\"numReads\"># total reads</option>\n          <option value=\"isAnnotatedJunction\">is known junction</option>\n        </select>\n      </OptionDiv>\n      <OptionDiv>Junction bounce height:</OptionDiv>\n      <OptionDiv>\n        <select value={sjOptions.bounceHeightBasedOn} onChange={(e) => updateSjOptions({ bounceHeightBasedOn: e.target.value })}>\n          <option value=\"random\">random</option>\n          <option value=\"distance\">distance</option>\n          <option value=\"thickness\">thickness</option>\n        </select>\n      </OptionDiv>\n      <OptionDiv>Junction label:</OptionDiv>\n      <OptionDiv><Checkbox label=\"# uniquely-mapped\" checked={sjOptions.labelUniqueReadCount} onChange={(e, data) => updateSjOptions({ labelUniqueReadCount: data.checked })} /></OptionDiv>\n      <OptionDiv><Checkbox label=\"# multi-mapped\" checked={sjOptions.labelMultiMappedReadCount} onChange={(e, data) => updateSjOptions({ labelMultiMappedReadCount: data.checked })} /></OptionDiv>\n      <OptionDiv><Checkbox label=\"# total reads\" checked={sjOptions.labelTotalReadCount} onChange={(e, data) => updateSjOptions({ labelTotalReadCount: data.checked })} /></OptionDiv>\n      <OptionDiv><Checkbox label=\"donor/acceptor motif\" checked={sjOptions.labelMotif} onChange={(e, data) => updateSjOptions({ labelMotif: data.checked })} /></OptionDiv>\n      <OptionDiv>\n        <Checkbox label=\"known junction:\" checked={sjOptions.labelAnnotatedJunction} onChange={(e, data) => updateSjOptions({ labelAnnotatedJunction: data.checked })} />\n        <OptionInput key={`junction-label-${sjOptions.labelAnnotatedJunctionValue}`} type=\"text\" defaultValue={sjOptions.labelAnnotatedJunctionValue} onKeyUp={(e) => handleTextInput(e, 'labelAnnotatedJunctionValue')} style={{ width: '35px' }} />\n      </OptionDiv>\n\n      <CategoryH3>JUNCTION TRACK FILTERS</CategoryH3><br />\n      <OptionDiv>\n        Show Strands:\n        <StyledRadio label=\"both\" name=\"strandButton\" checked={!sjOptions.showOnlyPlusStrand && !sjOptions.showOnlyMinusStrand} onChange={(e, data) => data.checked && updateSjOptions({ showOnlyPlusStrand: false, showOnlyMinusStrand: false })} />\n        <StyledRadio label=\"plus\" name=\"strandButton\" checked={sjOptions.showOnlyPlusStrand} onChange={(e, data) => data.checked && updateSjOptions({ showOnlyPlusStrand: true, showOnlyMinusStrand: false })} />\n        <StyledRadio label=\"minus\" name=\"strandButton\" checked={sjOptions.showOnlyMinusStrand} onChange={(e, data) => data.checked && updateSjOptions({ showOnlyPlusStrand: false, showOnlyMinusStrand: true })} />\n      </OptionDiv>\n      <OptionDiv><Checkbox label=\"Show known junctions\" checked={!sjOptions.hideAnnotated} onChange={(e, data) => updateSjOptions({ hideAnnotated: !data.checked })} /></OptionDiv>\n      <OptionDiv><Checkbox label=\"Show novel junctions\" checked={!sjOptions.hideUnannotated} onChange={(e, data) => updateSjOptions({ hideUnannotated: !data.checked })} /></OptionDiv>\n      <div>\n        <OptionDiv>Uniquely-mapped reads:</OptionDiv>\n        at least <OptionInput key={`uniquely-mapped-reads-${sjOptions.minUniquelyMappedReads}`} type=\"text\" defaultValue={sjOptions.minUniquelyMappedReads} onKeyUp={(e) => handleTextInput(e, 'minUniquelyMappedReads', parseInt(e.target.value, 10))} />\n      </div>\n      <div>\n        <OptionDiv>Total reads:</OptionDiv>\n        at least <OptionInput key={`total-reads-${sjOptions.minTotalReads}`} type=\"text\" defaultValue={sjOptions.minTotalReads} onKeyUp={(e) => handleTextInput(e, 'minTotalReads', parseInt(e.target.value, 10))} />\n      </div>\n      <div>\n        <OptionDiv>Fraction multi-mapped:\n          <StyledPopup inverted\n            content=\"Allows filtering of junctions where most reads that span the junction are multi-mapped reads. For example, setting this to 0.79 will hide junctions where 8 out of 10 (or more) reads that span the junction are not uniquely mapped reads.\"\n            position=\"left center\"\n            on=\"click\"\n            trigger={\n              <Icon style={{ marginLeft: '8px' }} name=\"question circle outline\" />\n            }\n          />\n        </OptionDiv>\n        at most <OptionInput key={`fraction-multi-mapped-${sjOptions.maxFractionMultiMappedReads}`} type=\"text\" defaultValue={sjOptions.maxFractionMultiMappedReads} onKeyUp={(e) => handleTextInput(e, 'maxFractionMultiMappedReads', parseInt(e.target.value, 10))} />\n      </div>\n      <div>\n        <OptionDiv>Splice overhang base-pairs:</OptionDiv>\n        at least <OptionInput key={`spliced-alignment-overhang-${sjOptions.minSplicedAlignmentOverhang}`} type=\"text\" defaultValue={sjOptions.minSplicedAlignmentOverhang} onKeyUp={(e) => handleTextInput(e, 'minSplicedAlignmentOverhang', parseInt(e.target.value, 10))} />\n      </div>\n      <div>\n        <OptionDiv>Donor/Acceptor Motifs:</OptionDiv>\n        {\n          SJ_MOTIFS.map((motif) => <OptionDiv key={motif}><Checkbox label={`Show ${motif}`} checked={!sjOptions[`hideMotif${motif}`]} onChange={(e, data) => updateSjOptions({ [`hideMotif${motif}`]: !data.checked })} /></OptionDiv>)\n        }\n      </div>\n    </div>)\n}\n\nSpliceJunctionsOptionsPanel.propTypes = {\n  sjOptions: PropTypes.object,\n  updateSjOptions: PropTypes.func,\n}\n\nconst mapStateToProps = (state) => ({\n  sjOptions: getSjOptions(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateSjOptions: (newSettings) => {\n    dispatch({\n      type: 'UPDATE_SJ_OPTIONS',\n      updates: newSettings,\n    })\n  },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SpliceJunctionsOptionsPanel)\n","/* eslint-disable react/require-optimization */\n/* eslint-disable react/destructuring-assignment */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport { SwatchesPicker } from 'react-color'\nimport { Popup } from 'semantic-ui-react'\n\nconst ColorSwatchBorder = styled.div`\n  display: inline-block;\n  cursor: pointer;\n  border-radius: 2px;\n  padding: 1px 2px;\n  background: #fff;\n  box-shadow: 0 0 0 1px rgba(0,0,0,.1);\n`\n\nconst ColorSwatch = styled.div`\n  display: inline-block;\n  cursor: pointer;\n  border-radius: 2px;\n  box-shadow: 0 0 0 1px rgba(0,0,0,.1);\n  width: 10px;\n  height: 12px;\n`\n\nconst StyledPopup = styled(Popup).attrs({ flowing: true })`\n  padding: 0px !important;\n  div {\n    overflow-y: visible !important;\n  }\n`\n\n/*\nconst ApplyButton = styled(Button)`\n  margin-top: 15px !important;\n`\n<div style={{ textAlign: 'center' }}><ApplyButton onClick={() => this.handleApply(this.state.color)}>Apply</ApplyButton></div>\n*/\n\nclass ColorPicker extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = { color: this.props.color }\n  }\n\n  handleChange = (color) => {\n    this.setState({ color })\n  }\n\n  handleApply = (color) => {\n    this.props.colorChangedHandler(color.hex)\n  }\n\n  render() {\n    return (\n      <StyledPopup\n        on=\"click\"\n        position=\"left center\"\n        trigger={\n          <ColorSwatchBorder>\n            <ColorSwatch style={{ background: this.state.color }} />\n          </ColorSwatchBorder>\n        }\n        content={\n          <SwatchesPicker\n            color={this.state.color}\n            onChangeComplete={this.handleApply}\n            onChange={(newColor) => this.setState({ color: newColor })}\n          />\n        }\n      />\n    )\n  }\n}\n\nColorPicker.propTypes = {\n  color: PropTypes.string.isRequired,\n  colorChangedHandler: PropTypes.func.isRequired,\n}\n\nexport default ColorPicker\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport { Button, Icon } from 'semantic-ui-react'\nimport ColorPicker from './ColorPicker'\nimport { CategoryH3, OptionDiv, OptionInput } from '../SideBarUtils'\nimport { getGcnvOptions, getSelectedSamplesByCategoryNameAndRowName } from '../../redux/selectors'\nimport { GCNV_DEFAULT_HIGHLIGHT_COLOR } from '../../constants'\n\nconst GrayText = styled.span`\n  color: gray;\n`\n\nconst StyledOptionDiv = styled(OptionDiv)`\n  margin-bottom: 8px; \n`\n\nconst HighlightedSamplesSectionHeading = styled.div`\n  font-weight: 700;\n  margin: 8px 0px;\n`\n\nconst HighlightedSamplesCategory = styled.div`\n  margin: 10px 0px 8px 0px;\n  font-style: italic;\n`\n\nconst DeleteButton = styled(Button).attrs({ basic: true, icon: true })`\n  padding: 0px !important;\n  box-shadow: none !important;\n`\n\nconst SampleNameText = styled.span`\n  word-wrap: break-word;\n  word-break: break-all;  \n  white-space: normal;\n`\n\nconst NONE_HIGHLIGHTED_MESSAGE = <GrayText>Use search box in left side-bar to select which samples to highlight.</GrayText>\n\nconst SamplePanel = ({ categoryName, rowName, sample, sampleSettings, unhighlightSample, updateSampleSettings }) => (\n  <div style={{ whiteSpace: 'nowrap' }}>\n    <DeleteButton onClick={() => unhighlightSample(categoryName, rowName, sample)}>\n      <Icon name=\"delete\" />\n    </DeleteButton>\n    <SampleNameText>{sample}</SampleNameText>\n    <span style={{ marginLeft: '8px' }}>\n      <ColorPicker\n        key={sampleSettings.color}\n        color={sampleSettings.color || GCNV_DEFAULT_HIGHLIGHT_COLOR}\n        colorChangedHandler={(newColor) => updateSampleSettings(categoryName, rowName, sample, { color: newColor })}\n      />\n    </span>\n  </div>)\n\n\nSamplePanel.propTypes = {\n  categoryName: PropTypes.string,\n  rowName: PropTypes.string,\n  sample: PropTypes.string,\n  sampleSettings: PropTypes.object,\n  unhighlightSample: PropTypes.func,\n  updateSampleSettings: PropTypes.func,\n}\n\nconst HighlighedSamplesPanel = ({ selectedSamplesByCategoryNameAndRowName, unhighlightSample, updateSampleSettings }) => {\n  const result = []\n  Object.entries(selectedSamplesByCategoryNameAndRowName).forEach(([categoryName, categoryObj]) => {\n    Object.entries(categoryObj.selectedSamples || {}).forEach(([rowName, selectedSamples]) => {\n      result.push(\n        <div key={`${categoryName}!!${rowName}`}>\n          <HighlightedSamplesCategory>{categoryName}: {rowName}</HighlightedSamplesCategory>\n          {\n            selectedSamples.map((sample) => (\n              <SamplePanel\n                key={sample}\n                categoryName={categoryName}\n                rowName={rowName}\n                sample={sample}\n                sampleSettings={((categoryObj.sampleSettings || {})[rowName] || {})[sample] || {}}\n                unhighlightSample={unhighlightSample}\n                updateSampleSettings={updateSampleSettings}\n              />),\n            )\n          }\n        </div>)\n    })\n  })\n\n  return result.length > 0 ? result : NONE_HIGHLIGHTED_MESSAGE\n}\n\nHighlighedSamplesPanel.propTypes = {\n  selectedSamplesByCategoryNameAndRowName: PropTypes.object,\n  unhighlightSample: PropTypes.func,\n  updateSampleSettings: PropTypes.func,\n}\n\n\nconst GcnvOptionsPanel = ({ gcnvOptions, selectedSamplesByCategoryNameAndRowName, updateGcnvOptions, updateSampleSettings, unhighlightSample }) => {\n  const handleTextInput = (e, name, value = null) => {\n    if (e.keyCode === 13) {\n      updateGcnvOptions({ [name]: value || e.target.value })\n    }\n  }\n\n  return (\n    <div>\n      <CategoryH3>GCNV OPTIONS</CategoryH3><br />\n      <StyledOptionDiv>Track height: <OptionInput key={`track-height-${gcnvOptions.trackHeight}`} type=\"text\" defaultValue={gcnvOptions.trackHeight} onKeyUp={(e) => handleTextInput(e, 'trackHeight', parseInt(e.target.value, 10))} /> px</StyledOptionDiv>\n      <StyledOptionDiv>Y-max: <OptionInput key={`y-max-${gcnvOptions.trackMax}`} type=\"text\" defaultValue={gcnvOptions.trackMax} onKeyUp={(e) => handleTextInput(e, 'trackMax', parseInt(e.target.value, 10))} /> copies</StyledOptionDiv>\n      <StyledOptionDiv>\n        <HighlightedSamplesSectionHeading>Highlighted samples:</HighlightedSamplesSectionHeading>\n        <HighlighedSamplesPanel\n          selectedSamplesByCategoryNameAndRowName={selectedSamplesByCategoryNameAndRowName}\n          unhighlightSample={unhighlightSample}\n          updateSampleSettings={updateSampleSettings}\n        />\n      </StyledOptionDiv>\n    </div>)\n}\n\nGcnvOptionsPanel.propTypes = {\n  gcnvOptions: PropTypes.object,\n  selectedSamplesByCategoryNameAndRowName: PropTypes.object,\n  updateGcnvOptions: PropTypes.func,\n  unhighlightSample: PropTypes.func,\n  updateSampleSettings: PropTypes.func,\n}\n\nconst mapStateToProps = (state) => ({\n  gcnvOptions: getGcnvOptions(state),\n  selectedSamplesByCategoryNameAndRowName: getSelectedSamplesByCategoryNameAndRowName(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateGcnvOptions: (newSettings) => {\n    dispatch({\n      type: 'UPDATE_GCNV_OPTIONS',\n      updates: newSettings,\n    })\n  },\n  unhighlightSample: (categoryName, rowName, sample) => {\n    dispatch({\n      type: 'REMOVE_SELECTED_SAMPLES',\n      categoryName,\n      selectedSamplesByRowName: {\n        [rowName]: [sample],\n      },\n    })\n  },\n  updateSampleSettings: (categoryName, rowName, sample, newSettings) => {\n    dispatch({\n      type: 'UPDATE_SAMPLE_SETTINGS',\n      categoryName,\n      sampleSettingsByRowName: {\n        [rowName]: {\n          [sample]: newSettings,\n        },\n      },\n    })\n  },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GcnvOptionsPanel)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport EditLocusList from './EditLocusList'\nimport BamOptionsPanel from './optionsPanels/BamOptionsPanel'\nimport VcfOptionsPanel from './optionsPanels/VcfOptionsPanel'\nimport SpliceJunctionsOptionsPanel from './optionsPanels/SpliceJunctionsOptionsPanel'\nimport GcnvOptionsPanel from './optionsPanels/GcnvOptionsPanel'\n\nimport {\n  getRightSideBarLocusList,\n  getEnabledDataTypes,\n} from '../redux/selectors'\n\nclass RightSideBar extends React.PureComponent\n{\n  render() {\n    const {\n      locusList,\n      enabledDataTypes,\n      setLocus,\n      setLocusList,\n    } = this.props\n\n    return (\n      <div>\n        <EditLocusList\n          name=\"Right Side Bar\"\n          locusList={locusList}\n          setLocus={setLocus}\n          setLocusList={setLocusList}\n        />\n\n        {enabledDataTypes.includes('alignment') && <BamOptionsPanel />}\n        {enabledDataTypes.includes('vcf') && <VcfOptionsPanel />}\n        {(enabledDataTypes.includes('coverage') || enabledDataTypes.includes('junctions')) && <SpliceJunctionsOptionsPanel />}\n        {enabledDataTypes.includes('gcnv_bed') && <GcnvOptionsPanel />}\n      </div>)\n  }\n}\n\nRightSideBar.propTypes = {\n  locusList: PropTypes.array,\n  enabledDataTypes: PropTypes.array,\n  setLocus: PropTypes.func,\n  setLocusList: PropTypes.func,\n}\n\nconst mapStateToProps = (state) => ({\n  locusList: getRightSideBarLocusList(state),\n  enabledDataTypes: getEnabledDataTypes(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  setLocus: (locus) => {\n    dispatch({\n      type: 'UPDATE_LOCUS',\n      newValue: locus,\n    })\n  },\n  setLocusList: (locusList) => {\n    dispatch({\n      type: 'SET_RIGHT_SIDE_BAR_LOCUS_LIST',\n      values: locusList,\n    })\n  },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RightSideBar)\n","/* eslint-disable react/jsx-one-expression-per-line */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable  react/jsx-closing-tag-location */\n\nimport React from 'react'\nimport styled from 'styled-components'\nimport Modal from './Modal'\n\nconst LinkButton = styled.a`\n  cursor: pointer;\n  margin-left: 20px;\n`\n\nconst AboutLink = () => (\n  <Modal\n    title=\"About the Translational Genomics Group Viewer\"\n    size=\"large\"\n    modalName=\"AboutModal\"\n    trigger={<LinkButton>About</LinkButton>}\n  >\n    The Translational Genomics Group Viewer is a free, open-source web app for visualizing splice junctions, expression, and other sequencing data\n    genome-wide using <a href=\"https://github.com/igvteam/igv.js\" target=\"_blank\">IGV.js</a><br />\n    <br />\n    Main features: <br />\n    <ul>\n      <li>Supports all file formats supported by IGV.js, including: .bed, .vcf, .bam, .cram, .bigWig, as well as\n        several custom formats for splice junctions (.junctions.bed.gz) and gCNV copy-number variants (.gcnv.bed) </li>\n      <li>Includes reference tracks such as splice junctions from GTEx v8 muscle, blood, and fibroblast samples.</li>\n      <li>Loads data files or reference tracks from any Google bucket to which you have read-access.</li>\n      <li>Retrieves just the on-screen sections of the files directly from Google buckets.</li>\n      <li>Allows gene or locus lists to be added to side bars for quick navigation across a list of regions.</li>\n      <li>Fully customizable via .json config file - for example: TODO.</li>\n    </ul>\n\n    <a href=\"https://github.com/broadinstitute/tgg-viewer/issues\" target=\"_blank\">Issues</a>\n    &nbsp;or <a href=\"https://github.com/broadinstitute/tgg-viewer/issues\" target=\"_blank\">Feature Requests</a>\n    &nbsp;can be submitted via <a href=\"https://github.com/broadinstitute/tgg-viewer\" target=\"_blank\">GitHub</a>.\n  </Modal>\n)\n\nexport default AboutLink\n","/* eslint-disable react/jsx-one-expression-per-line */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { getUser } from '../redux/selectors'\n\n\nclass UserInfo extends React.PureComponent\n{\n  render() {\n\n    const {\n      user,\n    } = this.props\n\n    if (!user.googleUserEmail) {\n      return <div>Signing in to Google Buckets...</div>\n    }\n\n    return <div>Signed in to Google Buckets as <b>{user.googleUserEmail}</b></div>\n  }\n}\n\nUserInfo.propTypes = {\n  user: PropTypes.object.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  user: getUser(state),\n\n})\n\nexport default connect(mapStateToProps)(UserInfo)\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Grid } from 'semantic-ui-react'\nimport AboutLink from './About'\nimport UserInfo from './UserInfo'\n\nconst HeaderRow = styled(Grid.Row)`\n  color: #444;\n  margin-bottom: 5px;\n`\n\nconst Column1 = styled(Grid.Column).attrs({ width: 6 })`\n  text-align: left;\n  padding-left: 75px !important;\n`\nconst Column2 = styled(Grid.Column).attrs({ width: 10 })`\n  text-align: right;\n  padding-right: 75px !important;\n`\n\nexport default () => (\n  <Grid>\n    <HeaderRow>\n      <Column1>\n        <b>TGG Viewer:</b>\n        <AboutLink />\n        {/* <a href=\"#\">Intro Video</a> &nbsp; &nbsp; */}\n      </Column1>\n      <Column2>\n        <UserInfo />\n      </Column2>\n    </HeaderRow>\n  </Grid>)\n","\nexport const throttle = (delay, fn) => {\n  let timerId\n  return (...args) => {\n    if (timerId) {\n      clearTimeout(timerId)\n    }\n    timerId = setTimeout(() => {\n      fn(...args)\n      timerId = null\n    }, delay)\n  }\n}\n","/* eslint-disable eqeqeq */\nimport _ from 'lodash'\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport igv from 'igv/dist/igv.esm'\nimport { connect } from 'react-redux'\n\nimport {\n  getGenome,\n  getLocus,\n  getTracks,\n  getSelectedSamplesByCategoryNameAndRowName,\n  getEnabledDataTypes,\n  getSjOptions,\n  getVcfOptions,\n  getBamOptions,\n  getGcnvOptions,\n} from '../redux/selectors'\nimport { getGoogleUserEmail, googleSignIn, initGoogleClient } from '../utils/googleAuth'\nimport { throttle } from '../utils/throttle'\n\nconst IGV_SETTINGS = {\n  showIdeogram: true,\n  showNavigation: true,\n  showRuler: true,\n  showCenterGuide: true,\n  showCursorTrackingGuide: true,\n  showCommandBar: true,\n}\n\nconst StyledDiv = styled.div``\n\n\nclass IGV extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    this.container = null\n    this.browser = null\n    this.ignoreNextTrackRemovedEvent = false\n  }\n\n  setContainerElement = (element) => {\n    this.container = element\n  }\n\n  render = () => <StyledDiv><div ref={this.setContainerElement} /></StyledDiv>\n\n  async componentDidMount() {\n\n    if (!this.container) {\n      return\n    }\n\n    const {\n      genome,\n      locus,\n      tracks,\n      locusChangedHandler,\n      trackRemovedHandler,\n      userChangedHandler,\n    } = this.props\n\n    const igvBrowserOptions = {\n      ...IGV_SETTINGS,\n      locus,\n      genome,\n      tracks,\n    }\n\n    // TODO check if any tracks need google sign-in\n    await initGoogleClient()\n    await googleSignIn()\n    const googleUserEmail = await getGoogleUserEmail()\n    userChangedHandler(googleUserEmail)\n\n    console.log('Calling igv.createBrowser(..)', igvBrowserOptions)\n    igv.createBrowser(this.container, igvBrowserOptions).then((browser) => {\n      this.browser = browser\n\n      if (locusChangedHandler) {\n        this.browser.on('locuschange', throttle(300, locusChangedHandler)) //{chr, start, end, label}\n      }\n\n      if (trackRemovedHandler) {\n        this.browser.on('trackremoved', (track) => {\n          if (!this.ignoreNextTrackRemovedEvent) {\n            trackRemovedHandler(track)\n          }\n\n          this.ignoreNextTrackRemovedEvent = false\n        })\n      }\n    })\n  }\n\n  shouldComponentUpdate(nextProps) {\n    if (!this.container || !this.browser) {\n      return false\n    }\n\n    const {\n      tracks,\n      selectedSamplesByCategoryNameAndRowName,\n      enabledDataTypes,\n      sjOptions,\n      vcfOptions,\n      bamOptions,\n      gcnvOptions,\n    } = this.props\n\n    const currentIGVLocus = this.browser.$searchInput.val()\n    const nextIGVLocus = nextProps.locus\n    if (nextProps.locus && (!currentIGVLocus || nextIGVLocus.replace(/,/g, '') !== currentIGVLocus.replace(/,/g, ''))) {\n      this.browser.search(nextIGVLocus)\n    }\n\n    const nextTrackSettingsByTrackName = nextProps.tracks.reduce((acc, item) => {\n      return { [item.name]: item, ...acc }\n    }, {})\n\n    //console.log('IGV.nextProps:', nextProps)\n\n    // update or remove existing tracks\n    tracks.forEach((track) => {\n      const nextTrackSettings = nextTrackSettingsByTrackName[track.name]\n      if (nextTrackSettings) {\n        const junctionTrackDisplaySettingsChanged = ['merged', 'wig', 'spliceJunctions'].includes(track.type) && (\n          nextProps.enabledDataTypes.includes('junctions') !== enabledDataTypes.includes('junctions')\n          || nextProps.enabledDataTypes.includes('coverage') !== enabledDataTypes.includes('coverage')\n          || nextProps.sjOptions !== sjOptions)\n        const vcfTrackDisplaySettingsChanged = track.type === 'variant' && nextProps.vcfOptions !== vcfOptions\n        const alignmentTrackDisplaySettingsChanged = track.type === 'alignment' && nextProps.bamOptions !== bamOptions\n        const gcnvTrackDisplaySettingsChanged = track.type === 'gcnv' && nextProps.gcnvOptions !== gcnvOptions\n        const gcnvTrackHighlightedSamplesChanged = track.type === 'gcnv' && (\n          !_.isEqual(\n            ((nextProps.selectedSamplesByCategoryNameAndRowName[track.categoryName] || {}).selectedSamples || {})[track.rowName],\n            ((selectedSamplesByCategoryNameAndRowName[track.categoryName] || {}).selectedSamples || {})[track.rowName])\n          || !_.isEqual(\n            ((nextProps.selectedSamplesByCategoryNameAndRowName[track.categoryName] || {}).sampleSettings || {})[track.rowName],\n            ((selectedSamplesByCategoryNameAndRowName[track.categoryName] || {}).sampleSettings || {})[track.rowName])\n        )\n\n        console.log('gcnvTrackHighlightedSamplesChanged:', gcnvTrackHighlightedSamplesChanged, (nextProps.selectedSamplesByCategoryNameAndRowName[track.categoryName] || {}).sampleSettings, (selectedSamplesByCategoryNameAndRowName[track.categoryName] || {}).sampleSettings)\n        if (junctionTrackDisplaySettingsChanged\n          || vcfTrackDisplaySettingsChanged\n          || alignmentTrackDisplaySettingsChanged\n          || gcnvTrackDisplaySettingsChanged\n          || gcnvTrackHighlightedSamplesChanged)\n        {\n          console.log('Reloading track', track.name)\n          this.ignoreNextTrackRemovedEvent = true\n          this.browser.removeTrackByName(track.name)\n          this.browser.loadTrack(nextTrackSettings)\n        }\n\n        // delete track from nextTrackSettingsByTrackName to indicate that it's still selected\n        delete nextTrackSettingsByTrackName[track.name]\n\n      } else {\n        // remove track that was de-selected\n        try {\n          this.ignoreNextTrackRemovedEvent = true\n          console.log('Removing track', track.name)\n          this.browser.removeTrackByName(track.name)\n        } catch (e) {\n          console.warn('Unable to remove track', track.name, e)\n        }\n      }\n    })\n\n    // load any newly-selected track(s)\n    Object.values(nextTrackSettingsByTrackName).forEach((track) => {\n      try {\n        console.log('Loading track', track.name)\n        this.browser.loadTrack(track)\n      } catch (e) {\n        console.warn('Unable to add track', track.name, e)\n      }\n    })\n\n    return false\n  }\n}\n\nIGV.propTypes = {\n  genome: PropTypes.string.isRequired,\n  locus: PropTypes.string.isRequired,\n  tracks: PropTypes.array.isRequired,\n  selectedSamplesByCategoryNameAndRowName: PropTypes.object.isRequired,\n  enabledDataTypes: PropTypes.array.isRequired,\n  locusChangedHandler: PropTypes.func,\n  trackRemovedHandler: PropTypes.func,\n  userChangedHandler: PropTypes.func,\n  sjOptions: PropTypes.object,\n  vcfOptions: PropTypes.object,\n  bamOptions: PropTypes.object,\n  gcnvOptions: PropTypes.object,\n}\n\nconst mapStateToProps = (state) => ({\n  genome: getGenome(state),\n  locus: getLocus(state),\n  tracks: getTracks(state),\n  enabledDataTypes: getEnabledDataTypes(state),\n  selectedSamplesByCategoryNameAndRowName: getSelectedSamplesByCategoryNameAndRowName(state),\n  sjOptions: getSjOptions(state),\n  vcfOptions: getVcfOptions(state),\n  bamOptions: getBamOptions(state),\n  gcnvOptions: getGcnvOptions(state),\n})\n\n\nconst mapDispatchToProps = (dispatch) => ({\n  locusChangedHandler: (event) => {\n    const newLocus = event.label.replace(/,/g, '')\n\n    dispatch({\n      type: 'UPDATE_LOCUS',\n      newValue: newLocus,\n    })\n  },\n\n  userChangedHandler: (googleUserEmail) => {\n    dispatch({\n      type: 'UPDATE_USER',\n      updates: { googleUserEmail },\n    })\n  },\n\n  trackRemovedHandler: (track) => {\n    console.log('Removing track', track.config.categoryName, track.config.name)\n\n    dispatch({\n      type: 'REMOVE_SELECTED_ROW_NAMES',\n      categoryName: [track.config.categoryName],\n      selectedRowNames: [track.config.name],\n    })\n  },\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IGV)\n","/* eslint-disable react/destructuring-assignment */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Icon, Popup } from 'semantic-ui-react'\n\n\nclass RequestStatus extends React.PureComponent {\n\n  static NONE = 'NONE'\n\n  static IN_PROGRESS = 'IN_PROGRESS'\n\n  static SUCCEEDED = 'SUCCEEDED'\n\n  static ERROR = 'ERROR'\n\n  render() {\n    switch (this.props.status) {\n      case RequestStatus.IN_PROGRESS:\n        return <Icon loading name=\"spinner\" style={{ color: '#4183c4' }} />\n      case RequestStatus.SUCCEEDED:\n        return <Popup\n          trigger={\n            <Icon name=\"check circle\" style={{ color: '#00C000' }} />\n          }\n          content={this.props.successMessage || 'Success'}\n          position=\"top center\"\n          size=\"small\"\n        />\n      case RequestStatus.ERROR:\n        return <Popup\n          trigger={\n            <Icon name=\"warning circle\" style={{ color: '#F00000' }} />\n          }\n          content={this.props.errorMessage || ''}\n          position=\"top center\"\n          size=\"small\"\n        />\n      default:\n        return <Icon name=\"warning circle\" style={{ color: 'rgb(0,0,0,0.0)' }} />\n    }\n  }\n}\n\nRequestStatus.propTypes = {\n  status: PropTypes.string,\n  errorMessage: PropTypes.string,\n  successMessage: PropTypes.string,\n}\n\nexport default RequestStatus\n","import LZString from 'lz-string'\n\n/* in-memory cache to avoid unnecessary compression/decompression */\nconst CACHE = {}\n\n/**\n * Uses the localStorage API to save a state object in the browser under the given label.\n * @param label {string}\n * @param state {object}\n */\nexport const saveState = (label, state) => {\n  try {\n    const jsonString = JSON.stringify(state)\n    if (CACHE[label] === jsonString) {\n      return\n    }\n    console.warn(`LocalStorage: compressing ${label}`)\n    const serializedState = LZString.compress(jsonString)\n    localStorage.setItem(label, serializedState)\n    CACHE[label] = jsonString\n  } catch (err) {\n    console.warn('Unable to save state: ', label, state, err)\n  }\n}\n\n\n/**\n * Uses the localStorage API to restored a previously-saved state object.\n * @param label {string}\n * @param state {object}\n */\nexport const loadState = (label) => {\n  try {\n    const serializedState = localStorage.getItem(label)\n    const jsonString = LZString.decompress(serializedState)\n    CACHE[label] = jsonString\n\n    if (jsonString === null) {\n      return undefined\n    }\n\n    return JSON.parse(jsonString)\n  } catch (err) {\n    return undefined\n  }\n}\n","/* eslint-disable operator-linebreak */\n/* eslint-disable no-unused-vars */\n\nimport jsurl from 'jsurl'\n\nimport { loadState, saveState } from '../utils/localStorage'\n\n/*\nTODO\n- local, aws\n- gtf\n- reference tracks\n    - splice ai\n */\n\nconst REFERENCE_DATA_ROOT = 'gs://seqr-reference-data/GRCh38/rna-seq'\nconst REFERENCE_DATA_INFO_LIST = [\n  {\n    name: 'GTEx 100 Muscle',\n    description: '100 randomly-chosen GTEx v3 muscle samples combined by summing raw coverage values and raw splice-junction-spanning read counts across all 100 samples.',\n    junctions: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/muscle_100_GTEx_samples.junctions.bed.gz`,\n    coverage: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/muscle_100_GTEx_samples.bigWig`,\n  },\n  {\n    name: 'GTEx 100 Blood',\n    description: '100 randomly-chosen GTEx v3 blood samples combined by summing raw coverage values and raw splice-junction-spanning read counts across all 100 samples.',\n    junctions: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/blood_100_GTEx_samples.junctions.bed.gz`,\n    coverage: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/blood_100_GTEx_samples.bigWig`,\n  },\n  {\n    name: 'GTEx 100 Fibs',\n    description: '100 randomly-chosen GTEx v3 fibroblast samples combined by summing raw coverage values and raw splice-junction-spanning read counts across all 100 samples.',\n    junctions: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/fibs_100_GTEx_samples.junctions.bed.gz`,\n    coverage: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/fibs_100_GTEx_samples.bigWig`,\n  },\n  {\n    name: 'GTEx All Muscle',\n    description: 'All 803 GTEx v3 muscle samples combined by summing raw coverage values and raw splice-junction-spanning read counts across all samples.',\n    junctions: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/GTEX_muscle.803_samples.junctions.bed.gz`,\n    coverage: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/GTEX_muscle.803_samples.bigWig`,\n  },\n  {\n    name: 'GTEx All Blood',\n    description: 'All 755 GTEx v3 blood samples combined by summing raw coverage values and raw splice-junction-spanning read counts across all samples.',\n    junctions: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/GTEX_blood.755_samples.junctions.bed.gz`,\n    coverage: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/GTEX_blood.755_samples.bigWig`,\n  },\n  {\n    name: 'GTEx All Fibs',\n    description: 'All 504 GTEx v3 fibroblast samples combined by summing raw coverage values and raw splice-junction-spanning read counts across all samples.',\n    junctions: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/GTEX_fibs.504_samples.junctions.bed.gz`,\n    coverage: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/GTEX_fibs.504_samples.bigWig`,\n  },\n  {\n    name: 'GTEx All Muscle - Norm.',\n    description: 'All 803 GTEx v3 muscle samples combined by summing raw coverage values across all samples and also summing normalized splice-junction-spanning read counts across all samples. The normalization is done by computing the normalized read count for each junction as normalized_read_count = raw_read_count * scalar. Here scalar = average_unique_reads_per_muscle_sample / (total_unqiue_reads_in_this_sample * number_of_muscle_samples), and average_unique_reads_per_muscle_sample = (total_unqiue_reads_in_all_muscle_samples / number_of_muscle_samples)',\n    junctions: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/GTEX_muscle.803_samples.normalized.junctions.bed.gz`,\n    coverage: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/GTEX_muscle.803_samples.bigWig`,\n  },\n  {\n    name: 'GTEx All Blood - Norm.',\n    description: 'All 755 GTEx v3 blood samples combined by summing raw coverage values across all samples and also summing normalized splice-junction-spanning read counts across all samples. The normalization is done by computing the normalized read count for each junction as normalized_read_count = raw_read_count * scalar. Here scalar = average_unique_reads_per_blood_sample / (total_unqiue_reads_in_this_sample * number_of_blood_samples), and average_unique_reads_per_blood_sample = (total_unqiue_reads_in_all_blood_samples / number_of_blood_samples)',\n    junctions: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/GTEX_blood.755_samples.normalized.junctions.bed.gz`,\n    coverage: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/GTEX_blood.755_samples.bigWig`,\n  },\n  {\n    name: 'GTEx All Fibs - Norm.',\n    description: 'All 504 GTEx v3 fibroblast samples combined by summing raw coverage values across all samples and also summing normalized splice-junction-spanning read counts across all samples. The normalization is done by computing the normalized read count for each junction as normalized_read_count = raw_read_count * scalar. Here scalar = average_unique_reads_per_fibs_sample / (total_unqiue_reads_in_this_sample * number_of_fibs_samples), and average_unique_reads_per_fibs_sample = (total_unqiue_reads_in_all_fibs_samples / number_of_fibs_samples)',\n    junctions: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/GTEX_fibs.504_samples.normalized.junctions.bed.gz`,\n    coverage: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/GTEX_fibs.504_samples.bigWig`,\n  },\n  {\n    name: 'splice AI scores - SNVs',\n    coverage: `${REFERENCE_DATA_ROOT}/spliceai/spliceai_scores.raw.snv.hg38.all.bigWig`,\n  },\n  {\n    name: 'splice AI scores - SNVs - alt allele A',\n    coverage: `${REFERENCE_DATA_ROOT}/spliceai/spliceai_scores.raw.snv.hg38.alt-allele-A.bigWig`,\n  },\n  {\n    name: 'splice AI scores - SNVs - alt allele C',\n    coverage: `${REFERENCE_DATA_ROOT}/spliceai/spliceai_scores.raw.snv.hg38.alt-allele-C.bigWig`,\n  },\n  {\n    name: 'splice AI scores - SNVs - alt allele G',\n    coverage: `${REFERENCE_DATA_ROOT}/spliceai/spliceai_scores.raw.snv.hg38.alt-allele-G.bigWig`,\n  },\n  {\n    name: 'splice AI scores - SNVs - alt allele T',\n    coverage: `${REFERENCE_DATA_ROOT}/spliceai/spliceai_scores.raw.snv.hg38.alt-allele-T.bigWig`,\n  },\n  /*\n  {\n    name: 'Gencode v32 Genes',\n    description: 'Comprehensive gene annotations for GRCh38 reference chromosomes. Source: https://www.gencodegenes.org/human/release_32.html',\n    annotation: 'gs://macarthurlab-rnaseq/reference_tracks/gencode.v32.annotation.sorted.gtf.gz'\n  },\n  {\n    name: 'RefSeq Genes',\n    path: 'https://s3.amazonaws.com/igv.org.genomes/hg38/refGene.sorted.txt.gz'\n  }\n  */\n]\n\nconst ROW_INFO_LIST = []\n\nconst INITIAL_ROWS_IN_CATEGORIES = [\n  {\n    categoryName: 'Reference Data',\n    rows: REFERENCE_DATA_INFO_LIST,\n  },\n  {\n    categoryName: 'Samples',\n    rows: ROW_INFO_LIST,\n  },\n]\n\nexport const DEFAULT_STATE = {\n  genome: 'hg38',\n  locus: 'chr15:92,835,700-93,031,800',\n  dataTypesToShow: ['junctions', 'coverage', 'vcf', 'gcnv_bed'],\n  leftSideBarLocusList: [],\n  rightSideBarLocusList: [],\n  rowsInCategories: INITIAL_ROWS_IN_CATEGORIES,\n  selectedRowNamesByCategoryName: {},\n  sjOptions: {\n    trackHeight: 170,\n    hideAnnotated: false,\n    hideUnannotated: false,\n    colorBy: 'strand',\n    minUniquelyMappedReads: 0,\n    minTotalReads: 1,\n    maxFractionMultiMappedReads: 1,\n    minSplicedAlignmentOverhang: 0,\n    thicknessBasedOn: 'numUniqueReads', //options: numUniqueReads (default), numReads, isAnnotatedJunction\n    bounceHeightBasedOn: 'random', //options: random (default), distance, thickness\n    labelUniqueReadCount: true,\n    labelMultiMappedReadCount: false,\n    labelTotalReadCount: false,\n    labelMotif: false,\n    labelAnnotatedJunction: false,\n    labelAnnotatedJunctionValue: ' [A]',\n  },\n  vcfOptions: {\n    displayMode: 'EXPANDED',\n  },\n  bamOptions: {\n    trackHeight: 200,\n    showSoftClips: true,\n    alignmentShading: 'strand',\n  },\n  gcnvOptions: {\n    trackHeight: 200,\n    trackMin: 0,\n    trackMax: 5,\n    autoscale: false,\n    onlyHandleClicksForHighlightedSamples: true,\n  },\n  initialSettingsUrl: '',\n}\n\nDEFAULT_STATE.initialSettings = JSON.parse(JSON.stringify(DEFAULT_STATE)) // create a deep-copy of DEFAULT_STATE\n\nconst KEYS_TO_PERSIST_IN_URL = {\n  locus: 'locus',\n  dataTypesToShow: 'show',\n  selectedRowNamesByCategoryName: 'selectedRows',\n  selectedSamplesByCategoryNameAndRowName: 'selectedSamples',\n  sjOptions: 'sjOptions',\n  vcfOptions: 'vcfOptions',\n  bamOptions: 'bamOptions',\n  gcnvOptions: 'gcnvOptions',\n  initialSettingsUrl: 'settingsUrl',\n  //initialSettingsUrlHasBeenApplied: 'settingsUrlApplied',\n}\n\nconst KEYS_TO_PERSIST_IN_LOCAL_STORAGE = [\n  'rowsInCategories', 'leftSideBarLocusList', 'rightSideBarLocusList',\n]\n\n\nexport const computeInitialState = () => {\n\n  // restore values from local storage\n  const stateFromLocalStorage = KEYS_TO_PERSIST_IN_LOCAL_STORAGE.reduce((acc, key) => {\n    const v = loadState(key)\n    if (v !== undefined) {\n      acc[key] = v\n    }\n    return acc\n  }, {})\n\n  // restore values from url\n  const REVERSE_KEY_NAME_LOOKUP = Object.entries(KEYS_TO_PERSIST_IN_URL).reduce(\n    (acc, [key, value]) => {\n      return { ...acc, [value]: key }\n    }, {})\n  const hashString = window.location.hash.replace(/^#/, '')\n\n  const stateFromUrlHash = hashString ?\n    hashString.split('&').reduce((acc, keyValue) => {\n      const keyValueList = keyValue.split('=')\n      const key = (keyValueList[0] in REVERSE_KEY_NAME_LOOKUP) ? REVERSE_KEY_NAME_LOOKUP[keyValueList[0]] : keyValueList[0]\n      if (key === 'locus') {\n        acc = { ...acc, [key]: keyValueList[1] }\n      } else {\n        try {\n          acc[key] = jsurl.parse(keyValueList[1])\n        } catch (e) {\n          console.error('Couldn\\'t parse url hash param', keyValueList[0], ': ', keyValueList[1])\n        }\n      }\n      return acc\n    }, {})\n    : {}\n\n  // default values are over-ridden by values from local storage, which are over-ridden by values from the url\n  const initialState = { ...DEFAULT_STATE, ...stateFromLocalStorage, ...stateFromUrlHash }\n\n  return initialState\n}\n\n\nexport const updateLocalStorageAndUrl = (state) => {\n  //update local storage\n\n  KEYS_TO_PERSIST_IN_LOCAL_STORAGE.forEach((key) => {\n    saveState(key, state[key])\n  })\n\n  //update url\n  const hashString = Object.keys(state)\n    .filter((key) => (key in KEYS_TO_PERSIST_IN_URL))\n    .reduce((hashKeyValueList, key) => {\n      const value = key === 'locus' ? state[key].replace(',', '') : jsurl.stringify(state[key])\n      return [\n        ...hashKeyValueList,\n        `${KEYS_TO_PERSIST_IN_URL[key]}=${value}`,\n      ]\n    }, []).join('&')\n\n  window.location.hash = `#${hashString}`\n}\n","/* eslint-disable react/no-find-dom-node */\n/* eslint-disable react/destructuring-assignment */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport { Button, Input, Popup } from 'semantic-ui-react'\nimport delay from 'timeout-as-promise'\nimport yaml from 'js-yaml'\nimport { getInitialSettingsUrl, getInitialSettingsUrlHasBeenApplied } from '../redux/selectors'\nimport RequestStatus from './RequestStatus'\nimport { DEFAULT_STATE } from '../redux/initialState'\n\nconst StyledDiv = styled.div`\n  color: #999;\n  width: 100%;\n  text-align: center;\n  \n  .ui.label {\n    color: #444;\n    background-color: #f3f3f3;\n  }\n`\n\nconst StyledInput = styled(Input)`\n  margin-top: 100px;\n  width: calc(100% - 350px);\n`\n\nconst StyledButton = styled(Button)`\n  margin-left: 20px !important;\n  margin-right: 15px !important;\n`\n\nclass InitialSettingsForm extends React.PureComponent\n{\n  constructor(props) {\n    super(props)\n    this.textInputValue = props.initialSettingsUrl || ''\n    this.state = {\n      requestStatus: RequestStatus.NONE,\n      successMessage: '',\n      errorMessage: '',\n    }\n  }\n\n  async componentDidMount() {\n    const {\n      initialSettingsUrl,\n      initialSettingsUrlHasBeenApplied,\n    } = this.props\n\n    if (initialSettingsUrl && !initialSettingsUrlHasBeenApplied) {\n      // download url\n      console.log('Loading settings from url', initialSettingsUrl)\n      await this.applyInitialSettingsUrl(initialSettingsUrl)\n    }\n  }\n\n  loadInitialSettingsUrl = async (url) => {\n    const {\n      globalState,\n      updateInitialSettingsUrl,\n      setInitialSettingsUrlHasBeenApplied,\n      resetGlobalState,\n    } = this.props\n\n    if (!url) {\n      //reset url to empty\n      resetGlobalState({ ...DEFAULT_STATE, ...{ user: globalState.user } })\n      updateInitialSettingsUrl('')\n      setInitialSettingsUrlHasBeenApplied()\n      return\n    }\n\n    //validate url\n    if (url.search(':') === -1 || url.search('/') === -1) {\n      throw new Error(`Invalid url: \"${url}\"`)\n    }\n\n    const isYaml = url.search('.yaml') !== -1 || url.search('.yml') !== -1\n    const isJson = url.search('.json') !== -1\n    const isUnknown = !isYaml && !isJson\n\n    //NOTE: changed my mind about requiring a .yaml or .json extension to allow for more flexibility.\n    //if (!isYamlURL && !isJsonURL) {\n    //  throw new Error('Expected file extensions (\".yaml\", \".yml\", or \".json\") not found in the URL')\n    //}\n\n    const response = await fetch(url)\n    if (!response.ok) {\n      throw new Error(`Couldn't load URL. Error: ${response.statusText.toLowerCase()} (${response.status})`)\n    }\n\n    const fileContents = await response.text()\n\n    let settings = null\n    if (!settings && (isYaml || isUnknown)) {\n      try {\n        settings = yaml.safeLoad(fileContents)\n      } catch (e) {\n        if (isYaml) {\n          console.error(`Unable to parse YAML file: ${url}. ${e}`)\n          return\n        }\n      }\n    }\n\n    if (!settings && (isJson || isUnknown)) {\n      try {\n        settings = JSON.parse(fileContents)\n      } catch (e) {\n        if (isJson) {\n          console.error(`Unable to parse JSON file: ${url}. ${e}`)\n          return\n        }\n      }\n    }\n\n    if (!settings) {\n      console.error(`Unable to parse JSON or YAML from: ${url}`)\n      return\n    }\n\n    // TODO validate settings more\n\n    // filter settings to keys in globalState\n    const filteredSettings = Object.keys(globalState).reduce((acc, key) => {\n      if (key in settings) {\n        return { ...acc, [key]: settings[key] }\n      }\n      return acc\n    }, {})\n\n    filteredSettings.initialSettings = JSON.parse(JSON.stringify(filteredSettings)) // deep-copy just in case\n\n    // apply settings\n    resetGlobalState({ ...globalState, ...filteredSettings })\n    updateInitialSettingsUrl(url)\n    setInitialSettingsUrlHasBeenApplied()\n  }\n\n  applyInitialSettingsUrl = async (url) => {\n\n    this.setState({ requestStatus: RequestStatus.IN_PROGRESS })\n\n    try {\n      await this.loadInitialSettingsUrl(url)\n\n      this.setState({ requestStatus: RequestStatus.SUCCEEDED, successMessage: url ? 'Successfully loaded URL and applied settings' : 'Reset all settings to defaults' })\n    } catch (e) {\n      this.setState({ requestStatus: RequestStatus.ERROR, errorMessage: e.toString() })\n    }\n\n    // wait and then clear the message\n    await delay(10000)\n    if (this.state.requestStatus !== RequestStatus.IN_PROGRESS) {\n      this.setState({ requestStatus: RequestStatus.NONE, errorMessage: '' })\n    }\n  }\n\n  exportCurrentSettings = () => {\n    //convert global state to a JSON string\n    const EXCLUDED_KEYS = ['initialSettings', 'initialSettingsUrlHasBeenApplied', 'user', 'modals']\n    const globalStateForExport = Object.keys(this.props.globalState).reduce((acc, key) => {\n      if (!EXCLUDED_KEYS.includes(key)) {\n        acc[key] = this.props.globalState[key]\n      }\n      return acc\n    }, {})\n\n    return encodeURIComponent(JSON.stringify(globalStateForExport, null, 5))\n  }\n\n  render() {\n    const {\n      initialSettingsUrl,\n    } = this.props\n\n    return (\n      <StyledDiv align=\"center\">\n        <StyledInput\n          label=\"Initial settings:\"\n          defaultValue={initialSettingsUrl}\n          placeholder=\"URL of .yaml or .json settings file (eg. http://.../settings.json), or blank to reset all settings to defaults.\"\n          onChange={(e) => {\n            this.textInputValue = e.target.value\n          }}\n        />\n        <StyledButton\n          content=\"Apply\"\n          onClick={() => this.applyInitialSettingsUrl(this.textInputValue)}\n        />\n        <RequestStatus\n          status={this.state.requestStatus}\n          errorMessage={this.state.errorMessage}\n          successMessage={this.state.successMessage}\n        />\n        <Popup\n          content=\"Export current settings to a .json file. If you upload this file to a public url (for example on github) and then paste the url here, these settings will be restored.\"\n          position=\"right center\"\n          trigger={\n            <a download=\"settings.json\" href={`data:text/json;charset=utf-8,${this.exportCurrentSettings()}`}>\n              <Button icon=\"download\" />\n            </a>\n          }\n        />\n      </StyledDiv>)\n  }\n}\n\nInitialSettingsForm.propTypes = {\n  initialSettingsUrl: PropTypes.string.isRequired,\n  initialSettingsUrlHasBeenApplied: PropTypes.bool.isRequired,\n  globalState: PropTypes.object,\n  updateInitialSettingsUrl: PropTypes.func,\n  setInitialSettingsUrlHasBeenApplied: PropTypes.func,\n  resetGlobalState: PropTypes.func,\n}\n\nconst mapStateToProps = (state) => ({\n  globalState: state,\n  initialSettingsUrl: getInitialSettingsUrl(state),\n  initialSettingsUrlHasBeenApplied: getInitialSettingsUrlHasBeenApplied(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateInitialSettingsUrl: (newUrl) => {\n    dispatch({\n      type: 'UPDATE_INITIAL_SETTINGS_URL',\n      newValue: newUrl,\n    })\n  },\n  setInitialSettingsUrlHasBeenApplied: () => {\n    dispatch({\n      type: 'UPDATE_INITIAL_SETTINGS_URL_HAS_BEEN_APPLIED',\n      newValue: true,\n    })\n  },\n  resetGlobalState: (state) => {\n    dispatch({\n      type: 'RESET_GLOBAL_STATE',\n      newState: state,\n    })\n  },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InitialSettingsForm)\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Grid } from 'semantic-ui-react'\nimport LeftSideBar from './LeftSideBar'\nimport RightSideBar from './RightSideBar'\nimport Header from './Header'\nimport IGV from './IGV'\nimport InitialSettingsForm from './InitialSettingsForm'\n\nconst StyledDiv = styled.div`\n  padding: 10px 20px;\n`\n\nconst SIDE_BAR_WIDTH = 210\n\nexport default () => (\n  <StyledDiv>\n    <Grid>\n      <Grid.Row>\n        <Grid.Column width={2} style={{ minWidth: `${SIDE_BAR_WIDTH}px` }}>\n          <LeftSideBar />\n        </Grid.Column>\n        <Grid.Column style={{ minWidth: '800px', width: `calc(100% - ${2 * SIDE_BAR_WIDTH}px)` }}>\n          <Header />\n          <IGV />\n          <InitialSettingsForm />\n\n        </Grid.Column>\n        <Grid.Column width={2} style={{ minWidth: `${SIDE_BAR_WIDTH}px` }}>\n          <RightSideBar />\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  </StyledDiv>\n)\n","/* eslint-disable prefer-object-spread */\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { updateLocalStorageAndUrl, computeInitialState } from './initialState'\n\n\nimport {\n  zeroActionsReducer,\n  createSingleValueReducer,\n  createSingleObjectReducer,\n  createArrayReducer,\n} from './utils/reducerFactories'\n\nimport modalReducers from './utils/modalReducer'\n\n\nconst rowsInCategoriesReducer = (state, action) => {\n  if (!action || !action.categoryName || !action.rows) {\n    return state || []\n  }\n\n  return state.map((category) => {\n    if (category.categoryName !== action.categoryName) {\n      return category\n    }\n\n    let updatedRows\n    switch (action.type) {\n      case 'SET_ROWS':\n        updatedRows = [...action.rows]\n        break\n\n      case 'ADD_ROWS':\n        updatedRows = [...category.rows, ...action.rows]\n        break\n\n      default:\n        updatedRows = category.rows\n    }\n\n    return {\n      ...category,\n      rows: updatedRows,\n    }\n  })\n}\n\n\nconst selectedRowNamesByCategoryNameReducer = (state, action) => {\n  if (!action || !action.categoryName || !Array.isArray(action.selectedRowNames)) {\n    return state || {}\n  }\n\n  const previousList = state[action.categoryName] || []\n  switch (action.type) {\n    case 'SET_SELECTED_ROW_NAMES':\n    case 'ADD_SELECTED_ROW_NAMES':\n    case 'REMOVE_SELECTED_ROW_NAMES': {\n      let updatedList\n      if (action.type === 'SET_SELECTED_ROW_NAMES') {\n        updatedList = Array.from(new Set(action.selectedRowNames)) // make a copy of action.values\n      } else if (action.type === 'ADD_SELECTED_ROW_NAMES') {\n        updatedList = Array.from(new Set([...previousList, ...action.selectedRowNames]))\n      } else {\n        const valuesToRemove = action.selectedRowNames\n        updatedList = previousList.filter((v) => !valuesToRemove.includes(v))\n      }\n\n      return {\n        ...state,\n        [action.categoryName]: updatedList,\n      }\n    }\n    default:\n      console.trace(`Unknown action type: ${action.type}`)\n  }\n\n  return state\n}\n\n\nconst selectedSamplesByCategoryNameAndRowNameReducer = (state, action) => {\n  if (!action || !action.categoryName || (!action.selectedSamplesByRowName && !action.sampleSettingsByRowName)) {\n    return state || {}\n  }\n\n  const categoryObj = state[action.categoryName] || {}\n  const previousSelectedSamplesByRowName = categoryObj.selectedSamples || {}\n  const previousSampleSettingsByRowName = categoryObj.sampleSettings || {}\n  let updatedSelectedSamplesByRowName = previousSelectedSamplesByRowName\n  let updatedSampleSettingsByRowName = previousSampleSettingsByRowName\n\n  switch (action.type) {\n    case 'SET_SELECTED_SAMPLES':\n    case 'ADD_SELECTED_SAMPLES':\n    case 'REMOVE_SELECTED_SAMPLES': {\n      if (action.type === 'SET_SELECTED_SAMPLES') {\n        updatedSelectedSamplesByRowName = { ...previousSelectedSamplesByRowName, ...action.selectedSamplesByRowName }\n      } else if (action.type === 'ADD_SELECTED_SAMPLES') {\n        updatedSelectedSamplesByRowName = Array.from(new Set([\n          ...Object.keys(previousSelectedSamplesByRowName),\n          ...Object.keys(action.selectedSamplesByRowName),\n        ])).reduce((acc, rowName) => {\n          acc[rowName] = Array.from(new Set([...(previousSelectedSamplesByRowName[rowName] || []), ...(action.selectedSamplesByRowName[rowName] || [])]))\n\n          return acc\n        }, {})\n      } else {\n        updatedSelectedSamplesByRowName = Object.keys(previousSelectedSamplesByRowName).reduce((acc, rowName) => {\n          const valuesToRemove = action.selectedSamplesByRowName[rowName] || []\n          const updatedList = (previousSelectedSamplesByRowName[rowName] || []).filter((v) => !valuesToRemove.includes(v))\n          if (updatedList.length > 0) {\n            acc[rowName] = updatedList\n          }\n          return acc\n        }, {})\n      }\n      break\n    }\n\n    case 'UPDATE_SAMPLE_SETTINGS': {\n      updatedSampleSettingsByRowName = { ...previousSampleSettingsByRowName } //make a copy\n      Object.keys(action.sampleSettingsByRowName).forEach((rowName) => {\n        updatedSampleSettingsByRowName[rowName] = action.sampleSettingsByRowName[rowName]\n      })\n      break\n    }\n\n    default: {\n      console.trace(`Unknown action type: ${action.type}`)\n      return state\n    }\n  }\n\n  return {\n    ...state,\n    [action.categoryName]: {\n      selectedSamples: updatedSelectedSamplesByRowName,\n      sampleSettings: updatedSampleSettingsByRowName,\n    },\n  }\n}\n\n// combined reducers\nconst otherReducers = combineReducers(Object.assign({\n  genome: zeroActionsReducer,\n  locus: createSingleValueReducer('UPDATE_LOCUS', ''),\n  rightSideBarLocusList: createArrayReducer('RIGHT_SIDE_BAR_LOCUS_LIST'),\n  leftSideBarLocusList: createArrayReducer('LEFT_SIDE_BAR_LOCUS_LIST'),\n  dataTypesToShow: createArrayReducer('DATA_TYPES_TO_SHOW'),\n  rowsInCategories: rowsInCategoriesReducer,\n  selectedRowNamesByCategoryName: selectedRowNamesByCategoryNameReducer,\n  selectedSamplesByCategoryNameAndRowName: selectedSamplesByCategoryNameAndRowNameReducer,\n  sjOptions: createSingleObjectReducer('UPDATE_SJ_OPTIONS'),\n  vcfOptions: createSingleObjectReducer('UPDATE_VCF_OPTIONS'),\n  bamOptions: createSingleObjectReducer('UPDATE_BAM_OPTIONS'),\n  gcnvOptions: createSingleObjectReducer('UPDATE_GCNV_OPTIONS'),\n  user: createSingleObjectReducer('UPDATE_USER'),\n  initialSettings: createSingleValueReducer('UPDATE_INITIAL_SETTINGS', {}),\n  initialSettingsUrl: createSingleValueReducer('UPDATE_INITIAL_SETTINGS_URL', ''),\n  initialSettingsUrlHasBeenApplied: createSingleValueReducer('UPDATE_INITIAL_SETTINGS_URL_HAS_BEEN_APPLIED', false),\n}, modalReducers))\n\n\nconst rootReducer = (state, action) => {\n  if (action.type === 'RESET_GLOBAL_STATE') {\n    return action.newState\n  }\n\n  const nextState = otherReducers(state, action)\n\n  updateLocalStorageAndUrl(nextState)\n  return nextState\n}\n\n\n/**\n * Initialize and return the Redux store\n * @param rootReducer\n * @param initialState\n * @returns {*}\n */\nexport const createReduxStore = () => {\n\n  const initialState = computeInitialState()\n\n  console.log('Initializing store to:', initialState)\n\n  return createStore(rootReducer, initialState, compose(applyMiddleware(thunkMiddleware)))\n}\n","import React from 'react'\nimport { Provider } from 'react-redux'\n\nimport BaseLayout from './components/BaseLayout'\nimport { createReduxStore } from './redux/rootReducer'\n\nfunction App() {\n  return (\n    <Provider store={createReduxStore()}>\n      <BaseLayout />\n    </Provider>)\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}