{"version":3,"sources":["utils/googleAuth.js","redux/constants.js","redux/selectors.js","components/LeftSideBar.jsx","components/RightSideBar.jsx","components/IGV.jsx","components/GoogleAuth.jsx","components/BaseLayout.jsx","redux/utils/reducerFactories.js","redux/rootReducer.js","utils/localStorage.js","redux/configureStore.js","App.js","index.js"],"names":["googleSignIn","a","gapi","auth2","getAuthInstance","authInstance","isSignedIn","get","signIn","getGoogleUserEmail","profile","currentUser","getBasicProfile","getEmail","getGoogleAccessToken","user","reloadAuthResponse","getAuthResponse","access_token","MOTIFS","getLocus","state","locus","getGenome","genome","getSamplesInfo","samplesInfo","getSelectedSampleNames","selectedSampleNames","getSjOptions","sjOptions","getBamOptions","bamOptions","getSelectedSamples","createSelector","map","category","samples","flat","filter","s","includes","name","getTracks","selectedSamples","igvTracks","forEach","sample","junctionsTrack","coverageTrack","junctions","hideAnnotated","hideUnannotated","type","format","url","indexURL","oauthToken","height","trackHeight","minUniquelyMappedReads","minTotalReads","maxFractionMultiMappedReads","minSplicedAlignmentOverhang","thicknessBasedOn","bounceHeightBasedOn","colorBy","labelUniqueReadCount","labelMultiMappedReadCount","labelTotalReadCount","labelMotif","labelIsAnnotatedJunction","labelIsAnnotatedJunctionValue","hideAnnotatedJunctions","hideUnannotatedJunctions","hideMotifs","motif","coverage","hideCoverage","push","tracks","showBams","bam","console","log","alignmentShading","showSoftClips","CategoryH3","styled","h3","CategoryDetails","div","StyledPopup","Popup","CategoryPanel","toUpperCase","length","SamplesPanel","updateSelectedSampleNames","key","SamplePanel","Checkbox","label","defaultChecked","onChange","e","data","checked","x","SampleDetails","description","inverted","content","position","on","trigger","Icon","style","marginLeft","LeftSideBar","this","props","updateBamOptions","React","Component","connect","dispatch","newValue","updateSjOptions","newSettings","updates","OptionDiv","OptionInput","input","SjOptionsPanel","value","handleTextInput","keyCode","target","defaultValue","onKeyUp","parseInt","width","BamOptionsPanel","RightSideBar","IGV_SETTINGS","showKaryo","showIdeogram","showNavigation","showRuler","showCenterGuide","showCursorTrackingGuide","showCommandBar","StyledDiv","IGV","setContainerElement","element","container","render","ref","shouldComponentUpdate","nextProps","nextTrackSettingsByTrackName","reduce","acc","item","track","nextTrackSettings","browser","removeTrackByName","loadTrack","warn","Object","values","igvBrowserOptions","igv","createBrowser","then","locusChangedHandler","delay","fn","timerId","args","clearTimeout","setTimeout","throttle","trackRemovedHandler","event","newLocus","replace","GoogleAuth","Promise","resolve","load","client","init","googleUserEmail","setState","Grid","Row","Column","zeroActionsReducer","createSingleValueReducer","updateActionType","initialState","debug","reducer","action","undefined","error","createSingleObjectReducer","newState","rootReducer","combineReducers","assign","loadState","serializedState","localStorage","getItem","JSON","parse","err","INITIAL_STATE","window","INITIAL_TRACKS","PERSIST_STATE_IN_URL","PERSIST_STATE_IN_LOCAL_STORAGE","enhancer","compose","applyMiddleware","thunkMiddleware","store","next","result","nextState","getState","stringify","setItem","saveState","stateToSave","keys","obj","location","hash","jsurl","configureStore","v","createStore","App","BaseLayout","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.fc2406ab.chunk.js","sourcesContent":["/* eslint-disable no-undef */\n\nconst RNA_VIEWER_CLIENT_ID = '61200892608-qphtf65o323setqdcfj4hnf601mmetvs.apps.googleusercontent.com'\n\nexport const initGoogleClient = () => new Promise(resolve => {\n  // init all gapi modules\n  gapi.load('client:auth2', () => {\n    gapi.client.load('storage', 'v1', () => {\n      gapi.client.init({\n        'clientId': RNA_VIEWER_CLIENT_ID,\n        'scope': 'https://www.googleapis.com/auth/devstorage.read_only',\n        'discoveryDocs': ['https://www.googleapis.com/discovery/v1/apis/storage/v1/rest']\n      })\n\n      resolve()\n    })\n  })\n})\n\nexport const googleSignIn = async () => {\n\n  const authInstance = await gapi.auth2.getAuthInstance()\n  if(!authInstance.isSignedIn.get()) {\n    await authInstance.signIn()\n  }\n}\n\nexport const getGoogleUserEmail = async () => {\n  const authInstance = await gapi.auth2.getAuthInstance()\n  const profile = authInstance.currentUser.get().getBasicProfile()\n\n  return profile.getEmail()\n}\n\nexport const getGoogleAccessToken = async () => {\n  // use OAuth2 to get an access token for RNA-seq viewer to access the google storage API on behalf of the user\n  const authInstance = await gapi.auth2.getAuthInstance()\n  const user = authInstance.currentUser.get()\n  if (!authInstance.isSignedIn.get()) {\n    user.reloadAuthResponse()\n  }\n\n  return user.getAuthResponse().access_token\n}\n\nexport const googleSignOut = async () => {\n  const authInstance = await gapi.auth2.getAuthInstance()\n  if(authInstance.isSignedIn.get()) {\n    await authInstance.signOut()\n  }\n}\n\nexport const listGoogleStorageFiles = async (gsPath) => {\n  if (!gsPath.startsWith(\"gs://\")) {\n    console.error(`${gsPath} doesn't start with \"gs://\"` )\n    return\n  }\n\n  const gsPathParts = gsPath.split(\"/\")\n  if (gsPathParts.length < 3) {\n    console.error(`${gsPath} must be of the form \"gs://bucket-name/...\"` )\n    return\n  }\n\n  const bucketName = gsPathParts[2]\n  const bucketSubdir = gsPathParts.slice(3).join('/')\n\n  return await gapi.client.storage.objects.list({ bucket: bucketName, prefix: bucketSubdir, maxResults:1000})\n}\n","\nexport const MOTIFS = ['GT/AG', 'CT/AC', 'GC/AG', 'CT/GC', 'AT/AC', 'GT/AT', 'non-canonical']\n","import { createSelector } from 'reselect'\nimport { getGoogleAccessToken } from '../utils/googleAuth'\nimport { MOTIFS } from './constants'\n\nexport const getLocus = state => state.locus\nexport const getGenome = state => state.genome\nexport const getSamplesInfo = state => state.samplesInfo\nexport const getSelectedSampleNames = state => state.selectedSampleNames\nexport const getSjOptions = state => state.sjOptions\nexport const getBamOptions = state => state.bamOptions\n\n\n/**\n * Expects sample info like:\n *\n * [\n *    {\n *      label: 'category1',\n *      samples : [\n *          { sample1 .. },\n *          { sample2 .. },\n *          ...\n *      ]\n *    },\n *    {\n *      label: 'category2',\n *      samples : [\n *        { sample3 .. },\n *        { sample4 .. },\n *        ...\n *      ]\n *    },\n * ]\n */\n\nexport const getSelectedSamples = createSelector(\n  getSamplesInfo,\n  getSelectedSampleNames,\n  (samplesInfo, selectedSampleNames) => samplesInfo.map(category => category.samples).flat().filter(s => selectedSampleNames.includes(s.name)),\n)\n\n\nexport const getTracks = createSelector(\n  getSelectedSamples,\n  getSjOptions,\n  getBamOptions,\n  (selectedSamples, sjOptions, bamOptions) => {\n    const igvTracks = []\n\n    selectedSamples.forEach((sample) => {\n      //docs @ https://github.com/igvteam/igv.js/wiki/Wig-Track\n      let junctionsTrack\n      if (sample.junctions && (!sjOptions.hideAnnotated || !sjOptions.hideUnannotated)) {\n        junctionsTrack = {\n          type: 'junctions',\n          format: 'bed',\n          url: sample.junctions,\n          indexURL: `${sample.junctions}.tbi`,\n          oauthToken: getGoogleAccessToken,\n          name: sample.name,\n          height: sjOptions.trackHeight,\n          minUniquelyMappedReads: sjOptions.minUniquelyMappedReads,\n          minTotalReads: sjOptions.minTotalReads,\n          maxFractionMultiMappedReads: sjOptions.maxFractionMultiMappedReads,\n          minSplicedAlignmentOverhang: sjOptions.minSplicedAlignmentOverhang,\n          thicknessBasedOn: sjOptions.thicknessBasedOn, //options: numUniqueReads (default), numReads, isAnnotatedJunction\n          bounceHeightBasedOn: sjOptions.bounceHeightBasedOn, //options: random (default), distance, thickness\n          colorBy: sjOptions.colorBy, //options: numUniqueReads (default), numReads, isAnnotatedJunction, strand, motif\n          labelUniqueReadCount: sjOptions.labelUniqueReadCount,\n          labelMultiMappedReadCount: sjOptions.labelMultiMappedReadCount,\n          labelTotalReadCount: sjOptions.labelTotalReadCount,\n          labelMotif: sjOptions.labelMotif,\n          labelIsAnnotatedJunction: sjOptions.labelIsAnnotatedJunction && sjOptions.labelIsAnnotatedJunctionValue,\n          hideAnnotatedJunctions: sjOptions.hideAnnotated,\n          hideUnannotatedJunctions: sjOptions.hideUnannotated,\n          hideMotifs: MOTIFS.filter( motif => sjOptions[`hideMotif${motif}`] ), //options: 'GT/AG', 'CT/AC', 'GC/AG', 'CT/GC', 'AT/AC', 'GT/AT', 'non-canonical'\n        }\n      }\n\n      let coverageTrack\n      if(sample.coverage && !sjOptions.hideCoverage) {\n        coverageTrack = {\n          type: 'wig',\n          format: 'bigwig',\n          url: sample.coverage,\n          oauthToken: getGoogleAccessToken,\n          name: sample.name,\n          height: sjOptions.trackHeight,\n        }\n      }\n\n      if (coverageTrack && junctionsTrack) {\n        igvTracks.push({\n          type: 'merged',\n          name: sample.name,\n          height: sjOptions.trackHeight,\n          tracks: [coverageTrack, junctionsTrack],\n        })\n      } else if (coverageTrack) {\n        igvTracks.push(coverageTrack)\n      } else if (junctionsTrack) {\n        //igvTracks.push(junctionsTrack)\n        igvTracks.push({\n          type: 'merged',\n          name: sample.name,\n          height: sjOptions.trackHeight,\n          tracks: [junctionsTrack],\n        })\n      }\n\n      /*\n      if (sample.vcf) {\n        //docs @ https://github.com/igvteam/igv.js/wiki/Alignment-Track\n        console.log(`Adding ${sample.vcf} track`)\n\n        igvTracks.push({\n          type: 'variant',\n          format: 'vcf',\n          url: sample.vcf,\n          indexUrl: `${sample.vcf}.tbi`,\n          oauthToken: getGoogleAccessToken,\n          name: sample.name,\n          displayMode: 'SQUISHED',\n        })\n      }\n      */\n      if (bamOptions.showBams && sample.bam) {\n        //docs @ https://github.com/igvteam/igv.js/wiki/Alignment-Track\n        console.log(`Adding ${sample.bam} track`)\n\n        igvTracks.push({\n          type: 'alignment',\n          url: sample.bam,\n          name: `${sample.name} bam`,\n          alignmentShading: bamOptions.alignmentShading,\n          showSoftClips: bamOptions.showSoftClips,\n          oauthToken: getGoogleAccessToken,\n          //...trackOptions,\n        })\n      }\n    })\n\n    return igvTracks\n  }\n)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from \"styled-components\"\nimport { Checkbox, Icon, Popup } from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport { getSamplesInfo, getSelectedSampleNames, getSjOptions, getBamOptions } from '../redux/selectors'\n\n\n\nconst CategoryH3 = styled.h3` \n  display: inline-block;\n  margin: 12px 0px 0px 0px !important;\n`\nconst CategoryDetails = styled.div`\n  display: inline-block;\n  margin: 0px 0px 0px 15px;\n  color: #999;\n  white-space: nowrap;\n`\n\nconst StyledPopup = styled(Popup)`\n  opacity: 0.95;\n`\n\nconst CategoryPanel = ({category}) =>\n  <div>\n    <CategoryH3>{category.name.toUpperCase()}</CategoryH3>\n    {\n      category.samples.length >= 10 && <CategoryDetails>{`(N=${category.samples.length}) `}</CategoryDetails>\n    }\n  </div>\n\n\nconst SamplesPanel = ({samplesInfo, selectedSampleNames, updateSelectedSampleNames}) =>\n  samplesInfo.map(category =>\n    <div key={category.name}>\n      <CategoryPanel category={category} />\n      {\n        category.samples.map(sample =>\n          <SamplePanel key={sample.name} sample={sample} selectedSampleNames={selectedSampleNames} updateSelectedSampleNames={updateSelectedSampleNames}/>\n        )\n      }\n    </div>,\n  )\n\nconst SamplePanel = ({sample, selectedSampleNames, updateSelectedSampleNames}) =>\n  <div>\n    <Checkbox\n      label={sample.name}\n      defaultChecked={selectedSampleNames.includes(sample.name)}\n      onChange={(e, data) =>\n        updateSelectedSampleNames(\n          data.checked ? [...selectedSampleNames, data.label] : selectedSampleNames.filter(x => x !== data.label),\n        )\n      }\n    />\n    <SampleDetails sample={sample} />\n  </div>\n\nconst SampleDetails = ({sample}) => {\n  return (sample.description ?\n    <StyledPopup inverted\n      content={sample.description}\n      position=\"right center\"\n      on=\"click\"\n      trigger={\n        <Icon style={{marginLeft: '10px'}} name=\"question circle outline\" />\n      } /> : null)\n}\n\nclass LeftSideBar extends React.Component\n{\n  static propTypes = {\n    samplesInfo: PropTypes.array,\n    selectedSampleNames: PropTypes.array,\n    sjOptions: PropTypes.object,\n    bamOptions: PropTypes.object,\n    updateSelectedSampleNames: PropTypes.func,\n    updateSjOptions: PropTypes.func,\n    updateBamOptions: PropTypes.func,\n  }\n\n  render() {\n    //const params = new URLSearchParams(window.location.search)\n    return (\n      <div>\n        <Checkbox label=\"show BAM tracks\" defaultChecked={this.props.bamOptions.showBams} onChange={(e, data) => this.props.updateBamOptions({ showBams: data.checked })} />\n\n        <SamplesPanel\n          samplesInfo={this.props.samplesInfo}\n          selectedSampleNames={this.props.selectedSampleNames}\n          updateSelectedSampleNames={this.props.updateSelectedSampleNames}\n        />\n      </div>)\n  }\n}\n\nconst mapStateToProps = state => ({\n  selectedSampleNames: getSelectedSampleNames(state),\n  samplesInfo: getSamplesInfo(state),\n  sjOptions: getSjOptions(state),\n  bamOptions: getBamOptions(state),\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n  updateSelectedSampleNames: (selectedSampleNames) => {\n    dispatch({\n      type: 'UPDATE_SELECTED_SAMPLES',\n      newValue: selectedSampleNames,\n    })\n  },\n  updateSjOptions: (newSettings) => {\n    dispatch({\n      type: 'UPDATE_SJ_OPTIONS',\n      updates: newSettings,\n    })\n  },\n  updateBamOptions: (newSettings) => {\n    dispatch({\n      type: 'UPDATE_BAM_OPTIONS',\n      updates: newSettings,\n    })\n  },\n})\n\n\nexport { LeftSideBar as LeftSideBarComponent }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LeftSideBar)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from \"styled-components\"\nimport { Checkbox, Icon, Popup } from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport { getSamplesInfo, getSelectedSampleNames, getSjOptions, getBamOptions } from '../redux/selectors'\nimport { MOTIFS } from '../redux/constants'\n\n\nconst CategoryH3 = styled.h3` \n  display: inline-block;\n  margin: 12px 0px 0px 0px !important;\n`\n\nconst OptionDiv = styled.div`\n  padding-top:3px;\n`\n\nconst OptionInput = styled.input`\n  display: inline;\n  width: 50px;\n  margin-left: 5px;\n  padding-left: 5px;\n`\n\nconst StyledPopup = styled(Popup)`\n  opacity: 0.95;\n`\n\nconst SjOptionsPanel = ({ sjOptions, updateSjOptions, value=null }) => {\n  const handleTextInput = (e, name) => {\n    if (e.keyCode === 13) {\n      updateSjOptions({ [name]: value || e.target.value })\n    }\n  }\n\n  return <div>\n    <CategoryH3>JUNCTION TRACK OPTIONS</CategoryH3><br />\n    <OptionDiv>Track height: <OptionInput type=\"text\" defaultValue={sjOptions.trackHeight} onKeyUp={e => handleTextInput(e, 'trackHeight', value=parseInt(e.target.value))} /> px</OptionDiv>\n    <OptionDiv><Checkbox label=\"Show coverage\" defaultChecked={!sjOptions.hideCoverage} onChange={(e, data) => updateSjOptions({ hideCoverage: !data.checked })} /></OptionDiv>\n    <OptionDiv><Checkbox label=\"Show known junctions\" defaultChecked={!sjOptions.hideAnnotated} onChange={(e, data) => updateSjOptions({ hideAnnotated: !data.checked })} /></OptionDiv>\n    <OptionDiv><Checkbox label=\"Show unknown junctions\" defaultChecked={!sjOptions.hideUnannotated} onChange={(e, data) => updateSjOptions({ hideUnannotated: !data.checked })} /></OptionDiv>\n\n    <OptionDiv>Color by:</OptionDiv>\n    <OptionDiv>\n      <select defaultValue={sjOptions.colorBy} onChange={e => updateSjOptions({ colorBy: e.target.value })}>\n        <option value=\"strand\">strand</option>\n        <option value=\"motif\">donor/acceptor motif</option>\n        <option value=\"numUniqueReads\"># uniquely-mapped reads</option>\n        <option value=\"numReads\"># total reads</option>\n        <option value=\"isAnnotatedJunction\">is known junction</option>\n      </select>\n    </OptionDiv>\n    <OptionDiv>Junction thickness:</OptionDiv>\n    <OptionDiv>\n      <select defaultValue={sjOptions.thicknessBasedOn} onChange={e => updateSjOptions({ thicknessBasedOn: e.target.value })}>\n        <option value=\"numUniqueReads\"># uniquely-mapped reads</option>\n        <option value=\"numReads\"># total reads</option>\n        <option value=\"isAnnotatedJunction\">is known junction</option>\n      </select>\n    </OptionDiv>\n    <OptionDiv>Junction bounce height:</OptionDiv>\n    <OptionDiv>\n      <select defaultValue={sjOptions.bounceHeightBasedOn} onChange={e => updateSjOptions({ bounceHeightBasedOn: e.target.value })}>\n        <option value=\"random\">random</option>\n        <option value=\"distance\">distance</option>\n        <option value=\"thickness\">thickness</option>\n      </select>\n    </OptionDiv>\n    <OptionDiv>Junction label:</OptionDiv>\n    <OptionDiv><Checkbox label=\"# uniquely-mapped\" defaultChecked={sjOptions.labelUniqueReadCount} onChange={(e, data) => updateSjOptions({ labelUniqueReadCount: data.checked })} /></OptionDiv>\n    <OptionDiv><Checkbox label=\"# multi-mapped\" defaultChecked={sjOptions.labelMultiMappedReadCount} onChange={(e, data) => updateSjOptions({ labelMultiMappedReadCount: data.checked })} /></OptionDiv>\n    <OptionDiv><Checkbox label=\"# total reads\" defaultChecked={sjOptions.labelTotalReadCount} onChange={(e, data) => updateSjOptions({ labelTotalReadCount: data.checked })} /></OptionDiv>\n    <OptionDiv><Checkbox label=\"donor/acceptor motif\" defaultChecked={sjOptions.labelMotif} onChange={(e, data) => updateSjOptions({ labelMotif: data.checked })} /></OptionDiv>\n    <OptionDiv>\n      <Checkbox label=\"known junction:\" defaultChecked={sjOptions.labelIsAnnotatedJunction} onChange={(e, data) => updateSjOptions({ labelIsAnnotatedJunction: data.checked })} />\n      <OptionInput type=\"text\" defaultValue={sjOptions.labelIsAnnotatedJunctionValue} onKeyUp={e => handleTextInput(e, 'labelIsAnnotatedJunctionValue')} style={{ width: '35px'}}  />\n    </OptionDiv>\n\n    <CategoryH3>JUNCTION TRACK FILTERS</CategoryH3><br />\n    <div>\n      <OptionDiv>Uniquely-mapped reads:</OptionDiv>\n      at least <OptionInput type=\"text\" defaultValue={sjOptions.minUniquelyMappedReads} onKeyUp={e => handleTextInput(e, 'minUniquelyMappedReads', value=parseInt(e.target.value))} />\n    </div>\n    <div>\n      <OptionDiv>Total reads:</OptionDiv>\n      at least <OptionInput type=\"text\"  defaultValue={sjOptions.minTotalReads} onKeyUp={e => handleTextInput(e, 'minTotalReads', value=parseInt(e.target.value))} />\n    </div>\n    <div>\n      <OptionDiv>Fraction multi-mapped:\n        <StyledPopup inverted\n          content=\"Allows filtering of junctions where most reads that span the junction are multi-mapped reads. For example, setting this to 0.79 will hide junctions where 8 out of 10 (or more) reads that span the junction are not uniquely mapped reads.\"\n          position=\"left center\"\n          on=\"click\"\n          trigger={\n            <Icon style={{marginLeft: '8px'}} name=\"question circle outline\" />\n          } />\n      </OptionDiv>\n      at most <OptionInput type=\"text\" defaultValue={sjOptions.maxFractionMultiMappedReads} onKeyUp={e => handleTextInput(e, 'maxFractionMultiMappedReads', value=parseInt(e.target.value))} />\n    </div>\n    <div>\n      <OptionDiv>Splice overhang base-pairs:</OptionDiv>\n      at least <OptionInput type=\"text\" defaultValue={sjOptions.minSplicedAlignmentOverhang} onKeyUp={e => handleTextInput(e, 'minSplicedAlignmentOverhang', value=parseInt(e.target.value))} />\n    </div>\n    <div>\n      <OptionDiv>Donor/Acceptor Motifs:</OptionDiv>\n      {\n        MOTIFS.map(motif =>\n          <OptionDiv key={motif}><Checkbox label={`Show ${motif}`} defaultChecked={!sjOptions[`hideMotif${motif}`]} onChange={(e, data) => updateSjOptions({ [`hideMotif${motif}`]: !data.checked })} /></OptionDiv>\n        )\n      }\n    </div>\n  </div>\n}\n\nconst BamOptionsPanel = ( { bamOptions, updateBamOptions }) => <div>\n\n</div>\n\n\nclass RightSideBar extends React.Component\n{\n  static propTypes = {\n    sjOptions: PropTypes.object,\n    samplesInfo: PropTypes.array,\n    selectedSampleNames: PropTypes.array,\n    updateSjOptions: PropTypes.func,\n    updateBamOptions: PropTypes.func,\n    updateSelectedSampleNames: PropTypes.func,\n  }\n\n  render() {\n    return <div>\n      <SjOptionsPanel\n        sjOptions={this.props.sjOptions}\n        updateSjOptions={this.props.updateSjOptions}\n      />\n      <BamOptionsPanel\n        bamOptions={this.props.bamOptions}\n        updateBamOptions={this.props.updateBamOptions}\n      />\n    </div>\n  }\n}\n\nconst mapStateToProps = state => ({\n  sjOptions: getSjOptions(state),\n  bamOptions: getBamOptions(state),\n  selectedSampleNames: getSelectedSampleNames(state),\n  samplesInfo: getSamplesInfo(state),\n})\n\nconst mapDispatchToProps = dispatch => ({\n  updateSelectedSampleNames: (selectedSampleNames) => {\n    dispatch({\n      type: 'UPDATE_SELECTED_SAMPLES',\n      newValue: selectedSampleNames,\n    })\n  },\n  updateSjOptions: (newSettings) => {\n    dispatch({\n      type: 'UPDATE_SJ_OPTIONS',\n      updates: newSettings,\n    })\n  },\n  updateBamOptions: (newSettings) => {\n    dispatch({\n      type: 'UPDATE_BAM_OPTIONS',\n      updates: newSettings,\n    })\n  },\n})\n\n\nexport { RightSideBar as RightSideBarComponent }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RightSideBar)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport igv from 'igv'\nimport { connect } from 'react-redux'\n\nimport { getGenome, getLocus, getTracks, getSjOptions, getBamOptions } from '../redux/selectors'\n\nconst IGV_SETTINGS = {\n  showKaryo: false,\n  showIdeogram: false,\n  showNavigation: true,\n  showRuler: true,\n  showCenterGuide: true,\n  showCursorTrackingGuide: true,\n  showCommandBar: true,\n}\n\nconst StyledDiv = styled.div``\n\nconst throttle = (delay, fn) => {\n  let timerId\n  return (...args) => {\n    if (timerId) {\n      clearTimeout(timerId)\n    }\n    timerId = setTimeout(() => {\n      fn(...args)\n      timerId = null\n    }, delay)\n  }\n}\n\nclass IGV extends React.Component {\n\n  static propTypes = {\n    genome: PropTypes.string.isRequired,\n    locus: PropTypes.string.isRequired,\n    tracks: PropTypes.array.isRequired,\n    locusChangedHandler: PropTypes.func,\n    trackRemovedHandler: PropTypes.func,\n    sjOptions: PropTypes.object,\n    bamOptions: PropTypes.object,\n  }\n\n  constructor(props) {\n    super(props)\n\n    this.container = null\n    this.browser = null\n  }\n\n  setContainerElement = (element) => {\n    this.container = element\n  }\n\n  render = () => <StyledDiv><div ref={this.setContainerElement} /></StyledDiv>\n\n  componentDidMount() {\n\n    if (!this.container) {\n      return\n    }\n\n    let igvBrowserOptions = {\n      ...IGV_SETTINGS,\n      locus: this.props.locus,\n      genome: this.props.genome,\n      tracks: this.props.tracks,\n    }\n\n    igv.createBrowser(this.container, igvBrowserOptions).then((browser) => {\n      this.browser = browser\n\n      if (this.props.locusChangedHandler) {\n        this.browser.on('locuschange', throttle(300, this.props.locusChangedHandler)) //{chr, start, end, label}\n      }\n\n      if (this.props.trackRemovedHandler) {\n        this.browser.on('trackremoved', this.props.trackRemovedHandler)\n      }\n    })\n  }\n\n  shouldComponentUpdate = nextProps => {\n    if (!this.container) {\n      return false\n    }\n\n    let nextTrackSettingsByTrackName = nextProps.tracks.reduce((acc, item) => {\n      return {[item.name]: item, ...acc}\n    }, {})\n\n    console.log('IGV.nextProps:', nextProps )\n    // update or remove existing tracks\n    for (let track of this.props.tracks) {\n      const nextTrackSettings = nextTrackSettingsByTrackName[track.name]\n      if (nextTrackSettings) {\n        if ( (nextProps.sjOptions !== this.props.sjOptions && ['merged', 'wig', 'junctions'].includes(track.type) ) ||\n             (nextProps.bamOptions !== this.props.bamOptions && 'bam' === track.type)\n        ) {\n          this.browser.removeTrackByName(track.name)\n          this.browser.loadTrack(nextTrackSettings)\n        }\n\n        // delete track from nextTrackSettingsByTrackName to indicate that it's still selected\n        delete nextTrackSettingsByTrackName[track.name]\n\n      } else {\n        // remove track that was de-selected\n        try {\n          this.browser.removeTrackByName(track.name)\n        } catch(e) {\n          console.warn('Unable to remove track', track.name, e)\n        }\n      }\n    }\n\n    // load any newly-selected track(s)\n    for (let track of Object.values(nextTrackSettingsByTrackName)) {\n      try {\n        this.browser.loadTrack(track)\n      } catch(e) {\n        console.warn('Unable to add track', track.name, e)\n      }\n    }\n\n    return false\n  }\n}\n\n\nconst mapDispatchToProps = dispatch => ({\n  locusChangedHandler: (event) => {\n    const newLocus = event.label.replace(/,/g, '')\n\n    dispatch({\n      type: 'UPDATE_LOCUS',\n      newValue: newLocus,\n    })\n  },\n  /*\n  trackRemovedHandler: (track) => {\n    const trackName = track.name\n    dispatch({\n      type: 'UPDATE_SELECTED_SAMPLES',\n      newValue: selectedSampleNames,\n    })\n  },\n  */\n})\n\nconst mapStateToProps = state => ({\n  genome: getGenome(state),\n  locus: getLocus(state),\n  tracks: getTracks(state),\n  sjOptions: getSjOptions(state),\n  bamOptions: getBamOptions(state),\n})\n\nexport { IGV as IGVComponent }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IGV)\n\n","import React from 'react'\nimport styled from \"styled-components\"\nimport { getGoogleUserEmail, googleSignIn, initGoogleClient } from \"../utils/googleAuth\"\n\nconst StyledDiv = styled.div`\n  text-align: right;\n  margin: 20px 70px 0px 0px;\n  color: #999;\n`\n\nclass GoogleAuth extends React.Component\n{\n  constructor(props) {\n    super(props)\n\n    this.state = {}\n  }\n\n  async componentDidMount() {\n\n    await initGoogleClient()\n    await googleSignIn()\n    this.googleUserEmail = await getGoogleUserEmail()\n    this.setState({googleUserEmail: this.googleUserEmail})\n  }\n\n  render() {\n    if (!this.state.googleUserEmail) {\n      return <StyledDiv />\n    }\n\n    return <StyledDiv>Signed in to Google Buckets as <b>{this.state.googleUserEmail}</b></StyledDiv>\n  }\n}\n\nexport { GoogleAuth as GoogleAuthComponent }\n\nexport default GoogleAuth\n","import React from 'react'\nimport styled from \"styled-components\"\nimport { Grid } from 'semantic-ui-react'\nimport LeftSideBar from './LeftSideBar'\nimport RightSideBar from './RightSideBar'\nimport IGV from './IGV'\nimport GoogleAuth from './GoogleAuth'\n\nconst StyledDiv = styled.div`\n  padding: 10px 20px\n`\n\nexport default () => (\n  <StyledDiv>\n    <Grid>\n      <Grid.Row>\n        <Grid.Column width={2}>\n          <LeftSideBar />\n        </Grid.Column>\n        <Grid.Column width={12}>\n          <IGV />\n          <GoogleAuth />\n        </Grid.Column>\n        <Grid.Column width={2}>\n          <RightSideBar />\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  </StyledDiv>\n)\n","/**\n * Redux reducers take a 'state' object representing the current application\n * state, and an 'action' object specifying some change to that state.\n * They apply the change and return the updated 'state' object.\n * For more details, see: http://redux.js.org/docs/basics/Reducers.html\n *\n * This module provides generic reducers that can be used to manage the following common types of\n * state shapes:\n *\n * { ... } - zero actions - arbitrary state shape that doesn't change after it's initialized, so\n *          this reducer doesn't perform any actions.\n *\n * value - single value - reducer supports 1 action that replaces the value with a new value.\n *\n * { key1: value1, key2: value2 .. } - single object - reducer supports 1 action that allows\n *          changing the values of one or more keys.\n *\n * { id1: { key1: value1, key2: value2, .. },\n *   id2: { key1: value1, key2: value2, .. },\n *   id3: ... }  -  objects by id - reducer supports several actions:\n *          adding or deleting objects by id, and updating the values within one or more objects\n *          specified by id.\n *\n *\n * ==========\n * Additional state shapes that may be implemnted as needed:\n *\n * { id1: value1, id2: value2 .. } - values by id - reducer supports several actions:\n *          adding or deleting values by id, and replacing one or more values by id.\n *\n * [ value1, value2, .. ] - single array - supports actions that add and remove values from the array\n *\n * { id1: [ value1, value2, .. ]\n *   id2: [ value1, value2, .. ] - arrays by id\n */\n\n/**\n * Reducer that can be used to manage any state that doesn't change after it's initialized.\n */\nexport const zeroActionsReducer = (state = {}) => {\n  return state\n}\n\n/**\n * Factory function that creates a reducer for managing any state object that's treated as a single\n * atomic value, where the only supported modification is to replace this value with a new value.\n *\n * As an example use case, lets say an app has one or more on/off toggles. Each of these toggles is\n * bound to a single state variable: 'isOn' which is either true or false.\n *\n * This function can be used to create the reducer(s) for managing a toggle's state:\n *\n * const rootReducer = combineReducers({\n *        toggleA: createSingleValueReducer('UPDATE_TOGGLE_A'),\n *        toggleB: createSingleValueReducer('UPDATE_TOGGLE_B'),\n *        ...\n *      })\n *\n * Here, the argument 'UPDATE_TOGGLE_A' specifies the action type that will later be dispatched\n * to update that toggle's state. For example, to set a toggle to \"off\":\n *\n * dispatch({\n *      type: 'UPDATE_TOGGLE_A',\n *      newValue: false,\n * })\n *\n * @param updateActionType (string) action.type that will later be used to replace the state with a\n * new state.\n */\nexport const createSingleValueReducer = (updateActionType, initialState = {}, debug = false) => {\n  const reducer = (state = initialState, action) => {\n    if (!action) {\n      return state\n    }\n\n    switch (action.type) {\n      case updateActionType: {\n        if (action.newValue === undefined) {\n          console.error(`Invalid ${updateActionType} action: action.newValue is undefined: `, action)\n          return state\n        }\n        if (debug) {\n          console.log('singleValueReducer: applying action: ', action, 'State changing from ', state, ' to ', action.newValue)\n        }\n        return action.newValue\n      }\n      default:\n        return state\n    }\n  }\n\n  return reducer\n}\n\n\n/**\n * Factory function that creates a reducer for managing a state object with some fixed set of keys.\n * The reducer supports an 'UPDATE' action that can be used to set one or more\n * of these keys to new values.\n *\n * As an example use case, lets say an app displays several instances of a widget whose state\n * consists of this state object:\n *\n *    { isVisible: true, size: 5, names:  ['bob', 'gary', .. ], ... }\n *\n * This function can be used to create a reducer for this state:\n *\n *    const widgetReducer = createSingleObjectReducer('UPDATE_WIDGET')\n *\n * Here, the argument 'UPDATE_WIDGET' specifies the action type that will later be dispatched to\n * update the widget's state.\n *\n * After this, an action with type 'UPDATE_WIDGET' can be dispatched:\n *\n *    dispatch({\n *      type: 'UPDATE_WIDGET',\n *      updates: { isVisible: false, names: ['jim', 'liza'] }\n *    })\n *\n * which will cause the state object to be updated to:\n *\n *    { isVisible: false, size: 5, names:  ['jim', 'liza'], ... }\n *\n * These reducers can also be used with combineReducers(..):\n *\n *    const rootReducer = combineReducers({\n *        widget1: createSingleObjectReducer('UPDATE_WIDGET1'),\n *        widget2: createSingleObjectReducer('UPDATE_WIDGET2'),\n *        other: ..,\n *        ..\n *    })\n *\n * @param updateActionType (string) action.type that will later be used to update the state object.\n */\nexport const createSingleObjectReducer = (updateActionType, initialState = {}, debug = false) => {\n  const reducer = (state = initialState, action) => {\n    if (!action) {\n      return state\n    }\n\n    switch (action.type) {\n      case updateActionType: {\n        if (action.updates === undefined) {\n          console.error(`Invalid ${updateActionType} action: action.updates is undefined: `, action)\n          return state\n        }\n\n        const newState = { ...state, ...action.updates }\n        if (debug) {\n          console.log('singleObjectReducer: applying action: ', action, 'State changing from ', state, ' to ', newState)\n        }\n        return newState\n      }\n      default:\n        return state\n    }\n  }\n\n  return reducer\n}\n\n/**\n * Factory function that creates a reducer for managing a state object that looks like:\n *\n * { id1: { key1: valueA, key2: valueB, key3: valueC },\n *   id2: { key1: valueI, key2: valueJ, key3: valueK },\n *   id3: ...\n * }\n *\n * This state object is analogous to a database table, where the contained objects represent table\n * rows and have identical sets of keys but different values, so that each key can be thought of as\n * a column in the table.\n *\n * This reducer supports a single action type that can be used to transform the underlying state\n * in several ways:\n *    - adding new objects by id\n *    - deleting objects by id\n *    - updating the values within one or more existing objects by id\n *\n * As an example, the reducer can be created as follows:\n *\n *      const tableRowReducer = createObjectsByIdReducer('UPDATE_TABLE_X')\n *\n * Here, the 'UPDATE_TABLE_X' argument specifies the action type that will later be dispatched\n * to perform modifications. For example, the action below will change some of the values and also\n * both delete some ids and add some new ids:\n *\n * dispatch({\n *   type: 'UPDATE_TABLE_X',\n *   updatesById: {\n *     id1: { key2: valueM },                                 // update key2 value in object with id1\n *     idNew: { key1: valueX, key2: valueY, key3: valueZ },   // add new object and id\n *     id2: null,                                             // delete id2\n *   }\n *  })\n *\n * The resulting state after this action would look like:\n *\n * { id1: { key1: valueA, key2: valueM, key3: valueC },\n *   idNew: { key1: valueX, key2: valueY, key3: valueZ },\n *   id3: ...\n * }\n *\n * @param updateStateActionId (string) action.type that will later be used to update the state object.\n */\nexport const createObjectsByIdReducer = (updateActionType, key, initialState = {}, debug = false) => {\n  const reducer = (state = initialState, action) => {\n    if (!action) {\n      return state\n    }\n\n    switch (action.type) {\n      case updateActionType: {\n        if (action.updatesById === undefined) {\n          console.error(`Invalid ${updateActionType} action. action.updatesById is undefined: `, action)\n          return state\n        }\n        let updates = action.updatesById\n        if (key) {\n          if (!(key in updates)) {\n            return state\n          }\n          updates = updates[key]\n        }\n        const shallowCopy = { ...state }\n        Object.entries(updates).forEach(([id, obj]) => {\n          if (obj == null) {\n            // if the id is mapped to a null or undefined value, then delete this id\n            delete shallowCopy[id]\n          } else if (shallowCopy[id]) {\n            shallowCopy[id] = { ...shallowCopy[id], ...obj }\n          } else {\n            shallowCopy[id] = { ...obj }\n          }\n        })\n\n        if (debug) {\n          console.log('objectsByIdReducer: applying action: ', action, 'State changing from: ', state, ' to ', shallowCopy)\n        }\n        return shallowCopy\n      }\n      default:\n        return state\n    }\n  }\n\n  return reducer\n}\n\n\n/**\n * Factory function that creates a reducer for managing a state object that looks like:\n *\n * {\n *    loading: false,\n *    error: null,\n * }\n *\n * This state object encapsulates an entity type that is fetched from the server\n *\n * This reducer supports a two action types:\n * 1) A request action that sets the state to loading\n * 2) A receive action that indicates the loading has completed\n *\n * @param requestActionType (string) action.type representing a \"request\" event\n * @param receiveActionType (string) action.type representing a \"receive\" event\n */\nexport const loadingReducer = (requestActionType, receiveActionType, initialState = { isLoading: false, errorMessage: null }, debug = false) => {\n  const reducer = (state = initialState, action) => {\n    switch (action.type) {\n      case requestActionType:\n        if (debug) {\n          console.log(`fetchObjectsReducer: applying action: ${action.type}. State changing to loading`)\n        }\n        return Object.assign({}, state, {\n          isLoading: true,\n        })\n      case receiveActionType:\n        if (debug) {\n          console.log(`fetchObjectsReducer: applying action: ${action.type}. State changing to received: ${action.byGuid}`)\n        }\n        return Object.assign({}, state, {\n          isLoading: false,\n          errorMessage: action.error,\n        })\n      default:\n        return state\n    }\n  }\n  return reducer\n}\n","import { combineReducers } from 'redux'\n\nimport {\n  zeroActionsReducer,\n  createSingleValueReducer,\n  createSingleObjectReducer,\n} from './utils/reducerFactories'\n\n\n// root reducer\nconst rootReducer = combineReducers(Object.assign({\n  //loci: createObjectsByIdReducer('UPDATE_LOCI'),\n  genome: zeroActionsReducer,\n  locus: createSingleValueReducer('UPDATE_LOCUS', ''),\n  samplesInfo: zeroActionsReducer,\n  selectedSampleNames: createSingleValueReducer('UPDATE_SELECTED_SAMPLES', []),\n  sjOptions: createSingleObjectReducer('UPDATE_SJ_OPTIONS'),\n  bamOptions: createSingleObjectReducer('UPDATE_BAM_OPTIONS'),\n}))\n\nexport default rootReducer\n","/**\n * Uses the localStorage API to save a state object in the browser under the given label.\n * @param label {string}\n * @param state {object}\n */\nexport const saveState = (label, state) => {\n  try {\n    const serializedState = JSON.stringify(state)\n    localStorage.setItem(label, serializedState)\n  } catch (err) {\n    // Ignore write errors.\n  }\n}\n\n\n/**\n * Uses the localStorage API to restored a previously-saved state object.\n * @param label {string}\n * @param state {object}\n */\nexport const loadState = (label) => {\n  try {\n    const serializedState = localStorage.getItem(label)\n    if (serializedState === null) {\n      return undefined\n    }\n    return JSON.parse(serializedState)\n  } catch (err) {\n    return undefined\n  }\n}\n","import { createStore, applyMiddleware, compose } from 'redux'\n//import logger from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport jsurl from 'jsurl'\n\nimport { loadState, saveState } from '../utils/localStorage'\nimport { MOTIFS } from './constants'\n\nconst INITIAL_STATE = {\n  genome: 'hg38',\n  locus: 'chr15:92,835,700-93,031,800',\n  sjOptions: {\n    trackHeight: 170,\n    hideCoverage: false,\n    hideAnnotated: false,\n    hideUnannotated: false,\n    colorBy: 'strand',\n    minUniquelyMappedReads: 1,\n    minTotalReads: 1,\n    maxFractionMultiMappedReads: 1,\n    minSplicedAlignmentOverhang: 0,\n    thicknessBasedOn: 'numUniqueReads', //options: numUniqueReads (default), numReads, isAnnotatedJunction\n    bounceHeightBasedOn: 'random', //options: random (default), distance, thickness\n    labelUniqueReadCount: true,\n    labelMultiMappedReadCount: true,\n    labelTotalReadCount: false,\n    labelMotif: true,\n    labelIsAnnotatedJunction: false,\n    labelIsAnnotatedJunctionValue: \" [A]\",\n    ...MOTIFS.reduce((acc, motif) => { return { ...acc, [`hideMotif${motif}`]: false } }, {}),\n  },\n  bamOptions: {\n    trackHeight: 100,\n    showSoftClips: true,\n    alignmentShading: 'strand',\n  },\n  samplesInfo: window.INITIAL_TRACKS || [],\n}\n\nconst PERSIST_STATE_IN_URL = [\n  'locus', 'selectedSampleNames', 'sjOptions', 'bamOptions',\n]\n\nconst PERSIST_STATE_IN_LOCAL_STORAGE = []\n\nconst persistStoreMiddleware = store => next => (action) => {\n  const result = next(action)\n  const nextState = store.getState()\n  PERSIST_STATE_IN_LOCAL_STORAGE.forEach((key) => { saveState(key, nextState[key]) })\n\n  const stateToSave = Object.keys(nextState)\n    .filter(key => PERSIST_STATE_IN_URL.includes(key))\n    .reduce((obj, key) => {\n      return {\n        ...obj,\n        [key]: nextState[key],\n      }\n    }, {})\n\n  window.location.hash = `#${jsurl.stringify(stateToSave)}`\n\n  return result\n}\n\nconst enhancer = compose(\n  applyMiddleware(thunkMiddleware, persistStoreMiddleware),\n)\n\n\n/**\n * Initialize the Redux store\n * @param rootReducer\n * @param initialState\n * @returns {*}\n */\nexport const configureStore = (\n  rootReducer = state => state,\n  initialState = INITIAL_STATE,\n) => {\n\n  //restore any values from local storage\n  PERSIST_STATE_IN_LOCAL_STORAGE.forEach((key) => {\n    const v = loadState(key)\n    if (v !== undefined) {\n      initialState[key] = v\n    }\n  })\n\n  //values from url override values from local storage\n  initialState = { ...initialState, ...jsurl.parse(window.location.hash.replace(/^#/, '')) }\n\n  console.log('Initializing store to:', initialState)\n\n  return createStore(rootReducer, initialState, enhancer)\n}\n","import React from 'react';\nimport './App.css';\n\nimport { Provider } from 'react-redux'\n\nimport BaseLayout from './components/BaseLayout'\nimport rootReducer from './redux/rootReducer'\nimport { configureStore } from './redux/configureStore'\n\nfunction App() {\n  return <Provider store={configureStore(rootReducer)}>\n    <BaseLayout />\n  </Provider>\n}\n\nexport default App;\n\n\n//import 'semantic-ui-css/semantic-custom.css'\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n"],"sourceRoot":""}