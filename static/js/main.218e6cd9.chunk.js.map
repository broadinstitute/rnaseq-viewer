{"version":3,"sources":["components/SideBarUtils.jsx","redux/utils/reducerFactories.js","redux/utils/modalReducer.js","components/Modal.jsx","components/EditLocusList.jsx","components/AddRows.jsx","utils/googleAuth.js","constants.js","redux/selectors.js","components/SearchRows.jsx","components/LeftSideBar.jsx","components/optionsPanels/BamOptionsPanel.jsx","components/optionsPanels/VcfOptionsPanel.jsx","components/optionsPanels/SpliceJunctionsOptionsPanel.jsx","components/optionsPanels/ColorPicker.jsx","components/optionsPanels/GcnvOptionsPanel.jsx","components/RightSideBar.jsx","components/About.jsx","components/UserInfo.jsx","components/Header.jsx","utils/throttle.js","components/IGV.jsx","components/RequestStatus.jsx","utils/localStorage.js","redux/initialState.js","components/InitialSettingsForm.jsx","components/BaseLayout.jsx","redux/rootReducer.js","App.js","index.js"],"names":["CategoryH3","styled","h3","OptionDiv","div","StyledPopup","Popup","ColorLegendIcon","Icon","OptionInput","input","createSingleValueReducer","updateActionType","initialState","debug","reducer","state","action","type","undefined","newValue","console","error","log","createSingleObjectReducer","updates","newState","createArrayReducer","actionTypeSuffix","Array","isArray","values","valuesToRemove","filter","v","includes","modals","key","updatesById","shallowCopy","Object","entries","forEach","id","obj","createObjectsByIdReducer","getModalOpen","modalName","open","ButtonLink","Button","attrs","basic","props","padding","color","fontWeight","ContainerDiv","StyledButton","CustomModal","handleClose","doClose","close","handleSave","trigger","this","React","cloneElement","onClick","Modal","isOpen","onClose","size","Header","title","floated","icon","name","Content","children","tabIndex","PureComponent","defaultProps","connect","ownProps","dispatch","e","preventDefault","confirmed","getState","confirmOnClose","confirming","LinkButton","a","EditLocusListButtonAndModal","render","locusList","setLocusList","length","newLocusList","textAreaValue","split","Boolean","Form","Field","control","TextArea","style","minHeight","defaultValue","onKeyUp","target","value","placeholder","join","EditLocusList","setLocus","map","locus","i","ExampleDiv","ExamplePath","span","position","SUPPORTED_FILE_EXTENSIONS","AddRowsButtonAndModal","getInitialState","warningMessage","errorMessage","parseTextAreaValueToRows","trim","rows","invalidPaths","newRowsByRowName","reduce","acc","dataPath","pathTokens","fileName","matchingExtensions","keys","ext","endsWith","push","filePrefix","replace","data","url","newRows","handleModalSave","addRows","setState","handleModalClose","fullTitle","margin","content","fileType","onChange","Message","categoryName","category","googleSignIn","gapi","auth2","getAuthInstance","authInstance","isSignedIn","get","signIn","getGoogleUserEmail","profile","currentUser","getBasicProfile","getEmail","getGoogleAccessToken","user","reloadAuthResponse","getAuthResponse","access_token","SJ_MOTIFS","getLocus","getRightSideBarLocusList","rightSideBarLocusList","getLeftSideBarLocusList","leftSideBarLocusList","getGenome","genome","getDataTypesToShow","dataTypesToShow","getRowsInCategories","rowsInCategories","getSelectedRowNamesByCategoryName","selectedRowNamesByCategoryName","getSelectedSamplesByCategoryNameAndRowName","selectedSamplesByCategoryNameAndRowName","getSjOptions","sjOptions","getVcfOptions","vcfOptions","getBamOptions","bamOptions","getGcnvOptions","gcnvOptions","getUser","getInitialSettingsUrl","initialSettingsUrl","getInitialSettingsUrlHasBeenApplied","initialSettingsUrlHasBeenApplied","getAllDataTypes","createSelector","row","add","Set","getEnabledDataTypes","allDataTypes","dataType","getRowsByCategoryName","getSelectedRowsByCategoryName","rowsByCategoryName","selectedRowNames","getTracks","selectedRowsByCategoryName","igvTracks","junctionsTrack","coverageTrack","j","format","label","indexURL","height","trackHeight","min","trackMin","max","trackMax","autoscale","highlightSamples","selectedSamples","sampleName","sampleSettings","onlyHandleClicksForHighlightedSamples","oauthToken","order","rowName","minUniquelyMappedReads","minTotalReads","maxFractionMultiMappedReads","minSplicedAlignmentOverhang","thicknessBasedOn","bounceHeightBasedOn","colorBy","colorByNumReadsThreshold","hideStrand","showOnlyPlusStrand","showOnlyMinusStrand","labelUniqueReadCount","labelMultiMappedReadCount","labelTotalReadCount","labelMotif","labelAnnotatedJunction","labelAnnotatedJunctionValue","hideAnnotatedJunctions","hideAnnotated","hideUnannotatedJunctions","hideUnannotated","hideMotifs","motif","indexed","displayMode","viewAsPairs","showSoftClips","tracks","StyledSearch","Search","INITIAL_STATE","isLoading","results","SearchRows","handleResultSelect","result","idTokens","updateSelectedRowNames","updateSelectedSamples","handleSearchChange","isRowSelected","getSelectedRowNames","getSelectedSamplesByRowName","getSelectedSamplesForRow","isSampleSelected","sample","setTimeout","inputStringRegExp","RegExp","_","escapeRegExp","resultsByCategoryName","resultsCounter","test","newResult","some","dataItemsWithSamples","samples","warn","useCategories","resultsArray","item","actionLabel","className","loading","onResultSelect","onSearchChange","Component","actionType","selectedSamplesByRowName","CategoryDetails","DataTypeIcon","dataTypeIconColors","junctions","coverage","alignment","vcf","default","RowColorLabelsContainer","NoWrapDiv","RowColorLabelsWithPopup","d","paddingRight","toUpperCase","colSpan","fontSize","marginTop","s","navigator","clipboard","writeText","marginLeft","ShowTrackTypesPanel","enabledDataTypes","updateDataTypesToShow","checkBoxes","charAt","slice","Checkbox","toLocaleString","checked","CategoryPanel","RowsPanel","RowPanel","data-row","RowDetails","description","inverted","LeftSideBar","dataTypes","updateSjOptions","newSettings","updateVcfOptions","updateBamOptions","keyCode","handleTextInput","parseInt","StyledRadio","Radio","ColorByLegend","width","on","ColorSwatchBorder","ColorSwatch","flowing","ColorPicker","handleChange","handleApply","colorChangedHandler","hex","background","onChangeComplete","newColor","GrayText","StyledOptionDiv","HighlightedSamplesSectionHeading","HighlightedSamplesCategory","DeleteButton","SampleNameText","NONE_HIGHLIGHTED_MESSAGE","SamplePanel","unhighlightSample","updateSampleSettings","whiteSpace","HighlighedSamplesPanel","categoryObj","updateGcnvOptions","sampleSettingsByRowName","RightSideBar","AboutLink","href","UserInfo","googleUserEmail","HeaderRow","Grid","Row","Column1","Column","Column2","About","throttle","delay","fn","timerId","args","clearTimeout","IGV_SETTINGS","showIdeogram","showNavigation","showRuler","showCenterGuide","showCursorTrackingGuide","showCommandBar","StyledDiv","IGV","setContainerElement","element","container","ref","browser","ignoreNextTrackRemovedEvent","locusChangedHandler","trackRemovedHandler","userChangedHandler","igvBrowserOptions","Promise","resolve","load","client","init","clientId","scope","discoveryDocs","igv","createBrowser","then","track","nextProps","currentIGVLocus","$searchInput","val","nextIGVLocus","search","nextTrackSettingsByTrackName","nextTrackSettings","junctionTrackDisplaySettingsChanged","vcfTrackDisplaySettingsChanged","alignmentTrackDisplaySettingsChanged","gcnvTrackDisplaySettingsChanged","gcnvTrackHighlightedSamplesChanged","isEqual","removeTrackByName","loadTrack","event","newLocus","config","RequestStatus","status","IN_PROGRESS","SUCCEEDED","successMessage","ERROR","NONE","CACHE","REFERENCE_DATA_ROOT","DEFAULT_STATE","alignmentShading","initialSettings","JSON","parse","stringify","KEYS_TO_PERSIST_IN_URL","KEYS_TO_PERSIST_IN_LOCAL_STORAGE","computeInitialState","stateFromLocalStorage","serializedState","localStorage","getItem","jsonString","LZString","decompress","err","loadState","REVERSE_KEY_NAME_LOOKUP","hashString","window","location","hash","stateFromUrlHash","keyValue","keyValueList","jsurl","updateLocalStorageAndUrl","compress","setItem","saveState","hashKeyValueList","StyledInput","Input","InitialSettingsForm","loadInitialSettingsUrl","globalState","updateInitialSettingsUrl","setInitialSettingsUrlHasBeenApplied","resetGlobalState","Error","isYaml","isJson","isUnknown","fetch","response","ok","statusText","toLowerCase","text","fileContents","settings","yaml","safeLoad","filteredSettings","applyInitialSettingsUrl","requestStatus","startsWith","toString","exportCurrentSettings","EXCLUDED_KEYS","globalStateForExport","encodeURIComponent","textInputValue","align","download","newUrl","SideBarColumn","MiddleColumn","otherReducers","combineReducers","assign","updatedRows","existingNames","previousList","updatedList","from","trace","previousSelectedSamplesByRowName","previousSampleSettingsByRowName","updatedSelectedSamplesByRowName","updatedSampleSettingsByRowName","modalReducers","rootReducer","nextState","createReduxStore","createStore","compose","applyMiddleware","thunkMiddleware","App","store","BaseLayout","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.218e6cd9.chunk.js","sourcesContent":["import styled from 'styled-components'\nimport { Icon, Popup } from 'semantic-ui-react'\n\nexport const CategoryH3 = styled.h3` \n  display: inline-block;\n  margin: 12px 0px 0px 0px !important;\n`\n\nexport const OptionDiv = styled.div`\n  padding-top: 3px;\n`\n\nexport const StyledPopup = styled(Popup)`\n  opacity: 0.95;\n`\n\nexport const ColorLegendIcon = styled(Icon)`\n  margin-top: 5px !important;\n`\n\nexport const OptionInput = styled.input`\n  display: inline;\n  width: 50px;\n  margin-left: 5px;\n  padding-left: 5px;\n`\n","/**\n * Redux reducers take a 'state' object representing the current application\n * state, and an 'action' object specifying some change to that state.\n * They apply the change and return the updated 'state' object.\n * For more details, see: http://redux.js.org/docs/basics/Reducers.html\n *\n * This module provides generic reducers that can be used to manage the following common types of\n * state shapes:\n *\n * { ... } - zero actions - arbitrary state shape that doesn't change after it's initialized, so\n *          this reducer doesn't perform any actions.\n *\n * value - single value - reducer supports 1 action that replaces the value with a new value.\n *\n * { key1: value1, key2: value2 .. } - single object - reducer supports 1 action that allows\n *          changing the values of one or more keys.\n *\n * { id1: { key1: value1, key2: value2, .. },\n *   id2: { key1: value1, key2: value2, .. },\n *   id3: ... }  -  objects by id - reducer supports several actions:\n *          adding or deleting objects by id, and updating the values within one or more objects\n *          specified by id.\n *\n *\n * ==========\n * Additional state shapes that may be implemnted as needed:\n *\n * { id1: value1, id2: value2 .. } - values by id - reducer supports several actions:\n *          adding or deleting values by id, and replacing one or more values by id.\n *\n * [ value1, value2, .. ] - single array - supports actions that add and remove values from the array\n *\n * { id1: [ value1, value2, .. ]\n *   id2: [ value1, value2, .. ] - arrays by id\n */\n\n/**\n * Reducer that can be used to manage any state that doesn't change after it's initialized.\n */\nexport const zeroActionsReducer = (state = {}) => {\n  return state\n}\n\n/**\n * Factory function that creates a reducer for managing any state object that's treated as a single\n * atomic value, where the only supported modification is to replace this value with a new value.\n *\n * As an example use case, lets say an app has one or more on/off toggles. Each of these toggles is\n * bound to a single state variable: 'isOn' which is either true or false.\n *\n * This function can be used to create the reducer(s) for managing a toggle's state:\n *\n * const rootReducer = combineReducers({\n *        toggleA: createSingleValueReducer('UPDATE_TOGGLE_A'),\n *        toggleB: createSingleValueReducer('UPDATE_TOGGLE_B'),\n *        ...\n *      })\n *\n * Here, the argument 'UPDATE_TOGGLE_A' specifies the action type that will later be dispatched\n * to update that toggle's state. For example, to set a toggle to \"off\":\n *\n * dispatch({\n *      type: 'UPDATE_TOGGLE_A',\n *      newValue: false,\n * })\n *\n * @param updateActionType (string) action.type that will later be used to replace the state with a\n * new state.\n */\nexport const createSingleValueReducer = (updateActionType, initialState, debug = false) => {\n  const reducer = (state = initialState, action) => {\n    if (!action) {\n      return state\n    }\n\n    switch (action.type) {\n      case updateActionType: {\n        if (action.newValue === undefined) {\n          console.error(`Invalid ${updateActionType} action: action.newValue is undefined: `, action)\n          return state\n        }\n        if (debug) {\n          console.log('singleValueReducer: applying action: ', action, 'State changing from ', state, ' to ', action.newValue)\n        }\n        return action.newValue\n      }\n      default:\n        return state\n    }\n  }\n\n  return reducer\n}\n\n\n/**\n * Factory function that creates a reducer for managing a state object with some fixed set of keys.\n * The reducer supports an 'UPDATE' action that can be used to set one or more\n * of these keys to new values.\n *\n * As an example use case, lets say an app displays several instances of a widget whose state\n * consists of this state object:\n *\n *    { isVisible: true, size: 5, names:  ['bob', 'gary', .. ], ... }\n *\n * This function can be used to create a reducer for this state:\n *\n *    const widgetReducer = createSingleObjectReducer('UPDATE_WIDGET')\n *\n * Here, the argument 'UPDATE_WIDGET' specifies the action type that will later be dispatched to\n * update the widget's state.\n *\n * After this, an action with type 'UPDATE_WIDGET' can be dispatched:\n *\n *    dispatch({\n *      type: 'UPDATE_WIDGET',\n *      updates: { isVisible: false, names: ['jim', 'liza'] }\n *    })\n *\n * which will cause the state object to be updated to:\n *\n *    { isVisible: false, size: 5, names:  ['jim', 'liza'], ... }\n *\n * These reducers can also be used with combineReducers(..):\n *\n *    const rootReducer = combineReducers({\n *        widget1: createSingleObjectReducer('UPDATE_WIDGET1'),\n *        widget2: createSingleObjectReducer('UPDATE_WIDGET2'),\n *        other: ..,\n *        ..\n *    })\n *\n * @param updateActionType (string) action.type that will later be used to update the state object.\n */\nexport const createSingleObjectReducer = (updateActionType, initialState = {}, debug = false) => {\n  const reducer = (state = initialState, action) => {\n    if (!action) {\n      return state\n    }\n\n    switch (action.type) {\n      case updateActionType: {\n        if (action.updates === undefined) {\n          console.error(`Invalid ${updateActionType} action: action.updates is undefined: `, action)\n          return state\n        }\n\n        const newState = { ...state, ...action.updates }\n        if (debug) {\n          console.log('singleObjectReducer: applying action: ', action, 'State changing from ', state, ' to ', newState)\n        }\n        return newState\n      }\n      default:\n        return state\n    }\n  }\n\n  return reducer\n}\n\n\n/**\n * Factory function that creates a reducer for managing an array of items.\n * The reducer supports 'ADD' and 'REMOVE' actions for adding/removing one or more items from the array.\n * It also supports a 'SET' action that replaces the existing array with a new one (or can be used to set\n * it to an empty array).\n *\n * An example use case is a list of track names in IGV:\n *\n *    [ 'Sample1', 'Sample2']\n *\n * This function can be used to create a reducer for this state:\n *\n *    const samplesReducer = createArrayReducer('SAMPLES', [ 'Sample1', 'Sample2'])\n *\n * Here, the argument 'SAMPLES' means the reducer will support the following action types:\n *    'ADD_SAMPLES'     (to add one or more samples to the end of the list)\n *    'REMOVE_SAMPLES'  (to remove or more samples from the list)\n *    'SET_SAMPLES'     (to replace existing samples with a new array of 0 or more samples)\n *\n * After this, an 'ADD_SAMPLES' action can be dispatched as follows:\n *\n *    dispatch({\n *      type: 'ADD_SAMPLES',\n *      values: ['Sample3', 'Sample4']\n *    })\n *\n * which will cause the state object to be updated to:\n *\n *    [ 'Sample1', 'Sample2', 'Sample3', 'Sample4']\n *\n * These reducers can also be used with combineReducers(..):\n *\n *    const rootReducer = combineReducers({\n *        samples: createArrayReducer('SAMPLES', ['Sample1', 'Sample2']),\n *        tags: createArrayReducer('TAGS'),\n *        other: ..,\n *        ..\n *    })\n *\n * @param updateActionType (string) action.type that will later be used to update the state object.\n */\nexport const createArrayReducer = (actionTypeSuffix, initialState = [], debug = false) => {\n  const reducer = (state = initialState, action) => {\n    if (!action) {\n      return state\n    }\n\n    switch (action.type) {\n      case `SET_${actionTypeSuffix}`:\n      case `ADD_${actionTypeSuffix}`:\n      case `REMOVE_${actionTypeSuffix}`: {\n        if (!Array.isArray(action.values)) {\n          console.error(`Invalid ${action.type} action: action.values is undefined or not an array: `, action)\n          return state\n        }\n\n        let newState\n        if (action.type === `SET_${actionTypeSuffix}`) {\n          newState = [...action.values] // make a copy of action.values\n        } else if (action.type === `ADD_${actionTypeSuffix}`) {\n          newState = [...state, ...action.values]\n        } else {\n          const valuesToRemove = action.values\n          newState = state.filter((v) => !valuesToRemove.includes(v))\n        }\n\n        if (debug) {\n          console.log('createArrayReducer: applying action: ', action, 'State changing from ', state, ' to ', newState)\n        }\n        return newState\n      }\n\n      default:\n        return state\n    }\n  }\n\n  return reducer\n}\n\n/**\n * Factory function that creates a reducer for managing a state object that looks like:\n *\n * { id1: { key1: valueA, key2: valueB, key3: valueC },\n *   id2: { key1: valueI, key2: valueJ, key3: valueK },\n *   id3: ...\n * }\n *\n * This state object is analogous to a database table, where the contained objects represent table\n * rows and have identical sets of keys but different values, so that each key can be thought of as\n * a column in the table.\n *\n * This reducer supports a single action type that can be used to transform the underlying state\n * in several ways:\n *    - adding new objects by id\n *    - deleting objects by id\n *    - updating the values within one or more existing objects by id\n *\n * As an example, the reducer can be created as follows:\n *\n *      const tableRowReducer = createObjectsByIdReducer('UPDATE_TABLE_X')\n *\n * Here, the 'UPDATE_TABLE_X' argument specifies the action type that will later be dispatched\n * to perform modifications. For example, the action below will change some of the values and also\n * both delete some ids and add some new ids:\n *\n * dispatch({\n *   type: 'UPDATE_TABLE_X',\n *   updatesById: {\n *     id1: { key2: valueM },                                 // update key2 value in object with id1\n *     idNew: { key1: valueX, key2: valueY, key3: valueZ },   // add new object and id\n *     id2: null,                                             // delete id2\n *   }\n *  })\n *\n * The resulting state after this action would look like:\n *\n * { id1: { key1: valueA, key2: valueM, key3: valueC },\n *   idNew: { key1: valueX, key2: valueY, key3: valueZ },\n *   id3: ...\n * }\n *\n * @param updateStateActionId (string) action.type that will later be used to update the state object.\n */\nexport const createObjectsByIdReducer = (updateActionType, key, initialState = {}, debug = false) => {\n  const reducer = (state = initialState, action) => {\n    if (!action) {\n      return state\n    }\n\n    switch (action.type) {\n      case updateActionType: {\n        if (action.updatesById === undefined) {\n          console.error(`Invalid ${updateActionType} action. action.updatesById is undefined: `, action)\n          return state\n        }\n        let updates = action.updatesById\n        if (key) {\n          if (!(key in updates)) {\n            return state\n          }\n          updates = updates[key]\n        }\n        const shallowCopy = { ...state }\n        Object.entries(updates).forEach(([id, obj]) => {\n          if (obj == null) {\n            // if the id is mapped to a null or undefined value, then delete this id\n            delete shallowCopy[id]\n          } else if (shallowCopy[id]) {\n            shallowCopy[id] = { ...shallowCopy[id], ...obj }\n          } else {\n            shallowCopy[id] = { ...obj }\n          }\n        })\n\n        if (debug) {\n          console.log('objectsByIdReducer: applying action: ', action, 'State changing from: ', state, ' to ', shallowCopy)\n        }\n        return shallowCopy\n      }\n      default:\n        return state\n    }\n  }\n\n  return reducer\n}\n\n\n/**\n * Factory function that creates a reducer for managing a state object that looks like:\n *\n * {\n *    loading: false,\n *    error: null,\n * }\n *\n * This state object encapsulates an entity type that is fetched from the server\n *\n * This reducer supports a two action types:\n * 1) A request action that sets the state to loading\n * 2) A receive action that indicates the loading has completed\n *\n * @param requestActionType (string) action.type representing a \"request\" event\n * @param receiveActionType (string) action.type representing a \"receive\" event\n */\nexport const loadingReducer = (requestActionType, receiveActionType, initialState = { isLoading: false, errorMessage: null }, debug = false) => {\n  const reducer = (state = initialState, action) => {\n    switch (action.type) {\n      case requestActionType:\n        if (debug) {\n          console.log(`fetchObjectsReducer: applying action: ${action.type}. State changing to loading`)\n        }\n        return { ...state, isLoading: true }\n\n      case receiveActionType:\n        if (debug) {\n          console.log(`fetchObjectsReducer: applying action: ${action.type}. State changing to received: ${action.byGuid}`)\n        }\n        return { ...state, isLoading: false, errorMessage: action.error }\n\n      default:\n        return state\n    }\n  }\n  return reducer\n}\n","import { createObjectsByIdReducer } from './reducerFactories'\n\n\n// actions\nconst UPDATE_MODAL_STATE = 'UPDATE_MODAL_STATE'\n\n// action creators\nexport const openModal = (modalName) => (dispatch) => (\n  dispatch({ type: UPDATE_MODAL_STATE, updatesById: { [modalName]: { open: true } } })\n)\n\nexport const closeModal = (modalName, confirmed) => (dispatch, getState) => {\n  if (getState().modals[modalName].confirmOnClose && !confirmed) {\n    dispatch({ type: UPDATE_MODAL_STATE, updatesById: { [modalName]: { confirming: true } } })\n  } else {\n    dispatch({ type: UPDATE_MODAL_STATE, updatesById: { [modalName]: { open: false, confirming: false, confirmOnClose: null } } })\n  }\n}\n\n// root reducer\nexport default {\n  modals: createObjectsByIdReducer(UPDATE_MODAL_STATE),\n}\n\n// basic selectors\nexport const getModalOpen = (state, modalName) => state.modals[modalName] && state.modals[modalName].open\n","/* eslint-disable react/destructuring-assignment */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport { Button, Modal, Icon } from 'semantic-ui-react'\n\nimport { getModalOpen, openModal, closeModal } from '../redux/utils/modalReducer'\n\nexport const ButtonLink = styled(Button).attrs({ basic: true })`\n  &.ui.button.basic {\n    white-space: nowrap;\n    border: none;\n    padding: ${(props) => props.padding || 0};\n    color: ${(props) => props.color || '#4183C4'} !important;\n    text-decoration: none;\n    font-weight: ${(props) => props.fontWeight || 'inherit'};\n    box-shadow: none !important;\n    user-select: auto;\n    \n    &:hover, &:focus, &:active {\n      color: #1e70bf !important;\n      background: transparent !important;\n    }\n    \n    &[class*=\"right labeled\"].icon {\n      padding-left: 0 !important;\n      padding-right: 2.1em !important;\n      \n      > .icon {\n        background-color: initial;\n      }\n    }\n  }\n`\n\nconst ContainerDiv = styled.div`\n  float: right;\n  padding: 0px 20px 20px 20px;\n`\n\nconst StyledButton = styled(Button)`\n  margin-left: 10px !important;\n  width: 100px;\n`\n\n\nclass CustomModal extends React.PureComponent\n{\n  handleClose = () => {\n    let doClose = true\n    if (this.props.handleClose) {\n      doClose = this.props.handleClose()\n    }\n    if (doClose) {\n      this.props.close()\n    }\n  }\n\n  handleSave = () => {\n    let doClose = true\n    if (this.props.handleSave) {\n      doClose = this.props.handleSave()\n    }\n    if (doClose) {\n      this.props.close()\n    }\n  }\n\n  render() {\n    const trigger = this.props.trigger ? React.cloneElement(this.props.trigger, { onClick: this.props.open }) : null\n    return (\n      <Modal open={this.props.isOpen} trigger={trigger} onClose={this.handleClose} size={this.props.size}>\n        <Modal.Header>\n          {this.props.title}\n          <ButtonLink floated=\"right\" onClick={this.handleClose} icon={<Icon name=\"remove\" color=\"grey\" />} />\n        </Modal.Header>\n        <Modal.Content>\n          {this.props.children}\n        </Modal.Content>\n        <ContainerDiv>\n          <StyledButton tabIndex={0} onClick={this.handleClose} type=\"button\">Cancel</StyledButton>\n          <StyledButton tabIndex={0} onClick={this.handleSave} type=\"submit\" color=\"blue\">{ this.props.handleSave ? 'Save' : 'Ok' }</StyledButton>\n        </ContainerDiv>\n      </Modal>\n    )\n  }\n}\n\nCustomModal.defaultProps = {\n  size: 'small',\n}\n\nCustomModal.propTypes = {\n  trigger: PropTypes.node,\n  title: PropTypes.string,\n  handleSave: PropTypes.func,\n  handleClose: PropTypes.func,\n  size: PropTypes.oneOf(['small', 'large', 'fullscreen']),\n  isOpen: PropTypes.bool,\n  open: PropTypes.func,\n  close: PropTypes.func,\n  children: PropTypes.node,\n}\n\n\nconst mapStateToProps = (state, ownProps) => ({\n  isOpen: getModalOpen(state, ownProps.modalName),\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    open: (e) => {\n      e.preventDefault()\n      dispatch(openModal(ownProps.modalName))\n    },\n    close: () => {\n      dispatch(closeModal(ownProps.modalName, true))\n    },\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomModal)\n","/* eslint-disable react/jsx-one-expression-per-line */\n/* eslint-disable react/no-array-index-key */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport { Form, TextArea } from 'semantic-ui-react'\nimport Modal from './Modal'\n\nconst LinkButton = styled.a`\n  cursor: pointer;\n`\n\nclass EditLocusListButtonAndModal extends React.PureComponent {\n\n  constructor(props) {\n    super(props)\n\n    const {\n      locusList,\n    } = this.props\n\n    this.textAreaValue = (locusList || []).join('\\n') // TextArea refs don't work - probably because its a pure component, so use this hack\n  }\n\n  render = () => {\n    const {\n      locusList,\n      name,\n      setLocusList,\n    } = this.props\n\n    const title = `Locus List - ${name}`\n\n    return (\n      <Modal\n        title={title}\n        size=\"large\"\n        modalName={title}\n        trigger={\n          <LinkButton>\n            {\n              (locusList || []).length > 0\n                ? <div><br />Edit Locus List</div>\n                : <div>Add Locus List To Side Bar</div>\n            }\n          </LinkButton>\n        }\n        handleSave={() => {\n          const newLocusList = this.textAreaValue.split(/[,\\s]+/).filter(Boolean)\n          setLocusList(newLocusList)\n\n          return true\n        }}\n      >\n        <Form>\n          <Form.Field\n            control={TextArea}\n            style={{ minHeight: '300px' }}\n            defaultValue={this.textAreaValue}\n            onKeyUp={(e) => { this.textAreaValue = e.target.value }}\n            placeholder=\"Enter genomic positions, intervals, and/or gene names separated by commas, spaces, or new lines. &#10;\n              These can be in any format recognized by the IGV search bar. &#10;\n              For example: DMD, ENST00000589830, chr1:55516888, 2:152341851-152591002\"\n          />\n        </Form>\n        <br />\n        <b><i>NOTE:</i></b> This locus list will be saved across page refreshes in this browser, &nbsp;\n        but will not be recorded in the page url like other settings.&nbsp;\n        Sharing or bookmarking this page won&apos;t include the contents of this list.\n      </Modal>)\n  }\n}\n\nEditLocusListButtonAndModal.propTypes = {\n  name: PropTypes.string,\n  locusList: PropTypes.array,\n  setLocusList: PropTypes.func,\n}\n\nconst EditLocusList = ({ name, locusList, setLocus, setLocusList }) => (\n  <div>\n    {\n      locusList.map((locus, i) => <div key={`${locus} ${i}`}>{i + 1}. &nbsp; <LinkButton onClick={() => { setLocus(locus) }}>{locus}</LinkButton></div>)\n    }\n    <EditLocusListButtonAndModal name={name} locusList={locusList} setLocusList={setLocusList} />\n  </div>)\n\n\nEditLocusList.propTypes = {\n  name: PropTypes.string,\n  locusList: PropTypes.array,\n  setLocus: PropTypes.func,\n  setLocusList: PropTypes.func,\n}\n\nexport default EditLocusList\n","/* eslint-disable react/jsx-one-expression-per-line */\n/* eslint-disable react/self-closing-comp */\n/* eslint-disable object-shorthand */\n/* eslint-disable no-else-return */\n/* eslint-disable react/no-array-index-key */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport { Form, Icon, Message, Popup, TextArea } from 'semantic-ui-react'\n\nimport Modal from './Modal'\n\nconst LinkButton = styled.a`\n  cursor: pointer;\n  padding: 10px 10px 10px 0px;\n  display: inline-block;\n`\n\nconst ExampleDiv = styled.div`\n  font-family: monospace;\n  margin: 20px 30px;\n  padding: 10px;\n  background-color: #F7F7F7;\n  white-space: nowrap;\n`\n\nconst ExamplePath = styled.span`\n  font-family: monospace;\n  background-color: #F7F7F7;\n`\n\nconst StyledPopup = styled(Popup).attrs({ position: 'right center' })`\n`\n\nexport const SUPPORTED_FILE_EXTENSIONS = {\n  '.bigWig': 'coverage',\n\n  '.junctions.bed': 'junctions',\n  '.spliceJunctions.bed': 'junctions',\n  '.junctions.bed.gz': 'junctions',\n  '.spliceJunctions.bed.gz': 'junctions',\n\n  '.bam': 'bam',\n  '.cram': 'bam',\n\n  '.vcf': 'vcf',\n  '.vcf.gz': 'vcf',\n\n  '.wig': 'wig',\n  '.bedGraph': 'wig',\n\n  '.bed': 'bed',\n  '.bed.gz': 'bed',\n\n  /*\n  '.bed': 'annotation',\n  '.bed.gz': 'annotation',\n  '.gff3': 'annotation',\n  '.gtf': 'annotation',\n  '.gtf.gz': 'annotation',\n  '.genePred': 'annotation',\n  '.bigBed': 'annotation',\n   */\n}\n\n\nclass AddRowsButtonAndModal extends React.PureComponent {\n\n  getInitialState = () => {\n    return {\n      textAreaValue: '',\n      warningMessage: null,\n      errorMessage: null,\n    }\n  }\n\n  constructor(props) {\n    super(props)\n\n    this.state = this.getInitialState()\n  }\n\n  parseTextAreaValueToRows = (textAreaValue) => {\n    if (!textAreaValue.trim()) {\n      return { rows: [], errorMessage: null }\n    }\n\n    let errorMessage = null\n    const invalidPaths = []\n    const dataPaths = textAreaValue.split(/[,\\s]+/).filter(Boolean)\n\n    const newRowsByRowName = dataPaths.reduce((acc, dataPath) => {\n      const pathTokens = dataPath.split('/')\n      const fileName = pathTokens[pathTokens.length - 1]\n      const matchingExtensions = Object.keys(SUPPORTED_FILE_EXTENSIONS).filter((ext) => fileName.endsWith(ext))\n      if (matchingExtensions.length === 0) {\n        invalidPaths.push(dataPath)\n      } else {\n        const ext = matchingExtensions[0]\n        const filePrefix = fileName.replace(ext, '')\n        if (!acc[filePrefix]) {\n          acc[filePrefix] = { data: [] }\n        }\n\n        acc[filePrefix].name = filePrefix\n        acc[filePrefix].data.push(\n          { type: SUPPORTED_FILE_EXTENSIONS[ext], url: dataPath },\n        )\n      }\n      return acc\n    }, {})\n\n    if (invalidPaths.length > 0) {\n      errorMessage = `These paths have file suffixes that are not recognized: ${invalidPaths.join(', ')}`\n    }\n\n    return { newRows: Object.values(newRowsByRowName), errorMessage }\n  }\n\n  handleModalSave = () => {\n    const {\n      addRows,\n    } = this.props\n\n    const {\n      textAreaValue,\n    } = this.state\n\n    const { newRows, errorMessage } = this.parseTextAreaValueToRows(textAreaValue)\n    if (errorMessage) {\n      this.setState({ errorMessage: errorMessage })\n      return false\n    } else {\n      addRows(newRows)\n      return true\n    }\n  }\n\n  handleModalClose = () => {\n    this.setState(this.getInitialState())\n    return true\n  }\n\n  render = () => {\n    const {\n      title,\n      trigger,\n    } = this.props\n\n    const {\n      textAreaValue,\n      warningMessage,\n      errorMessage,\n    } = this.state\n\n    const fullTitle = `${title} Rows`\n\n    return (\n      <Modal\n        title={fullTitle}\n        size=\"large\"\n        modalName={fullTitle}\n        trigger={trigger}\n        handleSave={this.handleModalSave}\n        handleClose={this.handleModalClose}\n      >\n        <div>\n          Enter google bucket path(s) for data files: &nbsp;\n          <StyledPopup trigger={<Icon style={{ margin: '10px 0px' }} name=\"question circle outline\" />} content={\n            <div>\n              <b>Format</b>:<br />\n              <br />\n              Enter a list of data file paths separated by commas, spaces or new lines. <br />\n              <br />\n              Example:<br />\n              <ExampleDiv>\n                gs://your-bucket/dir/sample-name1.bigWig <br />\n                gs://your-bucket/dir/sample2.bigWig <br />\n                gs://your-bucket/dir/sample-name1.junctions.bed.gz <br />\n                gs://your-bucket/dir/sample-name1.bam <br />\n                gs://your-bucket/dir/sample2.junctions.bed.gz <br />\n              </ExampleDiv>\n              Paths that have the same prefix (eg. <ExamplePath>gs://your-bucket/dir/sample-name1</ExamplePath> above) will be interpreted as different data types for same sample.<br />\n              The order of paths doesn&apos;t matter.<br />\n              <br />\n              IGV.js track types will be inferred from file extensions as follows:<br />\n              <div style={{ margin: '10px 30px' }}>\n                <table>\n                  <tbody>\n                    <tr><td> <b> File Extension </b> </td><td> <b>IGV.js Track Type</b> </td></tr>\n                    {Object.entries(SUPPORTED_FILE_EXTENSIONS).filter(([ext]) => !ext.endsWith('.bed')).map(\n                      ([ext, fileType], i) => <tr key={`${ext} ${fileType} ${i}`}><td>{ext}</td><td>{fileType}</td></tr>,\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          }\n          />\n          <br />\n        </div>\n        <Form>\n          <TextArea\n            style={{ minHeight: '300px' }}\n            value={textAreaValue}\n            onChange={(e) => {\n              this.setState({ textAreaValue: e.target.value })\n            }}\n            placeholder=\"Enter file path(s)\"\n          >\n          </TextArea>\n        </Form>\n\n        <br />\n        <b><i>NOTE:</i></b> These paths will be saved across page refreshes in this browser, but will not be recorded in the page url like other settings. Sharing or bookmarking this page won&apos;t include these paths.\n        {\n          warningMessage && (\n          <Message color=\"yellow\">\n            {warningMessage}\n          </Message>)\n        }\n        {\n          errorMessage && (\n          <Message color=\"red\">\n            {errorMessage}\n          </Message>)\n        }\n      </Modal>)\n  }\n}\n\nAddRowsButtonAndModal.propTypes = {\n  title: PropTypes.string,\n  addRows: PropTypes.func,\n  trigger: PropTypes.node,\n}\n\n\nconst AddRows = ({ category, addRows }) => (\n  <div>\n    <AddRowsButtonAndModal\n      title={`Add ${category.categoryName}`}\n      categoryName={category.categoryName}\n      addRows={(rows) => addRows(category.categoryName, rows)}\n      trigger={<LinkButton>Add {category.rows.length === 0 ? category.categoryName : null} Rows</LinkButton>}\n    />\n  </div>)\n\n\nAddRows.propTypes = {\n  category: PropTypes.object,\n  addRows: PropTypes.func,\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  addRows: (categoryName, rows) => {\n    dispatch({\n      type: 'ADD_ROWS',\n      categoryName: categoryName,\n      rows: rows,\n    })\n  },\n})\n\nexport default connect(null, mapDispatchToProps)(AddRows)\n","/* eslint-disable no-undef */\n\nconst RNA_VIEWER_CLIENT_ID = '61200892608-qphtf65o323setqdcfj4hnf601mmetvs.apps.googleusercontent.com'\n\nexport const initGoogleClient = () => new Promise((resolve) => {\n  if (typeof gapi === 'undefined') {\n    return\n  }\n\n  // init all gapi modules\n  gapi.load('client:auth2', () => {\n    gapi.client.load('storage', 'v1', () => {\n      gapi.client.init({\n        clientId: RNA_VIEWER_CLIENT_ID,\n        scope: 'https://www.googleapis.com/auth/devstorage.read_only',\n        discoveryDocs: ['https://www.googleapis.com/discovery/v1/apis/storage/v1/rest'],\n      })\n\n      resolve()\n    })\n  })\n})\n\nexport const googleSignIn = async () => {\n\n  const authInstance = await gapi.auth2.getAuthInstance()\n  if (!authInstance.isSignedIn.get()) {\n    await authInstance.signIn()\n  }\n}\n\nexport const getGoogleUserEmail = async () => {\n  const authInstance = await gapi.auth2.getAuthInstance()\n  const profile = authInstance.currentUser.get().getBasicProfile()\n\n  return profile.getEmail()\n}\n\nexport const getGoogleAccessToken = async () => {\n  // use OAuth2 to get an access token for RNA-seq viewer to access the google storage API on behalf of the user\n  const authInstance = await gapi.auth2.getAuthInstance()\n  const user = authInstance.currentUser.get()\n  if (!authInstance.isSignedIn.get()) {\n    user.reloadAuthResponse()\n  }\n\n  return user.getAuthResponse().access_token\n}\n\nexport const googleSignOut = async () => {\n  const authInstance = await gapi.auth2.getAuthInstance()\n  if (authInstance.isSignedIn.get()) {\n    await authInstance.signOut()\n  }\n}\n\nexport const listGoogleStorageFiles = async (gsPath) => {\n  if (!gsPath.startsWith('gs://')) {\n    console.error(`${gsPath} doesn't start with \"gs://\"`)\n    return []\n  }\n\n  const gsPathParts = gsPath.split('/')\n  if (gsPathParts.length < 3) {\n    console.error(`${gsPath} must be of the form \"gs://bucket-name/...\"`)\n    return []\n  }\n\n  const bucketName = gsPathParts[2]\n  const bucketSubdir = gsPathParts.slice(3).join('/')\n\n  return gapi.client.storage.objects.list({ bucket: bucketName, prefix: bucketSubdir, maxResults: 1000 })\n}\n","\nexport const SJ_MOTIFS = ['GT/AG', 'CT/AC', 'GC/AG', 'CT/GC', 'AT/AC', 'GT/AT', 'non-canonical']\nexport const SJ_DEFAULT_COLOR_BY_NUM_READS_THRESHOLD = 5\n\nexport const GCNV_DEFAULT_HIGHLIGHT_COLOR = 'blue'\n","/* eslint-disable no-nested-ternary */\n/* eslint-disable object-shorthand */\n/* eslint-disable array-callback-return */\n\nimport { createSelector } from 'reselect'\nimport { getGoogleAccessToken } from '../utils/googleAuth'\nimport { SJ_MOTIFS, SJ_DEFAULT_COLOR_BY_NUM_READS_THRESHOLD, GCNV_DEFAULT_HIGHLIGHT_COLOR } from '../constants'\n\nexport const getLocus = (state) => state.locus\nexport const getRightSideBarLocusList = (state) => state.rightSideBarLocusList\nexport const getLeftSideBarLocusList = (state) => state.leftSideBarLocusList\nexport const getGenome = (state) => state.genome\nexport const getDataTypesToShow = (state) => state.dataTypesToShow\nexport const getRowsInCategories = (state) => state.rowsInCategories\nexport const getSelectedRowNamesByCategoryName = (state) => state.selectedRowNamesByCategoryName\nexport const getSelectedSamplesByCategoryNameAndRowName = (state) => state.selectedSamplesByCategoryNameAndRowName\nexport const getSjOptions = (state) => state.sjOptions\nexport const getVcfOptions = (state) => state.vcfOptions\nexport const getBamOptions = (state) => state.bamOptions\nexport const getGcnvOptions = (state) => state.gcnvOptions\nexport const getUser = (state) => state.user\nexport const getInitialSettings = (state) => state.initialSettings\nexport const getInitialSettingsUrl = (state) => state.initialSettingsUrl\nexport const getInitialSettingsUrlHasBeenApplied = (state) => state.initialSettingsUrlHasBeenApplied\n\nexport const getAllDataTypes = createSelector(\n  getRowsInCategories,\n  (rowsInCategories) => {\n    return [...rowsInCategories.reduce((acc, category) => {\n      category.rows.forEach((row) => {\n        if (row.data) {\n          row.data.forEach((data) => {\n            if (data.type) {\n              acc.add(data.type)\n            }\n          })\n        }\n      })\n      return acc\n    }, new Set())]\n  })\n\n\nexport const getEnabledDataTypes = createSelector(\n  getAllDataTypes,\n  getDataTypesToShow,\n  (allDataTypes, dataTypesToShow) => {\n    return allDataTypes.length < 2 ? allDataTypes : allDataTypes.filter((dataType) => dataTypesToShow.includes(dataType))\n  })\n\nexport const getRowsByCategoryName = createSelector(\n  getRowsInCategories,\n  (rowsInCategories) => {\n    return rowsInCategories.reduce((acc, category) => {\n      return { ...acc, [category.categoryName]: category.rows }\n    }, {})\n  })\n\n\nexport const getSelectedRowsByCategoryName = createSelector(\n  getSelectedRowNamesByCategoryName,\n  getRowsByCategoryName,\n  (selectedRowNamesByCategoryName, rowsByCategoryName) => {\n    return Object.entries(selectedRowNamesByCategoryName).reduce((acc, [categoryName, selectedRowNames]) => {\n      if (!rowsByCategoryName[categoryName]) {\n        return acc\n      }\n      return { ...acc, [categoryName]: rowsByCategoryName[categoryName].filter((row) => selectedRowNames.includes(row.name)) }\n    }, {})\n  })\n\n\nexport const getTracks = createSelector(\n  getSelectedRowsByCategoryName,\n  getSelectedSamplesByCategoryNameAndRowName,\n  getDataTypesToShow,\n  getSjOptions,\n  getVcfOptions,\n  getBamOptions,\n  getGcnvOptions,\n  (\n    selectedRowsByCategoryName,\n    selectedSamplesByCategoryNameAndRowName,\n    dataTypesToShow,\n    sjOptions,\n    vcfOptions,\n    bamOptions,\n    gcnvOptions,\n  ) => {\n    const igvTracks = []\n\n    Object.entries(selectedRowsByCategoryName).forEach(([categoryName, selectedRows]) => selectedRows.forEach((row, i) => {\n      let junctionsTrack\n      let coverageTrack\n      (row.data || []).forEach((data, j) => {\n        //docs @ https://github.com/igvteam/igv.js/wiki/Wig-Track\n\n        if (data.type === 'gcnv_bed') { // && vcfOptions.showGcnv\n          //docs @ https://github.com/igvteam/igv.js/wiki/Alignment-Track\n          console.log(`Adding ${data.url} track #`, i * 100 + j)\n\n          igvTracks.push({\n            type: 'gcnv',\n            format: 'gcnv',\n            name: `${row.name} ${data.label || ''}`,\n            url: data.url,\n            indexURL: `${data.url}.tbi`,\n            height: gcnvOptions.trackHeight,\n            min: gcnvOptions.trackMin,\n            max: gcnvOptions.trackMax,\n            autoscale: gcnvOptions.autoscale,\n            highlightSamples: (((selectedSamplesByCategoryNameAndRowName[categoryName] || {}).selectedSamples || {})[row.name] || []).reduce(\n              (acc, sampleName) => {\n                acc[sampleName] = ((((selectedSamplesByCategoryNameAndRowName[categoryName] || {}).sampleSettings || {})[row.name] || {})[sampleName] || {}).color || GCNV_DEFAULT_HIGHLIGHT_COLOR\n                return acc\n              }, {}),\n            onlyHandleClicksForHighlightedSamples: gcnvOptions.onlyHandleClicksForHighlightedSamples,\n            oauthToken: getGoogleAccessToken,\n            order: i * 100 + j,\n            rowName: row.name,\n            categoryName: categoryName,\n          })\n        }\n        else if ((data.type === 'junctions' || data.url.includes('junctions.bed')) && dataTypesToShow.includes('junctions')) {\n          junctionsTrack = {\n            type: 'spliceJunctions',\n            format: 'bed',\n            url: data.url,\n            indexURL: `${data.url}.tbi`,\n            oauthToken: getGoogleAccessToken,\n            order: i * 10,\n            name: row.name,\n            height: sjOptions.trackHeight,\n            minUniquelyMappedReads: sjOptions.minUniquelyMappedReads,\n            minTotalReads: sjOptions.minTotalReads,\n            maxFractionMultiMappedReads: sjOptions.maxFractionMultiMappedReads,\n            minSplicedAlignmentOverhang: sjOptions.minSplicedAlignmentOverhang,\n            thicknessBasedOn: sjOptions.thicknessBasedOn, //options: numUniqueReads (default), numReads, isAnnotatedJunction\n            bounceHeightBasedOn: sjOptions.bounceHeightBasedOn, //options: random (default), distance, thickness\n            colorBy: sjOptions.colorBy, //options: numUniqueReads (default), numReads, isAnnotatedJunction, strand, motif\n            colorByNumReadsThreshold: sjOptions.colorByNumReadsThreshold !== undefined ? sjOptions.colorByNumReadsThreshold : SJ_DEFAULT_COLOR_BY_NUM_READS_THRESHOLD,\n            hideStrand: sjOptions.showOnlyPlusStrand ? '-' : (sjOptions.showOnlyMinusStrand ? '+' : undefined),\n            labelUniqueReadCount: sjOptions.labelUniqueReadCount,\n            labelMultiMappedReadCount: sjOptions.labelMultiMappedReadCount,\n            labelTotalReadCount: sjOptions.labelTotalReadCount,\n            labelMotif: sjOptions.labelMotif,\n            labelAnnotatedJunction: sjOptions.labelAnnotatedJunction && sjOptions.labelAnnotatedJunctionValue,\n            hideAnnotatedJunctions: sjOptions.hideAnnotated,\n            hideUnannotatedJunctions: sjOptions.hideUnannotated,\n            hideMotifs: SJ_MOTIFS.filter((motif) => sjOptions[`hideMotif${motif}`]), //options: 'GT/AG', 'CT/AC', 'GC/AG', 'CT/GC', 'AT/AC', 'GT/AT', 'non-canonical'\n            rowName: row.name,\n            categoryName: categoryName,\n          }\n        }\n        else if ((data.type === 'coverage' || data.url.includes('.bigWig')) && dataTypesToShow.includes('coverage')) {\n          coverageTrack = {\n            type: 'wig',\n            format: 'bigwig',\n            url: data.url,\n            oauthToken: getGoogleAccessToken,\n            name: row.name,\n            height: sjOptions.trackHeight,\n            order: i * 10 + j,\n            rowName: row.name,\n            categoryName: categoryName,\n          }\n\n          if (data.url.includes('spliceai')) {\n            coverageTrack.color = (value) => {\n              let c\n              if (value < 0.5) {\n                c = 'rgb(180,180,180)'\n              }\n              else if (value < 0.8) {\n                c = 'rgb(180,180,0)'\n              }\n              else {\n                c = 'rgb(200,0,0)'\n              }\n\n              return c\n            }\n          }\n        }\n        else if ((data.type === 'vcf' || data.url.includes('.vcf')) && dataTypesToShow.includes('vcf')) {\n          //docs @ https://github.com/igvteam/igv.js/wiki/Alignment-Track\n          console.log(`Adding ${data.url} track #`, i * 100 + j)\n\n          igvTracks.push({\n            type: 'variant',\n            format: 'vcf',\n            url: data.url,\n            indexURL: `${data.url}.tbi`,\n            indexed: true,\n            name: `${row.name} ${data.label || data.type}`,\n            displayMode: vcfOptions.displayMode,\n            oauthToken: getGoogleAccessToken,\n            order: i * 100 + j,\n            rowName: row.name,\n            categoryName: categoryName,\n          })\n        }\n        else if ((data.type === 'alignment' || data.url.includes('.bam') || data.url.includes('.cram')) && dataTypesToShow.includes('alignment')) {\n          //docs @ https://github.com/igvteam/igv.js/wiki/Alignment-Track\n          console.log(`Adding ${data.url} track #`, i * 100 + j)\n\n          igvTracks.push({\n            type: 'alignment',\n            url: data.url,\n            indexed: true,\n            name: `${row.name} ${data.label || ''}`,\n            height: bamOptions.trackHeight,\n            colorBy: bamOptions.colorBy,\n            viewAsPairs: bamOptions.viewAsPairs,\n            showSoftClips: bamOptions.showSoftClips,\n            oauthToken: getGoogleAccessToken,\n            order: i * 100 + j,\n            rowName: row.name,\n            categoryName: categoryName,\n          })\n        }\n      })\n\n      if (coverageTrack && junctionsTrack) {\n        console.log(`Adding ${junctionsTrack.url} & ${coverageTrack.url} track`)\n        igvTracks.push({\n          type: 'merged',\n          name: junctionsTrack.name,\n          height: sjOptions.trackHeight,\n          tracks: [coverageTrack, junctionsTrack],\n          order: i * 10 + 2,\n          rowName: row.name,\n          categoryName: categoryName,\n        })\n      } else if (junctionsTrack) {\n        console.log(`Adding ${junctionsTrack.url} track`)\n        igvTracks.push(junctionsTrack)\n      } else if (coverageTrack) {\n        console.log(`Adding ${coverageTrack.url} track`)\n        igvTracks.push(coverageTrack)\n      }\n    }))\n\n    /*\n    igvTracks.push({\n      name: 'Gencode v32 Genes',\n      format: 'refgene',\n      url: 'gs://macarthurlab-rnaseq/reference_tracks/gencode_v32_knownGene.sorted.txt.gz',\n      indexURL: 'gs://macarthurlab-rnaseq/reference_tracks/gencode_v32_knownGene.sorted.txt.gz.tbi',\n      indexed: true,\n      searchable: true,\n      height: 350,\n      visibilityWindow: -1,\n      displayMode: 'EXPANDED',\n      order: 1000001,\n      color: 'rgb(76,171,225)',\n      oauthToken: getGoogleAccessToken,\n    })\n    */\n\n    return igvTracks\n  },\n)\n","/* eslint-disable react/destructuring-assignment */\n/* eslint-disable react/require-optimization */\n\nimport _ from 'lodash'\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport { Search } from 'semantic-ui-react'\nimport {\n  getRowsInCategories,\n  getSelectedRowNamesByCategoryName, getSelectedSamplesByCategoryNameAndRowName,\n} from '../redux/selectors'\n\nconst StyledSearch = styled(Search)`\n  margin-top: 15px; \n  .prompt {\n    border-radius: 2px !important;\n    width: 155px;\n  }\n  \n  input {\n      max-width: none !important;\n      padding: 5px !important;\n  }\n  .results {\n      min-width: max-content;\n  }\n\n  .red-text {\n    .title {\n      color: #CC0000 !important;\n      font-weight: 500 !important;\n     }\n  }\n`\n\nconst MAX_AUTOCOMPLETE_RESULTS = 10\nconst INITIAL_STATE = { isLoading: false, results: [], value: '' }\n\nclass SearchRows extends React.Component {\n\n  constructor() {\n    super()\n    this.state = INITIAL_STATE\n  }\n\n  handleResultSelect = (e, { result }) => {\n    this.setState({ value: '' })\n\n    console.log(e, result)\n\n    const idTokens = result.id.split('!!')\n    const action = idTokens[0]\n    const categoryName = idTokens[1]\n    const rowName = idTokens[2]\n    const sampleName = idTokens[3]\n\n    if (sampleName) {\n      if (action === 'ADD') {\n        this.props.updateSelectedRowNames(action, categoryName, [rowName])\n      }\n      this.props.updateSelectedSamples(action, categoryName, { [rowName]: [sampleName] })\n    } else {\n      this.props.updateSelectedRowNames(action, categoryName, [rowName])\n    }\n  }\n\n  handleSearchChange = (e, { value }) => {\n    this.setState({ isLoading: true, value })\n\n    const getSelectedRowNames = (categoryName) => (this.props.selectedRowNamesByCategoryName[categoryName] || [])\n    const isRowSelected = (categoryName, rowName) => getSelectedRowNames(categoryName).includes(rowName)\n\n    const getSelectedSamplesByRowName = (categoryName) => ((this.props.selectedSamplesByCategoryNameAndRowName[categoryName] || {}).selectedSamples || {})\n    const getSelectedSamplesForRow = (categoryName, rowName) => (getSelectedSamplesByRowName(categoryName)[rowName] || [])\n    const isSampleSelected = (categoryName, rowName, sample) => getSelectedSamplesForRow(categoryName, rowName).includes(sample)\n\n    setTimeout(() => {\n      if (this.state.value.length < 1) {\n        return this.setState(INITIAL_STATE)\n      }\n\n      const inputStringRegExp = new RegExp(_.escapeRegExp(this.state.value), 'i')\n\n      const resultsByCategoryName = {}\n      let resultsCounter = 0\n\n      // search actions\n      if (inputStringRegExp.test('Hide')) {\n        Object.keys(this.props.selectedRowNamesByCategoryName).forEach((categoryName) => {\n          if (resultsCounter >= MAX_AUTOCOMPLETE_RESULTS) return\n          this.props.selectedRowNamesByCategoryName[categoryName].forEach((rowName) => {\n            if (resultsCounter >= MAX_AUTOCOMPLETE_RESULTS) return\n            resultsByCategoryName[categoryName] = resultsByCategoryName[categoryName] || []\n            const newResult = { action: 'REMOVE', categoryName, rowName }\n            if (!_.some(resultsByCategoryName[categoryName], newResult)) {\n              resultsByCategoryName[categoryName].push(newResult)\n            }\n            resultsCounter += 1\n          })\n        })\n      }\n\n      if (inputStringRegExp.test('Hide') || inputStringRegExp.test('Hide sample')) {\n        Object.keys(this.props.selectedSamplesByCategoryNameAndRowName).forEach((categoryName) => {\n          if (resultsCounter >= MAX_AUTOCOMPLETE_RESULTS) return\n          Object.keys(getSelectedSamplesByRowName(categoryName)).forEach((rowName) => {\n            if (resultsCounter >= MAX_AUTOCOMPLETE_RESULTS || !isRowSelected(categoryName, rowName)) return\n            getSelectedSamplesForRow(categoryName, rowName).forEach((sample) => {\n              if (resultsCounter >= MAX_AUTOCOMPLETE_RESULTS) return\n              resultsByCategoryName[categoryName] = resultsByCategoryName[categoryName] || []\n              const newResult = { action: 'REMOVE', categoryName, rowName, sample }\n              if (!_.some(resultsByCategoryName[categoryName], newResult)) {\n                resultsByCategoryName[categoryName].push(newResult)\n              }\n              resultsCounter += 1\n            })\n          })\n        })\n      }\n\n      // search rows\n      this.props.rowsInCategories.forEach((category) => {\n        if (resultsCounter >= MAX_AUTOCOMPLETE_RESULTS) return\n        category.rows.forEach((row) => {\n          if (resultsCounter >= MAX_AUTOCOMPLETE_RESULTS) return\n          if (inputStringRegExp.test(row.name)) {\n            resultsByCategoryName[category.categoryName] = resultsByCategoryName[category.categoryName] || []\n            const newResult = {\n              action: isRowSelected(category.categoryName, row.name) ? 'REMOVE' : 'ADD',\n              categoryName: category.categoryName,\n              rowName: row.name,\n            }\n            if (!_.some(resultsByCategoryName[category.categoryName], newResult)) {\n              resultsByCategoryName[category.categoryName].push(newResult)\n            }\n            resultsCounter += 1\n          }\n\n          if (!row.data) {\n            return\n          }\n\n          const dataItemsWithSamples = row.data.filter((data) => data.samples && data.samples.length > 0)\n          if (dataItemsWithSamples.length > 1) {\n            console.warn('Found row with multiple data items each of which has a samples array. This may behave unexpectedly if there are duplicate samples')\n          }\n\n          dataItemsWithSamples.forEach((data) => {\n            (data.samples || []).forEach((sample) => {\n              if (resultsCounter >= MAX_AUTOCOMPLETE_RESULTS) return\n              if (inputStringRegExp.test(sample)) {\n                resultsByCategoryName[category.categoryName] = resultsByCategoryName[category.categoryName] || []\n                const newResult = {\n                  action: isRowSelected(category.categoryName, row.name) && isSampleSelected(category.categoryName, row.name, sample) ? 'REMOVE' : 'ADD',\n                  categoryName: category.categoryName,\n                  rowName: row.name,\n                  sample,\n                }\n                if (!_.some(resultsByCategoryName[category.categoryName], newResult)) {\n                  resultsByCategoryName[category.categoryName].push(newResult)\n                }\n                resultsCounter += 1\n              }\n            })\n          })\n        })\n      })\n\n      const useCategories = this.props.rowsInCategories.length > 1\n      const results = useCategories ? {} : []\n      Object.keys(resultsByCategoryName).forEach((categoryName) => {\n        if (useCategories) {\n          results[categoryName] = { name: categoryName, results: [] }\n        }\n        const resultsArray = useCategories ? results[categoryName].results : results\n        resultsByCategoryName[categoryName].forEach((item) => {\n          if (item.sample) {\n            const actionLabel = item.action === 'ADD' ? 'Show sample' : 'Hide sample'\n            resultsArray.push({\n              id: `${item.action}!!${categoryName}!!${item.rowName}!!${item.sample}`,\n              title: `${actionLabel} ${item.rowName} > ${item.sample}`,\n              className: item.action !== 'ADD' && 'red-text',\n            })\n          } else {\n            const actionLabel = item.action === 'ADD' ? 'Show' : 'Hide'\n            resultsArray.push({\n              id: `${item.action}!!${categoryName}!!${item.rowName}`,\n              title: `${actionLabel} ${item.rowName}`,\n              className: item.action !== 'ADD' && 'red-text',\n            })\n          }\n        })\n      })\n\n      return this.setState({\n        isLoading: false,\n        results,\n      })\n    }, 300)\n  }\n\n  render = () => {\n    const { isLoading, value, results } = this.state\n\n    return <StyledSearch\n      category={this.props.rowsInCategories.length > 1}\n      loading={isLoading}\n      onResultSelect={this.handleResultSelect}\n      onSearchChange={this.handleSearchChange}\n      placeholder=\"Select data\"\n      results={results}\n      value={value}\n    />\n  }\n}\n\nSearchRows.propTypes = {\n  rowsInCategories: PropTypes.array,\n  selectedRowNamesByCategoryName: PropTypes.object,\n  selectedSamplesByCategoryNameAndRowName: PropTypes.object,\n  updateSelectedRowNames: PropTypes.func,\n  updateSelectedSamples: PropTypes.func,\n}\n\nconst mapStateToProps = (state) => ({\n  rowsInCategories: getRowsInCategories(state),\n  selectedRowNamesByCategoryName: getSelectedRowNamesByCategoryName(state),\n  selectedSamplesByCategoryNameAndRowName: getSelectedSamplesByCategoryNameAndRowName(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateSelectedRowNames: (actionType, categoryName, selectedRowNames) => {\n    dispatch({\n      type: `${actionType}_SELECTED_ROW_NAMES`,\n      categoryName,\n      selectedRowNames,\n    })\n  },\n\n  updateSelectedSamples: (actionType, categoryName, selectedSamplesByRowName) => {\n    dispatch({\n      type: `${actionType}_SELECTED_SAMPLES`,\n      categoryName,\n      selectedSamplesByRowName,\n    })\n  },\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchRows)\n","/* eslint-disable react/jsx-one-expression-per-line */\n/* eslint-disable implicit-arrow-linebreak */\n/* eslint-disable react/no-array-index-key */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport { Checkbox, Icon, Popup } from 'semantic-ui-react'\nimport { CategoryH3, OptionDiv, StyledPopup } from './SideBarUtils'\nimport EditLocusList from './EditLocusList'\nimport AddRows from './AddRows'\nimport SearchRows from './SearchRows'\nimport {\n  getLeftSideBarLocusList,\n  getRowsInCategories,\n  getAllDataTypes,\n  getEnabledDataTypes,\n  getSelectedRowNamesByCategoryName,\n} from '../redux/selectors'\n\nconst CategoryDetails = styled.div`\n  display: inline-block;\n  margin: 0px 0px 0px 15px;\n  color: #999;\n  white-space: nowrap;\n`\n\nconst DataTypeIcon = styled.div.attrs({ name: 'stop' })`\n  color: ${(props) => props.color};\n  border: 3px solid ${(props) => props.color};\n  display: inline-block;\n  width: 6px;\n  border-radius: 1px;\n  height: 10px;\n  cursor: pointer;\n`\n\nconst dataTypeIconColors = {\n  junctions: '#B0B0EC',\n  coverage: '#B5D29A',\n  alignment: '#5DB6E9',\n  vcf: '#E6A01B',\n  default: '#000000',\n}\n\nconst LinkButton = styled.a`\n  cursor: pointer;\n  padding: 10px 10px 10px 0px;\n  display: inline-block;\n`\n\nconst RowColorLabelsContainer = styled.span`\n  padding-left: 5px;\n  white-space: nowrap;\n`\n\nconst NoWrapDiv = styled.div`\n  white-space: nowrap;\n`\n\nconst RowColorLabelsWithPopup = ({ row }) => {\n  const handleCopyToClipboard = () => {\n    const s = (row.data || []).map((d) => d.url).join('\\n')\n    navigator.clipboard.writeText(s)\n  }\n\n  return (<Popup\n    content={\n      <table>\n        <tbody>\n          {\n            (row.data || []).map((d, i) =>\n              <tr key={`${d.url} ${d.type} ${i}`}>\n                <td style={{ paddingRight: '10px' }}><b>{d.type && d.type.toUpperCase()}:</b></td><td><NoWrapDiv>{d.url}</NoWrapDiv></td>\n              </tr>,\n            )\n          }\n          <tr><td colSpan={2}><div style={{ fontSize: 'small', color: 'grey', marginTop: '10px' }}>(click to copy paths)</div></td></tr>\n        </tbody>\n      </table>\n    }\n    position=\"right center\"\n    trigger={\n      <RowColorLabelsContainer onClick={handleCopyToClipboard}>\n        {\n          (row.data || []).map((d, i) => <DataTypeIcon key={`${d.url} ${d.type} ${i}`} color={dataTypeIconColors[d.type] || dataTypeIconColors.default} />)\n        }\n      </RowColorLabelsContainer>\n    }\n    style={{ marginLeft: '2px' }}\n  />)\n}\n\nRowColorLabelsWithPopup.propTypes = {\n  row: PropTypes.object,\n}\n\nconst ShowTrackTypesPanel = ({ allDataTypes, enabledDataTypes, updateDataTypesToShow }) => {\n  if (allDataTypes.length < 2) {\n    return null\n  }\n\n  const checkBoxes = [...allDataTypes].map((dataType, i) => {\n    let label = dataType\n    if (dataType === 'junctions') {\n      label = 'Splice Junctions'\n    } else if (dataType === 'vcf') {\n      label = 'VCF'\n    } else if (dataType === 'gcnv_bed') {\n      label = 'gCNV'\n    } else {\n      label = label.charAt(0).toUpperCase() + label.slice(1) //to Title case\n    }\n\n    return (\n      <OptionDiv key={`${dataType} ${i}`}>\n        <Checkbox label={`${label.toLocaleString()}`} checked={enabledDataTypes.includes(dataType)} onChange={(e, data) => updateDataTypesToShow(data.checked ? 'ADD' : 'REMOVE', [dataType])} />\n        <RowColorLabelsContainer><Popup content={`This color stripe marks rows that have ${label} data. Select this checkbox to show ${label} tracks for each row selected below.`} position=\"right center\" trigger={<DataTypeIcon color={dataTypeIconColors[dataType] || dataTypeIconColors.default} />} /></RowColorLabelsContainer>\n      </OptionDiv>)\n  })\n\n  return (\n    <div>\n      <CategoryH3>SHOW TRACK TYPES</CategoryH3>\n      {checkBoxes}\n    </div>)\n}\n\nShowTrackTypesPanel.propTypes = {\n  allDataTypes: PropTypes.array,\n  enabledDataTypes: PropTypes.array,\n  updateDataTypesToShow: PropTypes.func,\n}\n\n\nconst CategoryPanel = ({ category, updateSelectedRowNames }) => (\n  <div>\n    <CategoryH3>{category.categoryName.toUpperCase()}</CategoryH3>\n    {\n      category.rows.length >= 12 && <CategoryDetails>{`(N=${category.rows.length}) `}</CategoryDetails>\n    }\n    {\n      category.rows.length > 0 && (\n      <div>\n        <LinkButton onClick={\n          (e) => {\n            e.preventDefault()\n            updateSelectedRowNames('SET', category.categoryName, [])\n          }\n        }\n        >\n          Uncheck All\n        </LinkButton>\n      </div>)\n    }\n  </div>)\n\nCategoryPanel.propTypes = {\n  category: PropTypes.object,\n  updateSelectedRowNames: PropTypes.func,\n}\n\nconst RowsPanel = ({ rowsInCategories, selectedRowNamesByCategoryName, updateSelectedRowNames }) => (\n  rowsInCategories.map((category, i) => (\n    <div key={`${category.categoryName} ${i}`}>\n      <CategoryPanel category={category} updateSelectedRowNames={updateSelectedRowNames} />\n      {\n        category.rows.map((row, j) => {\n          const selectedRowNames = selectedRowNamesByCategoryName[category.categoryName] || []\n          return <RowPanel key={`${row.name} ${j}`} row={row} categoryName={category.categoryName} selectedRowNames={selectedRowNames} updateSelectedRowNames={updateSelectedRowNames} />\n        })\n      }\n      <AddRows category={category} />\n    </div>),\n  ))\n\nRowsPanel.propTypes = {\n  rowsInCategories: PropTypes.array,\n  selectedRowNamesByCategoryName: PropTypes.object,\n  updateSelectedRowNames: PropTypes.func,\n}\n\n\nconst RowPanel = ({ row, categoryName, selectedRowNames, updateSelectedRowNames }) => (\n  <NoWrapDiv>\n    <Checkbox\n      label={row.name}\n      checked={selectedRowNames.includes(row.name)}\n      data-row={row.name}\n      onChange={(e, data) => updateSelectedRowNames(data.checked ? 'ADD' : 'REMOVE', categoryName, [data['data-row']])}\n    />\n    <RowDetails row={row} />\n    <RowColorLabelsWithPopup row={row} />\n  </NoWrapDiv>)\n\nRowPanel.propTypes = {\n  row: PropTypes.object,\n  categoryName: PropTypes.string,\n  selectedRowNames: PropTypes.array,\n  updateSelectedRowNames: PropTypes.func,\n}\n/*\nconst DataSubrows = ({ data }) => {\n  if (!data) {\n    return null\n  }\n\n  const items = []\n  data.filter((d) => d.type === 'gcnv_bed' && d.samples).forEach((d) => {\n    d.samples.forEach((sample) => {\n      items.push(<Checkbox\n        key={sample}\n        label={sample}\n        checked={false}\n        onChange={(e, _) => console.log(e, _)}\n      />)\n    })\n  })\n\n  return items\n}\n\nDataSubrows.propTypes = {\n  data: PropTypes.array,\n}\n*/\n\nconst RowDetails = ({ row }) => {\n  return (\n    row.description\n      ? <StyledPopup inverted\n        content={row.description}\n        position=\"right center\"\n        trigger={\n          <Icon style={{ marginLeft: '10px' }} name=\"question circle outline\" />\n        }\n      />\n      : null)\n}\n\nRowDetails.propTypes = {\n  row: PropTypes.object,\n}\n\n\nclass LeftSideBar extends React.PureComponent\n{\n  render() {\n    //const params = new URLSearchParams(window.location.search)\n    const {\n      locusList,\n      rowsInCategories,\n      allDataTypes,\n      enabledDataTypes,\n      selectedRowNamesByCategoryName,\n      setLocus,\n      setLocusList,\n      updateDataTypesToShow,\n      updateSelectedRowNames,\n    } = this.props\n\n    return (\n      <div>\n        <EditLocusList name=\"Left Side Bar\" locusList={locusList} setLocus={setLocus} setLocusList={setLocusList} />\n        <ShowTrackTypesPanel\n          allDataTypes={allDataTypes}\n          enabledDataTypes={enabledDataTypes}\n          updateDataTypesToShow={updateDataTypesToShow}\n        />\n        <SearchRows />\n        <RowsPanel\n          rowsInCategories={rowsInCategories}\n          selectedRowNamesByCategoryName={selectedRowNamesByCategoryName}\n          updateSelectedRowNames={updateSelectedRowNames}\n        />\n      </div>)\n  }\n}\n\nLeftSideBar.propTypes = {\n  locusList: PropTypes.array,\n  rowsInCategories: PropTypes.array,\n  allDataTypes: PropTypes.array,\n  enabledDataTypes: PropTypes.array,\n  selectedRowNamesByCategoryName: PropTypes.object,\n  setLocus: PropTypes.func,\n  setLocusList: PropTypes.func,\n  updateDataTypesToShow: PropTypes.func,\n  updateSelectedRowNames: PropTypes.func,\n}\n\nconst mapStateToProps = (state) => ({\n  locusList: getLeftSideBarLocusList(state),\n  rowsInCategories: getRowsInCategories(state),\n  allDataTypes: getAllDataTypes(state),\n  enabledDataTypes: getEnabledDataTypes(state),\n  selectedRowNamesByCategoryName: getSelectedRowNamesByCategoryName(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  setLocus: (locus) => {\n    dispatch({\n      type: 'UPDATE_LOCUS',\n      newValue: locus,\n    })\n  },\n  setLocusList: (locusList) => {\n    dispatch({\n      type: 'SET_LEFT_SIDE_BAR_LOCUS_LIST',\n      values: locusList,\n    })\n  },\n  updateDataTypesToShow: (actionType, dataTypes) => {\n    dispatch({\n      type: `${actionType}_DATA_TYPES_TO_SHOW`,\n      values: dataTypes,\n    })\n  },\n  updateSelectedRowNames: (actionType, categoryName, selectedRowNames) => {\n    dispatch({\n      type: `${actionType}_SELECTED_ROW_NAMES`,\n      categoryName,\n      selectedRowNames,\n    })\n  },\n  updateSjOptions: (newSettings) => {\n    dispatch({\n      type: 'UPDATE_SJ_OPTIONS',\n      updates: newSettings,\n    })\n  },\n  updateVcfOptions: (newSettings) => {\n    dispatch({\n      type: 'UPDATE_VCF_OPTIONS',\n      updates: newSettings,\n    })\n  },\n  updateBamOptions: (newSettings) => {\n    dispatch({\n      type: 'UPDATE_BAM_OPTIONS',\n      updates: newSettings,\n    })\n  },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LeftSideBar)\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { Checkbox } from 'semantic-ui-react'\nimport { CategoryH3, OptionDiv, OptionInput } from '../SideBarUtils'\nimport { getBamOptions } from '../../redux/selectors'\n\nconst BamOptionsPanel = ({ bamOptions, updateBamOptions }) => {\n  const handleTextInput = (e, name, value = null) => {\n    if (e.keyCode === 13) {\n      updateBamOptions({ [name]: value || e.target.value })\n    }\n  }\n\n  return (\n    <div>\n      <CategoryH3>BAM TRACK <br />OPTIONS</CategoryH3><br />\n      <OptionDiv>Track height: <OptionInput key={`track-height-${bamOptions.trackHeight}`} type=\"text\" defaultValue={bamOptions.trackHeight} onKeyUp={(e) => handleTextInput(e, 'trackHeight', parseInt(e.target.value, 10))} /> px</OptionDiv>\n      <OptionDiv><Checkbox label=\"View as pairs\" checked={bamOptions.viewAsPairs} onChange={(e, data) => updateBamOptions({ viewAsPairs: data.checked })} /></OptionDiv>\n      <OptionDiv><Checkbox label=\"Show soft-clips\" checked={bamOptions.showSoftClips} onChange={(e, data) => updateBamOptions({ showSoftClips: data.checked })} /></OptionDiv>\n      <OptionDiv>Color by:</OptionDiv>\n      <OptionDiv>\n        <select value={bamOptions.colorBy} onChange={(e) => updateBamOptions({ colorBy: e.target.value })}>\n          <option value=\"strand\">Strand</option>\n          <option value=\"firstOfPairStrand\">First-of-pair strand</option>\n          <option value=\"pairOrientation\">Pair orientation</option>\n          <option value=\"fragmentLength\">Insert size (TLEN)</option>\n          <option value=\"none\">None</option>\n        </select>\n      </OptionDiv>\n    </div>)\n}\n\nBamOptionsPanel.propTypes = {\n  bamOptions: PropTypes.object,\n  updateBamOptions: PropTypes.func,\n}\n\nconst mapStateToProps = (state) => ({\n  bamOptions: getBamOptions(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateBamOptions: (newSettings) => {\n    dispatch({\n      type: 'UPDATE_BAM_OPTIONS',\n      updates: newSettings,\n    })\n  },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BamOptionsPanel)\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { CategoryH3, OptionDiv } from '../SideBarUtils'\nimport { getVcfOptions } from '../../redux/selectors'\n\nconst VcfOptionsPanel = ({ vcfOptions, updateVcfOptions }) => {\n  return (\n    <div>\n      <CategoryH3>VCF TRACK <br />OPTIONS</CategoryH3><br />\n      <OptionDiv>\n        Display mode: &nbsp;\n        <select value={vcfOptions.displayMode} onChange={(e) => updateVcfOptions({ displayMode: e.target.value })}>\n          <option value=\"COLLAPSED\">Collapse</option>\n          <option value=\"SQUISHED\">Squish</option>\n          <option value=\"EXPANDED\">Expand</option>\n        </select>\n      </OptionDiv>\n    </div>)\n}\n\nVcfOptionsPanel.propTypes = {\n  vcfOptions: PropTypes.object,\n  updateVcfOptions: PropTypes.func,\n}\n\nconst mapStateToProps = (state) => ({\n  vcfOptions: getVcfOptions(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateVcfOptions: (newSettings) => {\n    dispatch({\n      type: 'UPDATE_VCF_OPTIONS',\n      updates: newSettings,\n    })\n  },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(VcfOptionsPanel)\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport { Checkbox, Icon, Radio } from 'semantic-ui-react'\nimport { CategoryH3, ColorLegendIcon, OptionDiv, OptionInput, StyledPopup } from '../SideBarUtils'\nimport { SJ_MOTIFS, SJ_DEFAULT_COLOR_BY_NUM_READS_THRESHOLD } from '../../constants'\nimport { getSjOptions } from '../../redux/selectors'\n\n\nconst StyledRadio = styled(Radio)`\n  label {\n    margin-left: 10px;\n    margin-bottom: 10px;\n    padding-left: 1.4em !important;\n  }\n`\n\nconst ColorByLegend = ({ sjOptions, handleTextInput }) => {\n  if (sjOptions.colorBy === 'strand') {\n    return (\n      <div>\n        <ColorLegendIcon name=\"stop\" style={{ color: '#b0b0ec' }} /> plus\n        <ColorLegendIcon name=\"stop\" style={{ color: '#ecb0b0', marginLeft: '10px' }} /> minus\n      </div>)\n  }\n\n  if (sjOptions.colorBy === 'motif') {\n    // IGV.js Dark2 color palette\n    return (\n      <div>\n        <ColorLegendIcon name=\"stop\" style={{ color: 'rgb(27,158,119)' }} /> GT/AG <br />\n        <ColorLegendIcon name=\"stop\" style={{ color: 'rgb(217,95,2)' }} /> CT/AC <br />\n        <ColorLegendIcon name=\"stop\" style={{ color: 'rgb(117,112,179)' }} /> GC/AG <br />\n        <ColorLegendIcon name=\"stop\" style={{ color: 'rgb(231,41,138)' }} /> CT/GC <br />\n        <ColorLegendIcon name=\"stop\" style={{ color: 'rgb(102,166,30)' }} /> AT/AC <br />\n        <ColorLegendIcon name=\"stop\" style={{ color: 'rgb(230,171,2)' }} /> GT/AT <br />\n        <ColorLegendIcon name=\"stop\" style={{ color: 'rgb(166,118,29)' }} /> non-canonical <br />\n      </div>)\n  }\n\n  if (sjOptions.colorBy === 'numUniqueReads' || sjOptions.colorBy === 'numReads') {\n    return (\n      <div>\n        # reads<ColorLegendIcon name=\"stop\" style={{ color: '#AAAAAA', marginLeft: '10px' }} />\n        &nbsp;≤ &nbsp;\n        <OptionInput\n          type=\"text\"\n          key={`num-reads-${sjOptions.colorByNumReadsThreshold}`}\n          defaultValue={sjOptions.colorByNumReadsThreshold !== undefined ? sjOptions.colorByNumReadsThreshold : SJ_DEFAULT_COLOR_BY_NUM_READS_THRESHOLD}\n          onKeyUp={(e) => handleTextInput(e, 'colorByNumReadsThreshold')}\n          style={{ width: '35px' }}\n        />\n        &nbsp; &lt; &nbsp;\n        <ColorLegendIcon name=\"stop\" style={{ color: 'blue' }} />\n      </div>)\n  }\n  if (sjOptions.colorBy === 'isAnnotatedJunction') {\n    return (\n      <div>\n        <ColorLegendIcon name=\"stop\" style={{ color: '#b0b0ec' }} /> known junction <br />\n        <ColorLegendIcon name=\"stop\" style={{ color: 'orange' }} /> novel junction\n      </div>)\n  }\n\n  return <div />\n}\n\nColorByLegend.propTypes = {\n  sjOptions: PropTypes.object,\n  handleTextInput: PropTypes.func,\n}\n\nconst SpliceJunctionsOptionsPanel = ({ sjOptions, updateSjOptions }) => {\n  const handleTextInput = (e, name, value = null) => {\n    if (e.keyCode === 13) {\n      updateSjOptions({ [name]: value || e.target.value })\n    }\n  }\n\n  return (\n    <div>\n      <CategoryH3>JUNCTION TRACK <br />OPTIONS</CategoryH3><br />\n      <OptionDiv>Track height: <OptionInput key={`track-height-${sjOptions.trackHeight}`} type=\"text\" defaultValue={sjOptions.trackHeight} onKeyUp={(e) => handleTextInput(e, 'trackHeight', parseInt(e.target.value, 10))} /> px</OptionDiv>\n      <OptionDiv>Color by:</OptionDiv>\n      <OptionDiv>\n        <select value={sjOptions.colorBy} onChange={(e) => updateSjOptions({ colorBy: e.target.value })}>\n          <option value=\"strand\">strand</option>\n          <option value=\"motif\">donor/acceptor motif</option>\n          <option value=\"numUniqueReads\"># uniquely-mapped reads</option>\n          <option value=\"numReads\"># total reads</option>\n          <option value=\"isAnnotatedJunction\">is known junction</option>\n        </select>\n        <ColorByLegend sjOptions={sjOptions} handleTextInput={handleTextInput} />\n      </OptionDiv>\n      <OptionDiv>Junction thickness:</OptionDiv>\n      <OptionDiv>\n        <select value={sjOptions.thicknessBasedOn} onChange={(e) => updateSjOptions({ thicknessBasedOn: e.target.value })}>\n          <option value=\"numUniqueReads\"># uniquely-mapped reads</option>\n          <option value=\"numReads\"># total reads</option>\n          <option value=\"isAnnotatedJunction\">is known junction</option>\n        </select>\n      </OptionDiv>\n      <OptionDiv>Junction bounce height:</OptionDiv>\n      <OptionDiv>\n        <select value={sjOptions.bounceHeightBasedOn} onChange={(e) => updateSjOptions({ bounceHeightBasedOn: e.target.value })}>\n          <option value=\"random\">random</option>\n          <option value=\"distance\">distance</option>\n          <option value=\"thickness\">thickness</option>\n        </select>\n      </OptionDiv>\n      <OptionDiv>Junction label:</OptionDiv>\n      <OptionDiv><Checkbox label=\"# uniquely-mapped\" checked={sjOptions.labelUniqueReadCount} onChange={(e, data) => updateSjOptions({ labelUniqueReadCount: data.checked })} /></OptionDiv>\n      <OptionDiv><Checkbox label=\"# multi-mapped\" checked={sjOptions.labelMultiMappedReadCount} onChange={(e, data) => updateSjOptions({ labelMultiMappedReadCount: data.checked })} /></OptionDiv>\n      <OptionDiv><Checkbox label=\"# total reads\" checked={sjOptions.labelTotalReadCount} onChange={(e, data) => updateSjOptions({ labelTotalReadCount: data.checked })} /></OptionDiv>\n      <OptionDiv><Checkbox label=\"donor/acceptor motif\" checked={sjOptions.labelMotif} onChange={(e, data) => updateSjOptions({ labelMotif: data.checked })} /></OptionDiv>\n      <OptionDiv>\n        <Checkbox label=\"known junction:\" checked={sjOptions.labelAnnotatedJunction} onChange={(e, data) => updateSjOptions({ labelAnnotatedJunction: data.checked })} />\n        <OptionInput key={`junction-label-${sjOptions.labelAnnotatedJunctionValue}`} type=\"text\" defaultValue={sjOptions.labelAnnotatedJunctionValue} onKeyUp={(e) => handleTextInput(e, 'labelAnnotatedJunctionValue')} style={{ width: '35px' }} />\n      </OptionDiv>\n\n      <CategoryH3>JUNCTION TRACK FILTERS</CategoryH3><br />\n      <OptionDiv>\n        Show Strands:\n        <StyledRadio label=\"both\" name=\"strandButton\" checked={!sjOptions.showOnlyPlusStrand && !sjOptions.showOnlyMinusStrand} onChange={(e, data) => data.checked && updateSjOptions({ showOnlyPlusStrand: false, showOnlyMinusStrand: false })} />\n        <StyledRadio label=\"plus\" name=\"strandButton\" checked={sjOptions.showOnlyPlusStrand} onChange={(e, data) => data.checked && updateSjOptions({ showOnlyPlusStrand: true, showOnlyMinusStrand: false })} />\n        <StyledRadio label=\"minus\" name=\"strandButton\" checked={sjOptions.showOnlyMinusStrand} onChange={(e, data) => data.checked && updateSjOptions({ showOnlyPlusStrand: false, showOnlyMinusStrand: true })} />\n      </OptionDiv>\n      <OptionDiv><Checkbox label=\"Show known junctions\" checked={!sjOptions.hideAnnotated} onChange={(e, data) => updateSjOptions({ hideAnnotated: !data.checked })} /></OptionDiv>\n      <OptionDiv><Checkbox label=\"Show novel junctions\" checked={!sjOptions.hideUnannotated} onChange={(e, data) => updateSjOptions({ hideUnannotated: !data.checked })} /></OptionDiv>\n      <div>\n        <OptionDiv>Uniquely-mapped reads:</OptionDiv>\n        at least <OptionInput key={`uniquely-mapped-reads-${sjOptions.minUniquelyMappedReads}`} type=\"text\" defaultValue={sjOptions.minUniquelyMappedReads} onKeyUp={(e) => handleTextInput(e, 'minUniquelyMappedReads', parseInt(e.target.value, 10))} />\n      </div>\n      <div>\n        <OptionDiv>Total reads:</OptionDiv>\n        at least <OptionInput key={`total-reads-${sjOptions.minTotalReads}`} type=\"text\" defaultValue={sjOptions.minTotalReads} onKeyUp={(e) => handleTextInput(e, 'minTotalReads', parseInt(e.target.value, 10))} />\n      </div>\n      <div>\n        <OptionDiv>Fraction multi-mapped:\n          <StyledPopup inverted\n            content=\"Allows filtering of junctions where most reads that span the junction are multi-mapped reads. For example, setting this to 0.79 will hide junctions where 8 out of 10 (or more) reads that span the junction are not uniquely mapped reads.\"\n            position=\"left center\"\n            on=\"click\"\n            trigger={\n              <Icon style={{ marginLeft: '8px' }} name=\"question circle outline\" />\n            }\n          />\n        </OptionDiv>\n        at most <OptionInput key={`fraction-multi-mapped-${sjOptions.maxFractionMultiMappedReads}`} type=\"text\" defaultValue={sjOptions.maxFractionMultiMappedReads} onKeyUp={(e) => handleTextInput(e, 'maxFractionMultiMappedReads', parseInt(e.target.value, 10))} />\n      </div>\n      <div>\n        <OptionDiv>Splice overhang base-pairs:</OptionDiv>\n        at least <OptionInput key={`spliced-alignment-overhang-${sjOptions.minSplicedAlignmentOverhang}`} type=\"text\" defaultValue={sjOptions.minSplicedAlignmentOverhang} onKeyUp={(e) => handleTextInput(e, 'minSplicedAlignmentOverhang', parseInt(e.target.value, 10))} />\n      </div>\n      <div>\n        <OptionDiv>Donor/Acceptor Motifs:</OptionDiv>\n        {\n          SJ_MOTIFS.map((motif) => <OptionDiv key={motif}><Checkbox label={`Show ${motif}`} checked={!sjOptions[`hideMotif${motif}`]} onChange={(e, data) => updateSjOptions({ [`hideMotif${motif}`]: !data.checked })} /></OptionDiv>)\n        }\n      </div>\n    </div>)\n}\n\nSpliceJunctionsOptionsPanel.propTypes = {\n  sjOptions: PropTypes.object,\n  updateSjOptions: PropTypes.func,\n}\n\nconst mapStateToProps = (state) => ({\n  sjOptions: getSjOptions(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateSjOptions: (newSettings) => {\n    dispatch({\n      type: 'UPDATE_SJ_OPTIONS',\n      updates: newSettings,\n    })\n  },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SpliceJunctionsOptionsPanel)\n","/* eslint-disable react/require-optimization */\n/* eslint-disable react/destructuring-assignment */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport { SwatchesPicker } from 'react-color'\nimport { Popup } from 'semantic-ui-react'\n\nconst ColorSwatchBorder = styled.div`\n  display: inline-block;\n  cursor: pointer;\n  border-radius: 2px;\n  padding: 1px 2px;\n  background: #fff;\n  box-shadow: 0 0 0 1px rgba(0,0,0,.1);\n`\n\nconst ColorSwatch = styled.div`\n  display: inline-block;\n  cursor: pointer;\n  border-radius: 2px;\n  box-shadow: 0 0 0 1px rgba(0,0,0,.1);\n  width: 10px;\n  height: 12px;\n`\n\nconst StyledPopup = styled(Popup).attrs({ flowing: true })`\n  padding: 0px !important;\n  div {\n    overflow-y: visible !important;\n  }\n`\n\n/*\nconst ApplyButton = styled(Button)`\n  margin-top: 15px !important;\n`\n<div style={{ textAlign: 'center' }}><ApplyButton onClick={() => this.handleApply(this.state.color)}>Apply</ApplyButton></div>\n*/\n\nclass ColorPicker extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = { color: this.props.color }\n  }\n\n  handleChange = (color) => {\n    this.setState({ color })\n  }\n\n  handleApply = (color) => {\n    this.props.colorChangedHandler(color.hex)\n  }\n\n  render() {\n    return (\n      <StyledPopup\n        on=\"click\"\n        position=\"left center\"\n        trigger={\n          <ColorSwatchBorder>\n            <ColorSwatch style={{ background: this.state.color }} />\n          </ColorSwatchBorder>\n        }\n        content={\n          <SwatchesPicker\n            color={this.state.color}\n            onChangeComplete={this.handleApply}\n            onChange={(newColor) => this.setState({ color: newColor })}\n          />\n        }\n      />\n    )\n  }\n}\n\nColorPicker.propTypes = {\n  color: PropTypes.string.isRequired,\n  colorChangedHandler: PropTypes.func.isRequired,\n}\n\nexport default ColorPicker\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport { Button, Icon } from 'semantic-ui-react'\nimport ColorPicker from './ColorPicker'\nimport { CategoryH3, OptionDiv, OptionInput } from '../SideBarUtils'\nimport { getGcnvOptions, getSelectedSamplesByCategoryNameAndRowName } from '../../redux/selectors'\nimport { GCNV_DEFAULT_HIGHLIGHT_COLOR } from '../../constants'\n\nconst GrayText = styled.span`\n  color: gray;\n`\n\nconst StyledOptionDiv = styled(OptionDiv)`\n  margin-bottom: 8px; \n`\n\nconst HighlightedSamplesSectionHeading = styled.div`\n  font-weight: 700;\n  margin: 8px 0px;\n`\n\nconst HighlightedSamplesCategory = styled.div`\n  margin: 10px 0px 8px 0px;\n  font-style: italic;\n`\n\nconst DeleteButton = styled(Button).attrs({ basic: true, icon: true })`\n  padding: 0px !important;\n  box-shadow: none !important;\n`\n\nconst SampleNameText = styled.span`\n  word-wrap: break-word;\n  word-break: break-all;  \n  white-space: normal;\n`\n\nconst NONE_HIGHLIGHTED_MESSAGE = <GrayText>Use search box in left side-bar to select which samples to highlight.</GrayText>\n\nconst SamplePanel = ({ categoryName, rowName, sample, sampleSettings, unhighlightSample, updateSampleSettings }) => (\n  <div style={{ whiteSpace: 'nowrap' }}>\n    <DeleteButton onClick={() => unhighlightSample(categoryName, rowName, sample)}>\n      <Icon name=\"delete\" />\n    </DeleteButton>\n    <SampleNameText>{sample}</SampleNameText>\n    <span style={{ marginLeft: '8px' }}>\n      <ColorPicker\n        key={sampleSettings.color}\n        color={sampleSettings.color || GCNV_DEFAULT_HIGHLIGHT_COLOR}\n        colorChangedHandler={(newColor) => updateSampleSettings(categoryName, rowName, sample, { color: newColor })}\n      />\n    </span>\n  </div>)\n\n\nSamplePanel.propTypes = {\n  categoryName: PropTypes.string,\n  rowName: PropTypes.string,\n  sample: PropTypes.string,\n  sampleSettings: PropTypes.object,\n  unhighlightSample: PropTypes.func,\n  updateSampleSettings: PropTypes.func,\n}\n\nconst HighlighedSamplesPanel = ({ selectedSamplesByCategoryNameAndRowName, unhighlightSample, updateSampleSettings }) => {\n  const result = []\n  Object.entries(selectedSamplesByCategoryNameAndRowName).forEach(([categoryName, categoryObj]) => {\n    Object.entries(categoryObj.selectedSamples || {}).forEach(([rowName, selectedSamples]) => {\n      result.push(\n        <div key={`${categoryName}!!${rowName}`}>\n          <HighlightedSamplesCategory>{categoryName}: {rowName}</HighlightedSamplesCategory>\n          {\n            selectedSamples.map((sample) => (\n              <SamplePanel\n                key={sample}\n                categoryName={categoryName}\n                rowName={rowName}\n                sample={sample}\n                sampleSettings={((categoryObj.sampleSettings || {})[rowName] || {})[sample] || {}}\n                unhighlightSample={unhighlightSample}\n                updateSampleSettings={updateSampleSettings}\n              />),\n            )\n          }\n        </div>)\n    })\n  })\n\n  return result.length > 0 ? result : NONE_HIGHLIGHTED_MESSAGE\n}\n\nHighlighedSamplesPanel.propTypes = {\n  selectedSamplesByCategoryNameAndRowName: PropTypes.object,\n  unhighlightSample: PropTypes.func,\n  updateSampleSettings: PropTypes.func,\n}\n\n\nconst GcnvOptionsPanel = ({ gcnvOptions, selectedSamplesByCategoryNameAndRowName, updateGcnvOptions, updateSampleSettings, unhighlightSample }) => {\n  const handleTextInput = (e, name, value = null) => {\n    if (e.keyCode === 13) {\n      updateGcnvOptions({ [name]: value || e.target.value })\n    }\n  }\n\n  return (\n    <div>\n      <CategoryH3>GCNV OPTIONS</CategoryH3><br />\n      <StyledOptionDiv>Track height: <OptionInput key={`track-height-${gcnvOptions.trackHeight}`} type=\"text\" defaultValue={gcnvOptions.trackHeight} onKeyUp={(e) => handleTextInput(e, 'trackHeight', parseInt(e.target.value, 10))} /> px</StyledOptionDiv>\n      <StyledOptionDiv>Y-max: <OptionInput key={`y-max-${gcnvOptions.trackMax}`} type=\"text\" defaultValue={gcnvOptions.trackMax} onKeyUp={(e) => handleTextInput(e, 'trackMax', parseInt(e.target.value, 10))} /> copies</StyledOptionDiv>\n      <StyledOptionDiv>\n        <HighlightedSamplesSectionHeading>Highlighted samples:</HighlightedSamplesSectionHeading>\n        <HighlighedSamplesPanel\n          selectedSamplesByCategoryNameAndRowName={selectedSamplesByCategoryNameAndRowName}\n          unhighlightSample={unhighlightSample}\n          updateSampleSettings={updateSampleSettings}\n        />\n      </StyledOptionDiv>\n    </div>)\n}\n\nGcnvOptionsPanel.propTypes = {\n  gcnvOptions: PropTypes.object,\n  selectedSamplesByCategoryNameAndRowName: PropTypes.object,\n  updateGcnvOptions: PropTypes.func,\n  unhighlightSample: PropTypes.func,\n  updateSampleSettings: PropTypes.func,\n}\n\nconst mapStateToProps = (state) => ({\n  gcnvOptions: getGcnvOptions(state),\n  selectedSamplesByCategoryNameAndRowName: getSelectedSamplesByCategoryNameAndRowName(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateGcnvOptions: (newSettings) => {\n    dispatch({\n      type: 'UPDATE_GCNV_OPTIONS',\n      updates: newSettings,\n    })\n  },\n  unhighlightSample: (categoryName, rowName, sample) => {\n    dispatch({\n      type: 'REMOVE_SELECTED_SAMPLES',\n      categoryName,\n      selectedSamplesByRowName: {\n        [rowName]: [sample],\n      },\n    })\n  },\n  updateSampleSettings: (categoryName, rowName, sample, newSettings) => {\n    dispatch({\n      type: 'UPDATE_SAMPLE_SETTINGS',\n      categoryName,\n      sampleSettingsByRowName: {\n        [rowName]: {\n          [sample]: newSettings,\n        },\n      },\n    })\n  },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GcnvOptionsPanel)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport EditLocusList from './EditLocusList'\nimport BamOptionsPanel from './optionsPanels/BamOptionsPanel'\nimport VcfOptionsPanel from './optionsPanels/VcfOptionsPanel'\nimport SpliceJunctionsOptionsPanel from './optionsPanels/SpliceJunctionsOptionsPanel'\nimport GcnvOptionsPanel from './optionsPanels/GcnvOptionsPanel'\n\nimport {\n  getRightSideBarLocusList,\n  getEnabledDataTypes,\n} from '../redux/selectors'\n\nclass RightSideBar extends React.PureComponent\n{\n  render() {\n    const {\n      locusList,\n      enabledDataTypes,\n      setLocus,\n      setLocusList,\n    } = this.props\n\n    return (\n      <div>\n        <EditLocusList\n          name=\"Right Side Bar\"\n          locusList={locusList}\n          setLocus={setLocus}\n          setLocusList={setLocusList}\n        />\n\n        {enabledDataTypes.includes('alignment') && <BamOptionsPanel />}\n        {enabledDataTypes.includes('vcf') && <VcfOptionsPanel />}\n        {(enabledDataTypes.includes('coverage') || enabledDataTypes.includes('junctions')) && <SpliceJunctionsOptionsPanel />}\n        {enabledDataTypes.includes('gcnv_bed') && <GcnvOptionsPanel />}\n      </div>)\n  }\n}\n\nRightSideBar.propTypes = {\n  locusList: PropTypes.array,\n  enabledDataTypes: PropTypes.array,\n  setLocus: PropTypes.func,\n  setLocusList: PropTypes.func,\n}\n\nconst mapStateToProps = (state) => ({\n  locusList: getRightSideBarLocusList(state),\n  enabledDataTypes: getEnabledDataTypes(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  setLocus: (locus) => {\n    dispatch({\n      type: 'UPDATE_LOCUS',\n      newValue: locus,\n    })\n  },\n  setLocusList: (locusList) => {\n    dispatch({\n      type: 'SET_RIGHT_SIDE_BAR_LOCUS_LIST',\n      values: locusList,\n    })\n  },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RightSideBar)\n","/* eslint-disable react/jsx-one-expression-per-line */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable  react/jsx-closing-tag-location */\n\nimport React from 'react'\nimport styled from 'styled-components'\nimport { Icon } from 'semantic-ui-react'\nimport Modal from './Modal'\n\nconst LinkButton = styled.a`\n  cursor: pointer;\n  margin-left: 20px;\n`\n\nconst AboutLink = () => (\n  <Modal\n    title=\"About the TGG Viewer\"\n    size=\"large\"\n    modalName=\"AboutModal\"\n    trigger={<LinkButton>About</LinkButton>}\n  >\n    The Translational Genomics Group (TGG) Viewer is a free, open-source web app for visualizing splice junctions, copy number, and other data\n    genome-wide using <a href=\"https://github.com/igvteam/igv.js\" target=\"_blank\">IGV.js</a><br />\n    <br />\n    Main features: <br />\n    <ul>\n      <li>Supports most file formats supported by IGV.js, including: .bed, .vcf, .bam, .cram, .bigWig, as well as\n        several custom formats for splice junctions (.junctions.bed.gz) and gCNV copy-number variants (.gcnv.bed.gz) </li>\n      <li>Includes custom reference tracks such as splice junctions from GTEx v8 muscle, blood, and fibroblast samples.</li>\n      <li>Supports adding gene or locus lists to left or right side bar for quick navigation across a list of regions.</li>\n      <li>Can load data files or reference tracks from any Google bucket to which you have read-access.</li>\n      <li>Retrieves just the on-screen sections of the files directly from Google buckets.</li>\n      <li>All settings, gene lists, and data paths can be exported and later restored or shared with others via a .json config file.\n        To export all current settings, click the <Icon name=\"download\" /> button, upload the .json file to github (or another public url), and then\n        to restore the settings, paste the file's URL into the Initial Settings input, and Apply. </li>\n      <li>The page url also records page settings so that they can be bookmarked or shared, but does not include gene lists.</li>\n    </ul>\n\n    <a href=\"https://github.com/broadinstitute/tgg-viewer/issues\" target=\"_blank\">Issues</a>\n    &nbsp;or <a href=\"https://github.com/broadinstitute/tgg-viewer/issues\" target=\"_blank\">Feature Requests</a>\n    &nbsp;can be submitted via <a href=\"https://github.com/broadinstitute/tgg-viewer\" target=\"_blank\">GitHub</a>.\n  </Modal>\n)\n\nexport default AboutLink\n","/* eslint-disable react/jsx-one-expression-per-line */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { getUser } from '../redux/selectors'\n\n\nclass UserInfo extends React.PureComponent\n{\n  render() {\n\n    const {\n      user,\n    } = this.props\n\n    if (!user.googleUserEmail) {\n      return <div>Signing in to Google Buckets...</div>\n    }\n\n    return <div>Signed in to Google Buckets as <b>{user.googleUserEmail}</b></div>\n  }\n}\n\nUserInfo.propTypes = {\n  user: PropTypes.object.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  user: getUser(state),\n\n})\n\nexport default connect(mapStateToProps)(UserInfo)\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Grid } from 'semantic-ui-react'\nimport AboutLink from './About'\nimport UserInfo from './UserInfo'\n\nconst HeaderRow = styled(Grid.Row)`\n  color: #444;\n  margin-bottom: 5px;\n`\n\nconst Column1 = styled(Grid.Column).attrs({ width: 6 })`\n  text-align: left;\n  padding-left: 75px !important;\n`\nconst Column2 = styled(Grid.Column).attrs({ width: 10 })`\n  text-align: right;\n  padding-right: 75px !important;\n`\n\nexport default () => (\n  <Grid>\n    <HeaderRow>\n      <Column1>\n        <b>TGG Viewer:</b>\n        <AboutLink />\n        {/* <a href=\"#\">Intro Video</a> &nbsp; &nbsp; */}\n      </Column1>\n      <Column2>\n        <UserInfo />\n      </Column2>\n    </HeaderRow>\n  </Grid>)\n","\nexport const throttle = (delay, fn) => {\n  let timerId\n  return (...args) => {\n    if (timerId) {\n      clearTimeout(timerId)\n    }\n    timerId = setTimeout(() => {\n      fn(...args)\n      timerId = null\n    }, delay)\n  }\n}\n","/* eslint-disable eqeqeq */\nimport _ from 'lodash'\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport igv from 'igv/dist/igv.esm'\nimport { connect } from 'react-redux'\n\nimport {\n  getGenome,\n  getLocus,\n  getTracks,\n  getSelectedSamplesByCategoryNameAndRowName,\n  getEnabledDataTypes,\n  getSjOptions,\n  getVcfOptions,\n  getBamOptions,\n  getGcnvOptions,\n} from '../redux/selectors'\nimport { getGoogleUserEmail, googleSignIn, initGoogleClient } from '../utils/googleAuth'\nimport { throttle } from '../utils/throttle'\n\nconst IGV_SETTINGS = {\n  showIdeogram: true,\n  showNavigation: true,\n  showRuler: true,\n  showCenterGuide: true,\n  showCursorTrackingGuide: true,\n  showCommandBar: true,\n}\n\nconst StyledDiv = styled.div``\n\n\nclass IGV extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    this.container = null\n    this.browser = null\n    this.ignoreNextTrackRemovedEvent = false\n  }\n\n  setContainerElement = (element) => {\n    this.container = element\n  }\n\n  render = () => <StyledDiv><div ref={this.setContainerElement} /></StyledDiv>\n\n  async componentDidMount() {\n\n    if (!this.container) {\n      return\n    }\n\n    const {\n      genome,\n      locus,\n      tracks,\n      locusChangedHandler,\n      trackRemovedHandler,\n      userChangedHandler,\n    } = this.props\n\n    const igvBrowserOptions = {\n      ...IGV_SETTINGS,\n      locus,\n      genome,\n      tracks,\n    }\n\n    // TODO check if any tracks need google sign-in\n    await initGoogleClient()\n    await googleSignIn()\n    const googleUserEmail = await getGoogleUserEmail()\n    userChangedHandler(googleUserEmail)\n\n    console.log('Calling igv.createBrowser(..)', igvBrowserOptions)\n    igv.createBrowser(this.container, igvBrowserOptions).then((browser) => {\n      this.browser = browser\n\n      if (locusChangedHandler) {\n        this.browser.on('locuschange', throttle(300, locusChangedHandler)) //{chr, start, end, label}\n      }\n\n      if (trackRemovedHandler) {\n        this.browser.on('trackremoved', (track) => {\n          if (!this.ignoreNextTrackRemovedEvent) {\n            trackRemovedHandler(track)\n          }\n\n          this.ignoreNextTrackRemovedEvent = false\n        })\n      }\n    })\n  }\n\n  shouldComponentUpdate(nextProps) {\n    if (!this.container || !this.browser) {\n      return false\n    }\n\n    const {\n      tracks,\n      selectedSamplesByCategoryNameAndRowName,\n      enabledDataTypes,\n      sjOptions,\n      vcfOptions,\n      bamOptions,\n      gcnvOptions,\n    } = this.props\n\n    const currentIGVLocus = this.browser.$searchInput.val()\n    const nextIGVLocus = nextProps.locus\n    if (nextProps.locus && (!currentIGVLocus || nextIGVLocus.replace(/,/g, '') !== currentIGVLocus.replace(/,/g, ''))) {\n      this.browser.search(nextIGVLocus)\n    }\n\n    const nextTrackSettingsByTrackName = nextProps.tracks.reduce((acc, item) => {\n      return { [item.name]: item, ...acc }\n    }, {})\n\n    //console.log('IGV.nextProps:', nextProps)\n\n    // update or remove existing tracks\n    tracks.forEach((track) => {\n      const nextTrackSettings = nextTrackSettingsByTrackName[track.name]\n      if (nextTrackSettings) {\n        const junctionTrackDisplaySettingsChanged = ['merged', 'wig', 'spliceJunctions'].includes(track.type) && (\n          nextProps.enabledDataTypes.includes('junctions') !== enabledDataTypes.includes('junctions')\n          || nextProps.enabledDataTypes.includes('coverage') !== enabledDataTypes.includes('coverage')\n          || nextProps.sjOptions !== sjOptions)\n        const vcfTrackDisplaySettingsChanged = track.type === 'variant' && nextProps.vcfOptions !== vcfOptions\n        const alignmentTrackDisplaySettingsChanged = track.type === 'alignment' && nextProps.bamOptions !== bamOptions\n        const gcnvTrackDisplaySettingsChanged = track.type === 'gcnv' && nextProps.gcnvOptions !== gcnvOptions\n        const gcnvTrackHighlightedSamplesChanged = track.type === 'gcnv' && (\n          !_.isEqual(\n            ((nextProps.selectedSamplesByCategoryNameAndRowName[track.categoryName] || {}).selectedSamples || {})[track.rowName],\n            ((selectedSamplesByCategoryNameAndRowName[track.categoryName] || {}).selectedSamples || {})[track.rowName])\n          || !_.isEqual(\n            ((nextProps.selectedSamplesByCategoryNameAndRowName[track.categoryName] || {}).sampleSettings || {})[track.rowName],\n            ((selectedSamplesByCategoryNameAndRowName[track.categoryName] || {}).sampleSettings || {})[track.rowName])\n        )\n\n        if (junctionTrackDisplaySettingsChanged\n          || vcfTrackDisplaySettingsChanged\n          || alignmentTrackDisplaySettingsChanged\n          || gcnvTrackDisplaySettingsChanged\n          || gcnvTrackHighlightedSamplesChanged)\n        {\n          console.log('Reloading track', track.name)\n          this.ignoreNextTrackRemovedEvent = true\n          this.browser.removeTrackByName(track.name)\n          this.browser.loadTrack(nextTrackSettings)\n        }\n\n        // delete track from nextTrackSettingsByTrackName to indicate that it's still selected\n        delete nextTrackSettingsByTrackName[track.name]\n\n      } else {\n        // remove track that was de-selected\n        try {\n          this.ignoreNextTrackRemovedEvent = true\n          console.log('Removing track', track.name)\n          this.browser.removeTrackByName(track.name)\n        } catch (e) {\n          console.warn('Unable to remove track', track.name, e)\n        }\n      }\n    })\n\n    // load any newly-selected track(s)\n    Object.values(nextTrackSettingsByTrackName).forEach((track) => {\n      try {\n        console.log('Loading track', track.name)\n        this.browser.loadTrack(track)\n      } catch (e) {\n        console.warn('Unable to add track', track.name, e)\n      }\n    })\n\n    return false\n  }\n}\n\nIGV.propTypes = {\n  genome: PropTypes.string.isRequired,\n  locus: PropTypes.string.isRequired,\n  tracks: PropTypes.array.isRequired,\n  selectedSamplesByCategoryNameAndRowName: PropTypes.object.isRequired,\n  enabledDataTypes: PropTypes.array.isRequired,\n  locusChangedHandler: PropTypes.func,\n  trackRemovedHandler: PropTypes.func,\n  userChangedHandler: PropTypes.func,\n  sjOptions: PropTypes.object,\n  vcfOptions: PropTypes.object,\n  bamOptions: PropTypes.object,\n  gcnvOptions: PropTypes.object,\n}\n\nconst mapStateToProps = (state) => ({\n  genome: getGenome(state),\n  locus: getLocus(state),\n  tracks: getTracks(state),\n  enabledDataTypes: getEnabledDataTypes(state),\n  selectedSamplesByCategoryNameAndRowName: getSelectedSamplesByCategoryNameAndRowName(state),\n  sjOptions: getSjOptions(state),\n  vcfOptions: getVcfOptions(state),\n  bamOptions: getBamOptions(state),\n  gcnvOptions: getGcnvOptions(state),\n})\n\n\nconst mapDispatchToProps = (dispatch) => ({\n  locusChangedHandler: (event) => {\n    const newLocus = event.label.replace(/,/g, '')\n\n    dispatch({\n      type: 'UPDATE_LOCUS',\n      newValue: newLocus,\n    })\n  },\n\n  userChangedHandler: (googleUserEmail) => {\n    dispatch({\n      type: 'UPDATE_USER',\n      updates: { googleUserEmail },\n    })\n  },\n\n  trackRemovedHandler: (track) => {\n    console.log('Removing track', track.config.categoryName, track.config.name)\n\n    dispatch({\n      type: 'REMOVE_SELECTED_ROW_NAMES',\n      categoryName: [track.config.categoryName],\n      selectedRowNames: [track.config.name],\n    })\n  },\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IGV)\n","/* eslint-disable react/destructuring-assignment */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Icon, Popup } from 'semantic-ui-react'\n\n\nclass RequestStatus extends React.PureComponent {\n\n  static NONE = 'NONE'\n\n  static IN_PROGRESS = 'IN_PROGRESS'\n\n  static SUCCEEDED = 'SUCCEEDED'\n\n  static ERROR = 'ERROR'\n\n  render() {\n    switch (this.props.status) {\n      case RequestStatus.IN_PROGRESS:\n        return <Icon loading name=\"spinner\" style={{ color: '#4183c4' }} />\n      case RequestStatus.SUCCEEDED:\n        return <Popup\n          trigger={\n            <Icon name=\"check circle\" style={{ color: '#00C000' }} />\n          }\n          content={this.props.successMessage || 'Success'}\n          position=\"top center\"\n          size=\"small\"\n        />\n      case RequestStatus.ERROR:\n        return <Popup\n          trigger={\n            <Icon name=\"warning circle\" style={{ color: '#F00000' }} />\n          }\n          content={this.props.errorMessage || ''}\n          position=\"top center\"\n          size=\"small\"\n        />\n      default:\n        return <Icon name=\"warning circle\" style={{ color: 'rgb(0,0,0,0.0)' }} />\n    }\n  }\n}\n\nRequestStatus.propTypes = {\n  status: PropTypes.string,\n  errorMessage: PropTypes.string,\n  successMessage: PropTypes.string,\n}\n\nexport default RequestStatus\n","import LZString from 'lz-string'\n\n/* in-memory cache to avoid unnecessary compression/decompression */\nconst CACHE = {}\n\n/**\n * Uses the localStorage API to save a state object in the browser under the given label.\n * @param label {string}\n * @param state {object}\n */\nexport const saveState = (label, state) => {\n  try {\n    const jsonString = JSON.stringify(state)\n    if (CACHE[label] === jsonString) {\n      return\n    }\n    console.warn(`LocalStorage: compressing ${label}`)\n    const serializedState = LZString.compress(jsonString)\n    localStorage.setItem(label, serializedState)\n    CACHE[label] = jsonString\n  } catch (err) {\n    console.warn('Unable to save state: ', label, state, err)\n  }\n}\n\n\n/**\n * Uses the localStorage API to restored a previously-saved state object.\n * @param label {string}\n * @param state {object}\n */\nexport const loadState = (label) => {\n  try {\n    const serializedState = localStorage.getItem(label)\n    const jsonString = LZString.decompress(serializedState)\n    CACHE[label] = jsonString\n\n    if (jsonString === null) {\n      return undefined\n    }\n\n    return JSON.parse(jsonString)\n  } catch (err) {\n    return undefined\n  }\n}\n","/* eslint-disable operator-linebreak */\n/* eslint-disable no-unused-vars */\n\nimport jsurl from 'jsurl'\n\nimport { loadState, saveState } from '../utils/localStorage'\n\n/*\nTODO\n- local, aws\n- gtf\n- reference tracks\n    - splice ai\n */\n\nconst REFERENCE_DATA_ROOT = 'gs://seqr-reference-data/GRCh38/rna-seq'\nconst REFERENCE_DATA_INFO_LIST = [\n  {\n    name: 'GTEx 100 Muscle',\n    description: '100 randomly-chosen GTEx v3 muscle samples combined by summing raw coverage values and raw splice-junction-spanning read counts across all 100 samples.',\n    data: [\n      { type: 'junctions', url: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/muscle_100_GTEx_samples.junctions.bed.gz` },\n      { type: 'coverage', url: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/muscle_100_GTEx_samples.bigWig` },\n    ],\n  },\n  {\n    name: 'GTEx 100 Blood',\n    description: '100 randomly-chosen GTEx v3 blood samples combined by summing raw coverage values and raw splice-junction-spanning read counts across all 100 samples.',\n    data: [\n      { type: 'junctions', url: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/blood_100_GTEx_samples.junctions.bed.gz` },\n      { type: 'coverage', url: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/blood_100_GTEx_samples.bigWig` },\n    ],\n  },\n  {\n    name: 'GTEx 100 Fibs',\n    description: '100 randomly-chosen GTEx v3 fibroblast samples combined by summing raw coverage values and raw splice-junction-spanning read counts across all 100 samples.',\n    data: [\n      { type: 'junctions', url: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/fibs_100_GTEx_samples.junctions.bed.gz` },\n      { type: 'coverage', url: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/fibs_100_GTEx_samples.bigWig` },\n    ],\n  },\n  {\n    name: 'GTEx All Muscle',\n    description: 'All 803 GTEx v3 muscle samples combined by summing raw coverage values and raw splice-junction-spanning read counts across all samples.',\n    data: [\n      { type: 'junctions', url: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/GTEX_muscle.803_samples.junctions.bed.gz` },\n      { type: 'coverage', url: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/GTEX_muscle.803_samples.bigWig` },\n    ],\n  },\n  {\n    name: 'GTEx All Blood',\n    description: 'All 755 GTEx v3 blood samples combined by summing raw coverage values and raw splice-junction-spanning read counts across all samples.',\n    data: [\n      { type: 'junctions', url: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/GTEX_blood.755_samples.junctions.bed.gz` },\n      { type: 'coverage', url: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/GTEX_blood.755_samples.bigWig` },\n    ],\n  },\n  {\n    name: 'GTEx All Fibs',\n    description: 'All 504 GTEx v3 fibroblast samples combined by summing raw coverage values and raw splice-junction-spanning read counts across all samples.',\n    data: [\n      { type: 'junctions', url: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/GTEX_fibs.504_samples.junctions.bed.gz` },\n      { type: 'coverage', url: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/GTEX_fibs.504_samples.bigWig` },\n    ],\n  },\n  {\n    name: 'GTEx All Muscle - Norm.',\n    description: 'All 803 GTEx v3 muscle samples combined by summing raw coverage values across all samples and also summing normalized splice-junction-spanning read counts across all samples. The normalization is done by computing the normalized read count for each junction as normalized_read_count = raw_read_count * scalar. Here scalar = average_unique_reads_per_muscle_sample / (total_unqiue_reads_in_this_sample * number_of_muscle_samples), and average_unique_reads_per_muscle_sample = (total_unqiue_reads_in_all_muscle_samples / number_of_muscle_samples)',\n    data: [\n      { type: 'junctions', url: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/GTEX_muscle.803_samples.normalized.junctions.bed.gz` },\n      { type: 'coverage', url: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/GTEX_muscle.803_samples.bigWig` },\n    ],\n  },\n  {\n    name: 'GTEx All Blood - Norm.',\n    description: 'All 755 GTEx v3 blood samples combined by summing raw coverage values across all samples and also summing normalized splice-junction-spanning read counts across all samples. The normalization is done by computing the normalized read count for each junction as normalized_read_count = raw_read_count * scalar. Here scalar = average_unique_reads_per_blood_sample / (total_unqiue_reads_in_this_sample * number_of_blood_samples), and average_unique_reads_per_blood_sample = (total_unqiue_reads_in_all_blood_samples / number_of_blood_samples)',\n    data: [\n      { type: 'junctions', url: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/GTEX_blood.755_samples.normalized.junctions.bed.gz` },\n      { type: 'coverage', url: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/GTEX_blood.755_samples.bigWig` },\n    ],\n  },\n  {\n    name: 'GTEx All Fibs - Norm.',\n    description: 'All 504 GTEx v3 fibroblast samples combined by summing raw coverage values across all samples and also summing normalized splice-junction-spanning read counts across all samples. The normalization is done by computing the normalized read count for each junction as normalized_read_count = raw_read_count * scalar. Here scalar = average_unique_reads_per_fibs_sample / (total_unqiue_reads_in_this_sample * number_of_fibs_samples), and average_unique_reads_per_fibs_sample = (total_unqiue_reads_in_all_fibs_samples / number_of_fibs_samples)',\n    data: [\n      { type: 'junctions', url: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/GTEX_fibs.504_samples.normalized.junctions.bed.gz` },\n      { type: 'coverage', url: `${REFERENCE_DATA_ROOT}/GTEx_ref_data/GTEX_fibs.504_samples.bigWig` },\n    ],\n  },\n  {\n    name: 'splice AI scores - SNVs',\n    data: [\n      { type: 'coverage', url: `${REFERENCE_DATA_ROOT}/spliceai/spliceai_scores.raw.snv.hg38.all.bigWig` },\n    ],\n  },\n  {\n    name: 'splice AI scores - SNVs - alt allele A',\n    data: [\n      { type: 'coverage', url: `${REFERENCE_DATA_ROOT}/spliceai/spliceai_scores.raw.snv.hg38.alt-allele-A.bigWig` },\n    ],\n  },\n  {\n    name: 'splice AI scores - SNVs - alt allele C',\n    data: [\n      { type: 'coverage', url: `${REFERENCE_DATA_ROOT}/spliceai/spliceai_scores.raw.snv.hg38.alt-allele-C.bigWig` },\n    ],\n  },\n  {\n    name: 'splice AI scores - SNVs - alt allele G',\n    data: [\n      { type: 'coverage', url: `${REFERENCE_DATA_ROOT}/spliceai/spliceai_scores.raw.snv.hg38.alt-allele-G.bigWig` },\n    ],\n  },\n  {\n    name: 'splice AI scores - SNVs - alt allele T',\n    data: [\n      { type: 'coverage', url: `${REFERENCE_DATA_ROOT}/spliceai/spliceai_scores.raw.snv.hg38.alt-allele-T.bigWig` },\n    ],\n  },\n  /*\n  {\n    name: 'Gencode v32 Genes',\n    description: 'Comprehensive gene annotations for GRCh38 reference chromosomes. Source: https://www.gencodegenes.org/human/release_32.html',\n    annotation: 'gs://macarthurlab-rnaseq/reference_tracks/gencode.v32.annotation.sorted.gtf.gz'\n  },\n  {\n    name: 'RefSeq Genes',\n    path: 'https://s3.amazonaws.com/igv.org.genomes/hg38/refGene.sorted.txt.gz'\n  }\n  */\n]\n\nconst ROW_INFO_LIST = []\n\nconst INITIAL_ROWS_IN_CATEGORIES = [\n  {\n    categoryName: 'Reference Data',\n    rows: REFERENCE_DATA_INFO_LIST,\n  },\n  {\n    categoryName: 'Samples',\n    rows: ROW_INFO_LIST,\n  },\n]\n\nexport const DEFAULT_STATE = {\n  genome: 'hg38',\n  locus: 'chr15:92,835,700-93,031,800',\n  dataTypesToShow: ['junctions', 'coverage', 'vcf', 'gcnv_bed'],\n  leftSideBarLocusList: [],\n  rightSideBarLocusList: [],\n  rowsInCategories: INITIAL_ROWS_IN_CATEGORIES,\n  selectedRowNamesByCategoryName: {},\n  sjOptions: {\n    trackHeight: 170,\n    hideAnnotated: false,\n    hideUnannotated: false,\n    colorBy: 'strand',\n    minUniquelyMappedReads: 0,\n    minTotalReads: 1,\n    maxFractionMultiMappedReads: 1,\n    minSplicedAlignmentOverhang: 0,\n    thicknessBasedOn: 'numUniqueReads', //options: numUniqueReads (default), numReads, isAnnotatedJunction\n    bounceHeightBasedOn: 'random', //options: random (default), distance, thickness\n    labelUniqueReadCount: true,\n    labelMultiMappedReadCount: false,\n    labelTotalReadCount: false,\n    labelMotif: false,\n    labelAnnotatedJunction: false,\n    labelAnnotatedJunctionValue: ' [A]',\n  },\n  vcfOptions: {\n    displayMode: 'EXPANDED',\n  },\n  bamOptions: {\n    trackHeight: 200,\n    showSoftClips: true,\n    alignmentShading: 'strand',\n  },\n  gcnvOptions: {\n    trackHeight: 200,\n    trackMin: 0,\n    trackMax: 5,\n    autoscale: false,\n    onlyHandleClicksForHighlightedSamples: true,\n  },\n  initialSettingsUrl: '',\n}\n\nDEFAULT_STATE.initialSettings = JSON.parse(JSON.stringify(DEFAULT_STATE)) // create a deep-copy of DEFAULT_STATE\n\nconst KEYS_TO_PERSIST_IN_URL = {\n  locus: 'locus',\n  dataTypesToShow: 'show',\n  selectedRowNamesByCategoryName: 'selectedRows',\n  selectedSamplesByCategoryNameAndRowName: 'selectedSamples',\n  sjOptions: 'sjOptions',\n  vcfOptions: 'vcfOptions',\n  bamOptions: 'bamOptions',\n  gcnvOptions: 'gcnvOptions',\n  initialSettingsUrl: 'settingsUrl',\n  //initialSettingsUrlHasBeenApplied: 'settingsUrlApplied',\n}\n\nconst KEYS_TO_PERSIST_IN_LOCAL_STORAGE = [\n  'rowsInCategories', 'leftSideBarLocusList', 'rightSideBarLocusList',\n]\n\n\nexport const computeInitialState = () => {\n\n  // restore values from local storage\n  const stateFromLocalStorage = KEYS_TO_PERSIST_IN_LOCAL_STORAGE.reduce((acc, key) => {\n    const v = loadState(key)\n    if (v !== undefined) {\n      acc[key] = v\n    }\n    return acc\n  }, {})\n\n  // restore values from url\n  const REVERSE_KEY_NAME_LOOKUP = Object.entries(KEYS_TO_PERSIST_IN_URL).reduce(\n    (acc, [key, value]) => {\n      return { ...acc, [value]: key }\n    }, {})\n  const hashString = window.location.hash.replace(/^#/, '')\n\n  const stateFromUrlHash = hashString ?\n    hashString.split('&').reduce((acc, keyValue) => {\n      const keyValueList = keyValue.split('=')\n      const key = (keyValueList[0] in REVERSE_KEY_NAME_LOOKUP) ? REVERSE_KEY_NAME_LOOKUP[keyValueList[0]] : keyValueList[0]\n      if (key === 'locus') {\n        acc = { ...acc, [key]: keyValueList[1] }\n      } else {\n        try {\n          acc[key] = jsurl.parse(keyValueList[1])\n        } catch (e) {\n          console.error('Couldn\\'t parse url hash param', keyValueList[0], ': ', keyValueList[1])\n        }\n      }\n      return acc\n    }, {})\n    : {}\n\n  // default values are over-ridden by values from local storage, which are over-ridden by values from the url\n  const initialState = { ...DEFAULT_STATE, ...stateFromLocalStorage, ...stateFromUrlHash }\n\n  return initialState\n}\n\n\nexport const updateLocalStorageAndUrl = (state) => {\n  //update local storage\n\n  KEYS_TO_PERSIST_IN_LOCAL_STORAGE.forEach((key) => {\n    saveState(key, state[key])\n  })\n\n  //update url\n  const hashString = Object.keys(state)\n    .filter((key) => (key in KEYS_TO_PERSIST_IN_URL))\n    .reduce((hashKeyValueList, key) => {\n      const value = key === 'locus' ? state[key].replace(',', '') : jsurl.stringify(state[key])\n      return [\n        ...hashKeyValueList,\n        `${KEYS_TO_PERSIST_IN_URL[key]}=${value}`,\n      ]\n    }, []).join('&')\n\n  window.location.hash = `#${hashString}`\n}\n","/* eslint-disable react/no-find-dom-node */\n/* eslint-disable react/destructuring-assignment */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport { Button, Input, Popup } from 'semantic-ui-react'\nimport delay from 'timeout-as-promise'\nimport yaml from 'js-yaml'\nimport { getInitialSettingsUrl, getInitialSettingsUrlHasBeenApplied } from '../redux/selectors'\nimport RequestStatus from './RequestStatus'\nimport { DEFAULT_STATE } from '../redux/initialState'\n\nconst StyledDiv = styled.div`\n  color: #999;\n  width: 100%;\n  text-align: center;\n  \n  .ui.label {\n    color: #444;\n    background-color: #f3f3f3;\n  }\n`\n\nconst StyledInput = styled(Input)`\n  margin-top: 100px;\n  width: calc(100% - 350px);\n`\n\nconst StyledButton = styled(Button)`\n  margin-left: 20px !important;\n  margin-right: 15px !important;\n`\n\nclass InitialSettingsForm extends React.PureComponent\n{\n  constructor(props) {\n    super(props)\n    this.textInputValue = props.initialSettingsUrl || ''\n    this.state = {\n      requestStatus: RequestStatus.NONE,\n      successMessage: '',\n      errorMessage: '',\n    }\n  }\n\n  async componentDidMount() {\n    const {\n      initialSettingsUrl,\n      initialSettingsUrlHasBeenApplied,\n    } = this.props\n\n    if (initialSettingsUrl && !initialSettingsUrlHasBeenApplied) {\n      // download url\n      console.log('Loading settings from url', initialSettingsUrl)\n      await this.applyInitialSettingsUrl(initialSettingsUrl)\n    }\n  }\n\n  loadInitialSettingsUrl = async (url) => {\n    const {\n      globalState,\n      updateInitialSettingsUrl,\n      setInitialSettingsUrlHasBeenApplied,\n      resetGlobalState,\n    } = this.props\n\n    if (!url) {\n      //reset url to empty\n      resetGlobalState({ ...DEFAULT_STATE, ...{ user: globalState.user } })\n      updateInitialSettingsUrl('')\n      setInitialSettingsUrlHasBeenApplied()\n      return\n    }\n\n    //validate url\n    if (url.search(':') === -1 || url.search('/') === -1) {\n      throw new Error(`Invalid url: \"${url}\"`)\n    }\n\n    const isYaml = url.search('.yaml') !== -1 || url.search('.yml') !== -1\n    const isJson = url.search('.json') !== -1\n    const isUnknown = !isYaml && !isJson\n\n    //NOTE: changed my mind about requiring a .yaml or .json extension to allow for more flexibility.\n    //if (!isYamlURL && !isJsonURL) {\n    //  throw new Error('Expected file extensions (\".yaml\", \".yml\", or \".json\") not found in the URL')\n    //}\n\n    const response = await fetch(url)\n    if (!response.ok) {\n      throw new Error(`Couldn't load URL. Error: ${response.statusText.toLowerCase()} (${response.status})`)\n    }\n\n    const fileContents = await response.text()\n\n    let settings = null\n    if (!settings && (isYaml || isUnknown)) {\n      try {\n        settings = yaml.safeLoad(fileContents)\n      } catch (e) {\n        if (isYaml) {\n          console.error(`Unable to parse YAML file: ${url}. ${e}`)\n          return\n        }\n      }\n    }\n\n    if (!settings && (isJson || isUnknown)) {\n      try {\n        settings = JSON.parse(fileContents)\n      } catch (e) {\n        if (isJson) {\n          console.error(`Unable to parse JSON file: ${url}. ${e}`)\n          return\n        }\n      }\n    }\n\n    if (!settings) {\n      console.error(`Unable to parse JSON or YAML from: ${url}`)\n      return\n    }\n\n    // TODO validate settings more\n\n    // filter settings to keys in globalState\n    const filteredSettings = Object.keys(globalState).reduce((acc, key) => {\n      if (key in settings) {\n        return { ...acc, [key]: settings[key] }\n      }\n      return acc\n    }, {})\n\n    filteredSettings.initialSettings = JSON.parse(JSON.stringify(filteredSettings)) // deep-copy just in case\n\n    // apply settings\n    resetGlobalState({ ...globalState, ...filteredSettings })\n    updateInitialSettingsUrl(url)\n    setInitialSettingsUrlHasBeenApplied()\n  }\n\n  applyInitialSettingsUrl = async (url) => {\n\n    this.setState({ requestStatus: RequestStatus.IN_PROGRESS })\n\n    if (url.startsWith('https://github.com/')) {\n      // switch to the github raw url\n      url = url.replace('https://github.com', 'https://raw.githubusercontent.com').replace('blob/', '')\n    }\n\n    try {\n      await this.loadInitialSettingsUrl(url)\n\n      this.setState({ requestStatus: RequestStatus.SUCCEEDED, successMessage: url ? 'Successfully loaded URL and applied settings' : 'Reset all settings to defaults' })\n    } catch (e) {\n      this.setState({ requestStatus: RequestStatus.ERROR, errorMessage: e.toString() })\n    }\n\n    // wait and then clear the message\n    await delay(10000)\n    if (this.state.requestStatus !== RequestStatus.IN_PROGRESS) {\n      this.setState({ requestStatus: RequestStatus.NONE, errorMessage: '' })\n    }\n  }\n\n  exportCurrentSettings = () => {\n    //convert global state to a JSON string\n    const EXCLUDED_KEYS = ['initialSettings', 'initialSettingsUrlHasBeenApplied', 'user', 'modals']\n    const globalStateForExport = Object.keys(this.props.globalState).reduce((acc, key) => {\n      if (!EXCLUDED_KEYS.includes(key)) {\n        acc[key] = this.props.globalState[key]\n      }\n      return acc\n    }, {})\n\n    return encodeURIComponent(JSON.stringify(globalStateForExport, null, 5))\n  }\n\n  render() {\n    const {\n      initialSettingsUrl,\n    } = this.props\n\n    return (\n      <StyledDiv align=\"center\">\n        <StyledInput\n          label=\"Initial settings:\"\n          defaultValue={initialSettingsUrl}\n          placeholder=\"URL of .yaml or .json settings file (eg. http://.../settings.json), or blank to reset all settings to defaults.\"\n          onChange={(e) => {\n            this.textInputValue = e.target.value\n          }}\n        />\n        <StyledButton\n          content=\"Apply\"\n          onClick={() => this.applyInitialSettingsUrl(this.textInputValue)}\n        />\n        <RequestStatus\n          status={this.state.requestStatus}\n          errorMessage={this.state.errorMessage}\n          successMessage={this.state.successMessage}\n        />\n        <Popup\n          content=\"Export current settings to a .json file. If you upload this file to a public url (for example on github) and then paste the url here, these settings will be restored.\"\n          position=\"right center\"\n          trigger={\n            <a download=\"settings.json\" href={`data:text/json;charset=utf-8,${this.exportCurrentSettings()}`}>\n              <Button icon=\"download\" />\n            </a>\n          }\n        />\n      </StyledDiv>)\n  }\n}\n\nInitialSettingsForm.propTypes = {\n  initialSettingsUrl: PropTypes.string.isRequired,\n  initialSettingsUrlHasBeenApplied: PropTypes.bool.isRequired,\n  globalState: PropTypes.object,\n  updateInitialSettingsUrl: PropTypes.func,\n  setInitialSettingsUrlHasBeenApplied: PropTypes.func,\n  resetGlobalState: PropTypes.func,\n}\n\nconst mapStateToProps = (state) => ({\n  globalState: state,\n  initialSettingsUrl: getInitialSettingsUrl(state),\n  initialSettingsUrlHasBeenApplied: getInitialSettingsUrlHasBeenApplied(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateInitialSettingsUrl: (newUrl) => {\n    dispatch({\n      type: 'UPDATE_INITIAL_SETTINGS_URL',\n      newValue: newUrl,\n    })\n  },\n  setInitialSettingsUrlHasBeenApplied: () => {\n    dispatch({\n      type: 'UPDATE_INITIAL_SETTINGS_URL_HAS_BEEN_APPLIED',\n      newValue: true,\n    })\n  },\n  resetGlobalState: (state) => {\n    dispatch({\n      type: 'RESET_GLOBAL_STATE',\n      newState: state,\n    })\n  },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InitialSettingsForm)\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Grid } from 'semantic-ui-react'\nimport LeftSideBar from './LeftSideBar'\nimport RightSideBar from './RightSideBar'\nimport Header from './Header'\nimport IGV from './IGV'\nimport InitialSettingsForm from './InitialSettingsForm'\n\nconst StyledDiv = styled.div`\n  padding: 10px 20px;\n`\n\nconst SIDE_BAR_WIDTH = 210\n\nconst SideBarColumn = styled(Grid.Column)`\n  min-width: ${SIDE_BAR_WIDTH}px !important;\n`\n\nconst MiddleColumn = styled(Grid.Column)`\n  min-width: calc(99% - ${2 * SIDE_BAR_WIDTH + 5}px) !important;\n`\n\nexport default () => (\n  <StyledDiv>\n    <Grid>\n      <Grid.Row>\n        <SideBarColumn><LeftSideBar /></SideBarColumn>\n        <MiddleColumn>\n          <Header />\n          <IGV />\n          <InitialSettingsForm />\n        </MiddleColumn>\n        <SideBarColumn><RightSideBar /></SideBarColumn>\n      </Grid.Row>\n    </Grid>\n  </StyledDiv>\n)\n","/* eslint-disable prefer-object-spread */\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { updateLocalStorageAndUrl, computeInitialState } from './initialState'\n\n\nimport {\n  zeroActionsReducer,\n  createSingleValueReducer,\n  createSingleObjectReducer,\n  createArrayReducer,\n} from './utils/reducerFactories'\n\nimport modalReducers from './utils/modalReducer'\n\n\nconst rowsInCategoriesReducer = (state, action) => {\n  if (!action || !action.categoryName || !action.rows) {\n    return state || []\n  }\n\n  return state.map((category) => {\n    if (category.categoryName !== action.categoryName) {\n      return category\n    }\n\n    let updatedRows\n    switch (action.type) {\n      case 'SET_ROWS': {\n        updatedRows = [...action.rows]\n        break\n      }\n      case 'ADD_ROWS': {\n        const existingNames = category.rows.map((row) => row.name)\n        updatedRows = [...category.rows, ...action.rows.filter((row) => !existingNames.includes(row.name))]\n        break\n      }\n      default:\n        updatedRows = category.rows\n    }\n\n    const result = {\n      ...category,\n      rows: updatedRows,\n    }\n    return result\n  })\n}\n\n\nconst selectedRowNamesByCategoryNameReducer = (state, action) => {\n  if (!action || !action.categoryName || !Array.isArray(action.selectedRowNames)) {\n    return state || {}\n  }\n\n  const previousList = state[action.categoryName] || []\n  switch (action.type) {\n    case 'SET_SELECTED_ROW_NAMES':\n    case 'ADD_SELECTED_ROW_NAMES':\n    case 'REMOVE_SELECTED_ROW_NAMES': {\n      let updatedList\n      if (action.type === 'SET_SELECTED_ROW_NAMES') {\n        updatedList = Array.from(new Set(action.selectedRowNames)) // make a copy of action.values\n      } else if (action.type === 'ADD_SELECTED_ROW_NAMES') {\n        updatedList = Array.from(new Set([...previousList, ...action.selectedRowNames]))\n      } else {\n        const valuesToRemove = action.selectedRowNames\n        updatedList = previousList.filter((v) => !valuesToRemove.includes(v))\n      }\n\n      return {\n        ...state,\n        [action.categoryName]: updatedList,\n      }\n    }\n    default:\n      console.trace(`Unknown action type: ${action.type}`)\n  }\n\n  return state\n}\n\n\nconst selectedSamplesByCategoryNameAndRowNameReducer = (state, action) => {\n  if (!action || !action.categoryName || (!action.selectedSamplesByRowName && !action.sampleSettingsByRowName)) {\n    return state || {}\n  }\n\n  const categoryObj = state[action.categoryName] || {}\n  const previousSelectedSamplesByRowName = categoryObj.selectedSamples || {}\n  const previousSampleSettingsByRowName = categoryObj.sampleSettings || {}\n  let updatedSelectedSamplesByRowName = previousSelectedSamplesByRowName\n  let updatedSampleSettingsByRowName = previousSampleSettingsByRowName\n\n  switch (action.type) {\n    case 'SET_SELECTED_SAMPLES':\n    case 'ADD_SELECTED_SAMPLES':\n    case 'REMOVE_SELECTED_SAMPLES': {\n      if (action.type === 'SET_SELECTED_SAMPLES') {\n        updatedSelectedSamplesByRowName = { ...previousSelectedSamplesByRowName, ...action.selectedSamplesByRowName }\n      } else if (action.type === 'ADD_SELECTED_SAMPLES') {\n        updatedSelectedSamplesByRowName = Array.from(new Set([\n          ...Object.keys(previousSelectedSamplesByRowName),\n          ...Object.keys(action.selectedSamplesByRowName),\n        ])).reduce((acc, rowName) => {\n          acc[rowName] = Array.from(new Set([...(previousSelectedSamplesByRowName[rowName] || []), ...(action.selectedSamplesByRowName[rowName] || [])]))\n\n          return acc\n        }, {})\n      } else {\n        updatedSelectedSamplesByRowName = Object.keys(previousSelectedSamplesByRowName).reduce((acc, rowName) => {\n          const valuesToRemove = action.selectedSamplesByRowName[rowName] || []\n          const updatedList = (previousSelectedSamplesByRowName[rowName] || []).filter((v) => !valuesToRemove.includes(v))\n          if (updatedList.length > 0) {\n            acc[rowName] = updatedList\n          }\n          return acc\n        }, {})\n      }\n      break\n    }\n\n    case 'UPDATE_SAMPLE_SETTINGS': {\n      updatedSampleSettingsByRowName = { ...previousSampleSettingsByRowName } //make a copy\n      Object.keys(action.sampleSettingsByRowName).forEach((rowName) => {\n        updatedSampleSettingsByRowName[rowName] = action.sampleSettingsByRowName[rowName]\n      })\n      break\n    }\n\n    default: {\n      console.trace(`Unknown action type: ${action.type}`)\n      return state\n    }\n  }\n\n  return {\n    ...state,\n    [action.categoryName]: {\n      selectedSamples: updatedSelectedSamplesByRowName,\n      sampleSettings: updatedSampleSettingsByRowName,\n    },\n  }\n}\n\n// combined reducers\nconst otherReducers = combineReducers(Object.assign({\n  genome: zeroActionsReducer,\n  locus: createSingleValueReducer('UPDATE_LOCUS', ''),\n  rightSideBarLocusList: createArrayReducer('RIGHT_SIDE_BAR_LOCUS_LIST'),\n  leftSideBarLocusList: createArrayReducer('LEFT_SIDE_BAR_LOCUS_LIST'),\n  dataTypesToShow: createArrayReducer('DATA_TYPES_TO_SHOW'),\n  rowsInCategories: rowsInCategoriesReducer,\n  selectedRowNamesByCategoryName: selectedRowNamesByCategoryNameReducer,\n  selectedSamplesByCategoryNameAndRowName: selectedSamplesByCategoryNameAndRowNameReducer,\n  sjOptions: createSingleObjectReducer('UPDATE_SJ_OPTIONS'),\n  vcfOptions: createSingleObjectReducer('UPDATE_VCF_OPTIONS'),\n  bamOptions: createSingleObjectReducer('UPDATE_BAM_OPTIONS'),\n  gcnvOptions: createSingleObjectReducer('UPDATE_GCNV_OPTIONS'),\n  user: createSingleObjectReducer('UPDATE_USER'),\n  initialSettings: createSingleValueReducer('UPDATE_INITIAL_SETTINGS', {}),\n  initialSettingsUrl: createSingleValueReducer('UPDATE_INITIAL_SETTINGS_URL', ''),\n  initialSettingsUrlHasBeenApplied: createSingleValueReducer('UPDATE_INITIAL_SETTINGS_URL_HAS_BEEN_APPLIED', false),\n}, modalReducers))\n\n\nconst rootReducer = (state, action) => {\n  if (action.type === 'RESET_GLOBAL_STATE') {\n    return action.newState\n  }\n\n  const nextState = otherReducers(state, action)\n\n  updateLocalStorageAndUrl(nextState)\n  return nextState\n}\n\n\n/**\n * Initialize and return the Redux store\n * @param rootReducer\n * @param initialState\n * @returns {*}\n */\nexport const createReduxStore = () => {\n\n  const initialState = computeInitialState()\n\n  console.log('Initializing store to:', initialState)\n\n  return createStore(rootReducer, initialState, compose(applyMiddleware(thunkMiddleware)))\n}\n","import React from 'react'\nimport { Provider } from 'react-redux'\n\nimport BaseLayout from './components/BaseLayout'\nimport { createReduxStore } from './redux/rootReducer'\n\nfunction App() {\n  return (\n    <Provider store={createReduxStore()}>\n      <BaseLayout />\n    </Provider>)\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}