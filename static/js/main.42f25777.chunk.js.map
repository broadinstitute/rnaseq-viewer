{"version":3,"sources":["components/SideBarUtils.jsx","components/optionsPanels/ColorPicker.jsx","constants.js","utils/googleAuth.js","redux/selectors.js","components/SelectedDataPanel.jsx","redux/utils/reducerFactories.js","redux/utils/modalReducer.js","components/Modal.jsx","components/EditLocusList.jsx","components/AddRows.jsx","components/SearchRows.jsx","components/LeftSideBar.jsx","components/optionsPanels/BamOptionsPanel.jsx","components/optionsPanels/VcfOptionsPanel.jsx","components/optionsPanels/SpliceJunctionsOptionsPanel.jsx","components/optionsPanels/GcnvOptionsPanel.jsx","components/RightSideBar.jsx","components/About.jsx","components/UserInfo.jsx","components/Header.jsx","utils/throttle.js","components/IGV.jsx","components/LoginAndShowIGV.jsx","components/RequestStatus.jsx","utils/localStorage.js","redux/initialState.js","components/InitialSettingsForm.jsx","components/BaseLayout.jsx","redux/rootReducer.js","App.js","index.js"],"names":["CategoryH3","styled","h3","StyledPopup","Popup","ColorLegendIcon","Icon","OptionDiv","div","OptionInputDiv","OptionInput","input","ColorSwatchBorder","ColorSwatch","attrs","flowing","ColorPicker","props","handleChange","color","setState","handleApply","colorChangedHandler","hex","state","on","position","trigger","style","background","this","content","onChangeComplete","onChange","newColor","React","Component","SJ_MOTIFS","googleSignIn","a","gapi","auth2","getAuthInstance","authInstance","isSignedIn","get","signIn","getGoogleUserEmail","user","currentUser","profile","getBasicProfile","getEmail","getGoogleAccessToken","reloadAuthResponse","getAuthResponse","access_token","getLocus","locus","getRightSideBarLocusList","rightSideBarLocusList","getLeftSideBarLocusList","leftSideBarLocusList","getGenome","genome","getRowsInCategories","rowsInCategories","getSelectedRowNamesByCategoryName","selectedRowNamesByCategoryName","getSelectedSamplesByCategoryNameAndRowName","selectedSamplesByCategoryNameAndRowName","getSjOptions","sjOptions","getVcfOptions","vcfOptions","getBamOptions","bamOptions","getGcnvOptions","gcnvOptions","getUser","getInitialSettingsUrl","initialSettingsUrl","getAllDataTypes","createSelector","reduce","acc","category","rows","forEach","row","data","filter","type","map","dataType","add","Set","getDataTypesUsersCanToggle","dataTypes","size","getEnabledDataTypes","dataTypesToShow","allDataTypes","dataTypesUsersCanToggle","includes","getRowsByCategoryName","categoryName","getSelectedRowsByCategoryName","rowsByCategoryName","Object","entries","selectedRowNames","name","getTracks","selectedRowsByCategoryName","enabledDataTypes","igvTracks","i","junctionsTrack","coverageTrack","j","console","log","url","push","format","label","indexURL","height","trackHeight","min","trackMin","max","trackMax","autoscale","highlightSamples","selectedSamples","sampleName","sampleSettings","onlyHandleClicksForHighlightedSamples","oauthToken","order","rowName","error","minUniquelyMappedReads","minTotalReads","maxFractionMultiMappedReads","minSplicedAlignmentOverhang","minSamplesWithThisJunction","maxSamplesWithThisJunction","minPercentSamplesWithThisJunction","maxPercentSamplesWithThisJunction","minJunctionEndsVisible","thicknessBasedOn","bounceHeightBasedOn","colorBy","colorByNumReadsThreshold","undefined","hideStrand","showOnlyPlusStrand","showOnlyMinusStrand","labelWith","labelWithInParen","hideAnnotatedJunctions","hideAnnotated","hideUnannotatedJunctions","hideUnannotated","hideMotifs","motif","value","indexed","displayMode","endsWith","viewAsPairs","showSoftClips","tracks","searchable","visibilityWindow","SelectedDataCategory","span","DeleteButton","Button","basic","icon","SampleNameText","SamplePanel","sample","hideSample","updateSampleSettings","numSelectedSamplesInRow","whiteSpace","onClick","marginLeft","key","connect","dispatch","updateGcnvOptions","newSettings","updates","hideRow","selectedSamplesByRowName","sampleSettingsByRowNameAndSampleName","result","categoryObj","margin","length","createSingleValueReducer","updateActionType","initialState","debug","reducer","action","newValue","createSingleObjectReducer","newState","createArrayReducer","actionTypeSuffix","Array","isArray","values","valuesToRemove","v","modals","updatesById","shallowCopy","id","obj","createObjectsByIdReducer","getModalOpen","modalName","open","ButtonLink","padding","fontWeight","ContainerDiv","StyledButton","CustomModal","handleClose","doClose","close","handleSave","cloneElement","Modal","isOpen","onClose","Header","title","floated","Content","children","tabIndex","PureComponent","defaultProps","ownProps","e","preventDefault","confirmed","getState","confirmOnClose","confirming","LinkButton","EditLocusListButtonAndModal","render","locusList","setLocusList","newLocusList","textAreaValue","split","Boolean","Form","Field","control","TextArea","minHeight","defaultValue","onKeyUp","target","placeholder","join","EditLocusList","setLocus","ExampleDiv","ExamplePath","SUPPORTED_FILE_EXTENSIONS","AddRowsButtonAndModal","getInitialState","warningMessage","errorMessage","parseTextAreaValueToRows","trim","invalidPaths","newRowsByRowName","dataPath","pathTokens","fileName","matchingExtensions","keys","ext","filePrefix","replace","newRows","handleModalSave","addRows","handleModalClose","fullTitle","fileType","Message","SearchPanelContainer","StyledSearch","Search","INITIAL_STATE","isLoading","results","SearchRows","handleResultSelect","idTokens","getSelectedSamplesForRow","updateSelectedRowNames","updateSelectedSamples","getSelectedRowNames","isRowSelected","getSelectedSamplesByRowName","isSampleSelected","addRowsToHide","resultsByCategoryName","resultsCounter","newResult","_","some","addSamplesToHide","addMatchingSamplesFromRow","inputStringRegExp","dataItemsWithSamples","samples","warn","test","addMatchingRowsAndSamples","matchingRowsByCategoryName","handleSearchChange","setTimeout","RegExp","escapeRegExp","useCategories","resultsArray","item","actionLabel","className","loading","onResultSelect","onFocus","onSearchChange","actionType","CategoryDetails","DataTypeIcon","dataTypeIconColors","junctions","coverage","alignment","vcf","gcnv_bed","default","dataTypeLabels","bed","gff3","gtf","genePred","bigBed","RowColorLabelsContainer","NoWrapDiv","ShowTrackTypesPanel","updateDataTypesToShow","checkBoxes","charAt","toUpperCase","slice","Checkbox","toLocaleString","checked","toLowerCase","RowColorLabelsWithPopup","d","paddingRight","paddingLeft","colSpan","fontSize","marginTop","s","navigator","clipboard","writeText","CategoryPanel","RowsPanel","RowPanel","data-row","RowDetails","description","dangerouslySetInnerHTML","__html","DOMPurify","sanitize","LeftSideBar","updateSjOptions","updateVcfOptions","updateBamOptions","editedFields","keyCode","handleTextInput","parseInt","compact","OptionBox","StyledRadio","Radio","ColorByLegend","width","RightSideBar","AboutLink","href","UserInfo","googleUserEmail","HeaderRow","Grid","Row","Column1","Column","Column2","About","throttle","delay","fn","timerId","args","clearTimeout","IGV_SETTINGS","showIdeogram","showNavigation","showRuler","showCenterGuide","showCursorTrackingGuide","showCommandBar","IGV","setContainerElement","element","container","ref","shouldTrackBeReloaded","track","nextProps","junctionTrackDisplaySettingsChanged","vcfTrackDisplaySettingsChanged","alignmentTrackDisplaySettingsChanged","gcnvTrackDisplaySettingsChanged","gcnvTrackHighlightedSamplesChanged","isEqual","getTrackId","getIgvTrackView","trackId","existingTrackViews","browser","trackViews","existingTrackView","existingTrackConfig","config","reloadRemoveAndAddTracks","nextTrackByTrackName","nextTrack","ignoreNextTrackRemovedEvent","removeTrackByName","loadTrack","locusChangedHandler","trackRemovedHandler","igvBrowserOptions","igv","createBrowser","then","window","igvBrowser","currentIGVLocus","$searchInput","val","nextIGVLocus","search","event","newLocus","trackName","SignInButtonContainer","InfoContainer","LoginAndShowIGV","handleGoogleSignIn","show","userChangedHandler","dataPathCounter","buckets","startsWith","bucket","from","signInError","textAlign","clientId","TGG_VIEWER_CLIENT_ID","theme","buttonText","disabled","onSuccess","onFailure","cookiePolicy","Promise","resolve","load","client","init","scope","discoveryDocs","details","RequestStatus","status","IN_PROGRESS","SUCCEEDED","successMessage","ERROR","NONE","CACHE","DEFAULT_STATE","alignmentShading","KEYS_TO_PERSIST_IN_LOCAL_STORAGE","getStateFromLocalStorage","serializedState","localStorage","getItem","jsonString","LZString","decompress","JSON","parse","err","loadState","KEYS_TO_PERSIST_IN_URL","getStateFromUrlHash","REVERSE_KEY_NAME_LOOKUP","hashString","location","hash","keyValue","keyValueList","jsurl","updateLocalStorageAndUrl","stringify","compress","setItem","saveState","hashKeyValueList","StyledDiv","StyledInput","Input","InitialSettingsForm","loadInitialSettingsUrl","overrideLocalSettings","globalState","updateInitialSettingsUrl","resetGlobalState","stateFromLocalStorage","stateFromUrlHash","Error","isYaml","isJson","isUnknown","fetch","response","ok","statusText","text","fileContents","settings","yaml","safeLoad","filteredSettings","applyInitialSettingsUrl","requestStatus","toString","exportCurrentSettings","EXCLUDED_KEYS","globalStateForExport","encodeURIComponent","textInputValue","align","download","newUrl","SideBarColumn","MiddleColumn","otherReducers","combineReducers","assign","updatedRows","existingNames","previousList","updatedList","trace","previousSelectedSamplesByRowName","previousSampleSettingsByRowNameAndSampleName","updatedSelectedSamplesByRowName","updatedSampleSettingsByRowNameAndSampleName","previousSampleSettingsBySampleName","newSampleSettingsBySampleName","mergedSamplesSettingsBySampleName","mergedSampleSettings","modalReducers","rootReducer","nextState","createReduxStore","computeInitialState","createStore","compose","applyMiddleware","thunkMiddleware","App","store","BaseLayout","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.42f25777.chunk.js","sourcesContent":["import styled from 'styled-components'\nimport { Icon, Popup } from 'semantic-ui-react'\n\nexport const CategoryH3 = styled.h3` \n  display: inline-block;\n  margin: 12px 0px 0px 0px !important;\n`\n\nexport const StyledPopup = styled(Popup)`\n  opacity: 0.95;\n`\n\nexport const ColorLegendIcon = styled(Icon)`\n  margin-top: 5px !important;\n`\n\nexport const OptionDiv = styled.div`\n  padding-top: 3px;\n  z-index: 100000;\n`\n\nexport const OptionInputDiv = styled(OptionDiv)`\n  margin: 10px 0px; \n`\n\nexport const OptionInput = styled.input`\n  display: inline;\n  width: 50px;\n  margin-left: 5px;\n  padding-left: 5px;\n`\n","/* eslint-disable react/require-optimization */\n/* eslint-disable react/destructuring-assignment */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport { SwatchesPicker } from 'react-color'\nimport { Popup } from 'semantic-ui-react'\n\nconst ColorSwatchBorder = styled.div`\n  display: inline-block;\n  cursor: pointer;\n  border-radius: 2px;\n  padding: 1px 2px;\n  background: #fff;\n  box-shadow: 0 0 0 1px rgba(0,0,0,.1);\n`\n\nconst ColorSwatch = styled.div`\n  display: inline-block;\n  cursor: pointer;\n  border-radius: 2px;\n  box-shadow: 0 0 0 1px rgba(0,0,0,.1);\n  width: 10px;\n  height: 12px;\n`\n\nconst StyledPopup = styled(Popup).attrs({ flowing: true })`\n  padding: 0px !important;\n  div {\n    overflow-y: visible !important;\n  }\n`\n\n/*\nconst ApplyButton = styled(Button)`\n  margin-top: 15px !important;\n`\n<div style={{ textAlign: 'center' }}><ApplyButton onClick={() => this.handleApply(this.state.color)}>Apply</ApplyButton></div>\n*/\n\nclass ColorPicker extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = { color: this.props.color }\n  }\n\n  handleChange = (color) => {\n    this.setState({ color })\n  }\n\n  handleApply = (color) => {\n    this.props.colorChangedHandler(color.hex)\n  }\n\n  render() {\n    return (\n      <StyledPopup\n        on=\"click\"\n        position=\"left center\"\n        trigger={\n          <ColorSwatchBorder>\n            <ColorSwatch style={{ background: this.state.color }} />\n          </ColorSwatchBorder>\n        }\n        content={\n          <SwatchesPicker\n            color={this.state.color}\n            onChangeComplete={this.handleApply}\n            onChange={(newColor) => this.setState({ color: newColor })}\n          />\n        }\n      />\n    )\n  }\n}\n\nColorPicker.propTypes = {\n  color: PropTypes.string.isRequired,\n  colorChangedHandler: PropTypes.func.isRequired,\n}\n\nexport default ColorPicker\n","\nexport const SJ_MOTIFS = ['GT/AG', 'CT/AC', 'GC/AG', 'CT/GC', 'AT/AC', 'GT/AT', 'non-canonical']\nexport const SJ_DEFAULT_COLOR_BY_NUM_READS_THRESHOLD = 5\n\nexport const GCNV_DEFAULT_HIGHLIGHT_COLOR = 'blue'\n","/* eslint-disable no-undef */\n\nconst TGG_VIEWER_CLIENT_ID = '61200892608-qphtf65o323setqdcfj4hnf601mmetvs.apps.googleusercontent.com'\n\nexport const initGoogleClient = () => new Promise((resolve) => {\n  if (typeof gapi === 'undefined') {\n    return\n  }\n  // init all gapi modules\n  gapi.load('client:auth2', () => {\n    gapi.client.load('storage', 'v1', () => {\n      gapi.client.init({\n        clientId: TGG_VIEWER_CLIENT_ID,\n        scope: 'https://www.googleapis.com/auth/devstorage.read_only',\n        discoveryDocs: ['https://www.googleapis.com/discovery/v1/apis/storage/v1/rest'],\n      })\n      resolve()\n    })\n  })\n})\n\nexport const isSignedIn = async () => {\n  const authInstance = await gapi.auth2.getAuthInstance()\n  return authInstance.isSignedIn.get()\n}\n\nexport const googleSignIn = async () => {\n  const authInstance = await gapi.auth2.getAuthInstance()\n  if (!authInstance.isSignedIn.get()) {\n    await authInstance.signIn()\n  }\n}\n\nexport const getGoogleUserEmail = async () => {\n  const authInstance = await gapi.auth2.getAuthInstance()\n  const user = authInstance && authInstance.currentUser && authInstance.currentUser.get()\n  const profile = user && user.getBasicProfile()\n  return profile && profile.getEmail()\n}\n\nexport const getGoogleAccessToken = async () => {\n  // use OAuth2 to get an access token for RNA-seq viewer to access the google storage API on behalf of the user\n  const authInstance = await gapi.auth2.getAuthInstance()\n  const user = authInstance && authInstance.currentUser && authInstance.currentUser.get()\n  if (!authInstance.isSignedIn.get()) {\n    user.reloadAuthResponse()\n  }\n  return user.getAuthResponse().access_token\n}\n\nexport const googleSignOut = async () => {\n  const authInstance = await gapi.auth2.getAuthInstance()\n  if (authInstance.isSignedIn.get()) {\n    await authInstance.signOut()\n  }\n}\n\nexport const listGoogleStorageFiles = async (gsPath) => {\n  if (!gsPath.startsWith('gs://')) {\n    console.error(`${gsPath} doesn't start with \"gs://\"`)\n    return []\n  }\n\n  const gsPathParts = gsPath.split('/')\n  if (gsPathParts.length < 3) {\n    console.error(`${gsPath} must be of the form \"gs://bucket-name/...\"`)\n    return []\n  }\n\n  const bucketName = gsPathParts[2]\n  const bucketSubdir = gsPathParts.slice(3).join('/')\n\n  return gapi.client.storage.objects.list({ bucket: bucketName, prefix: bucketSubdir, maxResults: 1000 })\n}\n","/* eslint-disable no-nested-ternary */\n/* eslint-disable object-shorthand */\n/* eslint-disable array-callback-return */\n\nimport { createSelector } from 'reselect'\nimport { getGoogleAccessToken } from '../utils/googleAuth'\nimport { SJ_MOTIFS, SJ_DEFAULT_COLOR_BY_NUM_READS_THRESHOLD, GCNV_DEFAULT_HIGHLIGHT_COLOR } from '../constants'\n\nexport const getLocus = (state) => state.locus\nexport const getRightSideBarLocusList = (state) => state.rightSideBarLocusList\nexport const getLeftSideBarLocusList = (state) => state.leftSideBarLocusList\nexport const getGenome = (state) => state.genome\nexport const getDataTypesToShow = (state) => state.dataTypesToShow\nexport const getRowsInCategories = (state) => state.rowsInCategories\nexport const getSelectedRowNamesByCategoryName = (state) => state.selectedRowNamesByCategoryName\n\nexport const getSelectedSamplesByCategoryNameAndRowName = (state) => state.selectedSamplesByCategoryNameAndRowName\nexport const getSjOptions = (state) => state.sjOptions\nexport const getVcfOptions = (state) => state.vcfOptions\nexport const getBamOptions = (state) => state.bamOptions\nexport const getGcnvOptions = (state) => state.gcnvOptions\nexport const getUser = (state) => state.user\nexport const getInitialSettingsUrl = (state) => state.initialSettingsUrl\n\nexport const getAllDataTypes = createSelector(\n  getRowsInCategories,\n  (rowsInCategories) => {\n    return [...rowsInCategories.reduce((acc, category) => {\n      category.rows.forEach((row) => {\n        if (row.data) {\n          const dataTypes = row.data.filter((data) => data.type).map((data) => data.type)\n          dataTypes.forEach((dataType) => {\n            acc.add(dataType)\n          })\n        }\n      })\n      return acc\n    }, new Set())]\n  })\n\n\nexport const getDataTypesUsersCanToggle = createSelector(\n  getRowsInCategories,\n  (rowsInCategories) => {\n    return [...rowsInCategories.reduce((acc, category) => {\n      category.rows.forEach((row) => {\n        if (row.data) {\n          const dataTypes = row.data.filter((data) => data.type).map((data) => data.type)\n          if (new Set(dataTypes).size >= 2) { // only include data types when a row has more than one data type\n            dataTypes.forEach((dataType) => {\n              acc.add(dataType)\n            })\n          }\n        }\n      })\n      return acc\n    }, new Set())]\n  })\n\nexport const getEnabledDataTypes = createSelector(\n  getAllDataTypes,\n  getDataTypesUsersCanToggle,\n  getDataTypesToShow,\n  (allDataTypes, dataTypesUsersCanToggle, dataTypesToShow) => {\n    return allDataTypes.filter((dataType) => (dataTypesUsersCanToggle.includes(dataType) ? dataTypesToShow.includes(dataType) : true))\n  })\n\nexport const getRowsByCategoryName = createSelector(\n  getRowsInCategories,\n  (rowsInCategories) => {\n    return rowsInCategories.reduce((acc, category) => {\n      return { ...acc, [category.categoryName]: category.rows }\n    }, {})\n  })\n\n\nexport const getSelectedRowsByCategoryName = createSelector(\n  getSelectedRowNamesByCategoryName,\n  getRowsByCategoryName,\n  (selectedRowNamesByCategoryName, rowsByCategoryName) => {\n    return Object.entries(selectedRowNamesByCategoryName).reduce((acc, [categoryName, selectedRowNames]) => {\n      if (!rowsByCategoryName[categoryName]) {\n        return acc\n      }\n      return { ...acc, [categoryName]: rowsByCategoryName[categoryName].filter((row) => selectedRowNames.includes(row.name)) }\n    }, {})\n  })\n\n\nexport const getTracks = createSelector(\n  getSelectedRowsByCategoryName,\n  getSelectedSamplesByCategoryNameAndRowName,\n  getEnabledDataTypes,\n  getSjOptions,\n  getVcfOptions,\n  getBamOptions,\n  getGcnvOptions,\n  (\n    selectedRowsByCategoryName,\n    selectedSamplesByCategoryNameAndRowName,\n    enabledDataTypes,\n    sjOptions,\n    vcfOptions,\n    bamOptions,\n    gcnvOptions,\n  ) => {\n    const igvTracks = []\n\n    Object.entries(selectedRowsByCategoryName).forEach(([categoryName, selectedRows]) => selectedRows.forEach((row, i) => {\n      let junctionsTrack\n      let coverageTrack\n      (row.data || []).forEach((data, j) => {\n        //docs @ https://github.com/igvteam/igv.js/wiki/Wig-Track\n        if (!enabledDataTypes.includes(data.type)) {\n          console.log(`Skipping hidden track: ${data.url}`)\n          return\n        }\n\n        if (data.type === 'gcnv_bed') { // && vcfOptions.showGcnv\n          //docs @ https://github.com/igvteam/igv.js/wiki/Alignment-Track\n          console.log(`Adding ${data.url} track #`)\n\n          igvTracks.push({\n            type: 'gcnv',\n            format: 'gcnv',\n            name: `${row.name} ${data.label || ''}`,\n            url: data.url,\n            indexURL: data.indexURL || `${data.url}.tbi`,\n            height: gcnvOptions.trackHeight,\n            min: gcnvOptions.trackMin,\n            max: gcnvOptions.trackMax,\n            autoscale: gcnvOptions.autoscale,\n            highlightSamples: (((selectedSamplesByCategoryNameAndRowName[categoryName] || {}).selectedSamples || {})[row.name] || []).reduce(\n              (acc, sampleName) => {\n                acc[sampleName] = ((((selectedSamplesByCategoryNameAndRowName[categoryName] || {}).sampleSettings || {})[row.name] || {})[sampleName] || {}).color || GCNV_DEFAULT_HIGHLIGHT_COLOR\n                return acc\n              }, {}),\n            onlyHandleClicksForHighlightedSamples: gcnvOptions.onlyHandleClicksForHighlightedSamples,\n            oauthToken: getGoogleAccessToken,\n            order: i * 100 + j,\n            rowName: row.name,\n            categoryName: categoryName,\n          })\n        }\n        else if (data.type === 'junctions') {\n          if (junctionsTrack) {\n            console.error('More than one \"junctions\" track found in row', row)\n            return\n          }\n\n          junctionsTrack = {\n            type: 'spliceJunctions',\n            format: 'bed',\n            url: data.url,\n            indexURL: data.indexURL || `${data.url}.tbi`,\n            oauthToken: getGoogleAccessToken,\n            order: i * 10,\n            name: row.name,\n            height: sjOptions.trackHeight,\n            minUniquelyMappedReads: sjOptions.minUniquelyMappedReads,\n            minTotalReads: sjOptions.minTotalReads,\n            maxFractionMultiMappedReads: sjOptions.maxFractionMultiMappedReads,\n            minSplicedAlignmentOverhang: sjOptions.minSplicedAlignmentOverhang,\n            minSamplesWithThisJunction: sjOptions.minSamplesWithThisJunction,\n            maxSamplesWithThisJunction: sjOptions.maxSamplesWithThisJunction,\n            minPercentSamplesWithThisJunction: sjOptions.minPercentSamplesWithThisJunction,\n            maxPercentSamplesWithThisJunction: sjOptions.maxPercentSamplesWithThisJunction,\n            minJunctionEndsVisible: sjOptions.minJunctionEndsVisible,\n            thicknessBasedOn: sjOptions.thicknessBasedOn, //options: numUniqueReads (default), numReads, isAnnotatedJunction\n            bounceHeightBasedOn: sjOptions.bounceHeightBasedOn, //options: random (default), distance, thickness\n            colorBy: sjOptions.colorBy, //options: numUniqueReads (default), numReads, isAnnotatedJunction, strand, motif\n            colorByNumReadsThreshold: sjOptions.colorByNumReadsThreshold !== undefined ? sjOptions.colorByNumReadsThreshold : SJ_DEFAULT_COLOR_BY_NUM_READS_THRESHOLD,\n            hideStrand: sjOptions.showOnlyPlusStrand ? '-' : (sjOptions.showOnlyMinusStrand ? '+' : undefined),\n            labelWith: sjOptions.labelWith,\n            labelWithInParen: sjOptions.labelWithInParen,\n            hideAnnotatedJunctions: sjOptions.hideAnnotated,\n            hideUnannotatedJunctions: sjOptions.hideUnannotated,\n            hideMotifs: SJ_MOTIFS.filter((motif) => sjOptions[`hideMotif${motif}`]), //options: 'GT/AG', 'CT/AC', 'GC/AG', 'CT/GC', 'AT/AC', 'GT/AT', 'non-canonical'\n            rowName: row.name,\n            categoryName: categoryName,\n          }\n        }\n        else if (data.type === 'coverage') {\n          if (coverageTrack) {\n            console.error('More than one \"coverage\" track found in row', row)\n            return\n          }\n\n          coverageTrack = {\n            type: 'wig',\n            format: 'bigwig',\n            url: data.url,\n            oauthToken: getGoogleAccessToken,\n            name: row.name,\n            height: sjOptions.trackHeight,\n            order: i * 10 + j,\n            rowName: row.name,\n            categoryName: categoryName,\n          }\n\n          if (data.url.includes('spliceai')) {\n            coverageTrack.color = (value) => {\n              let c\n              if (value < 0.5) {\n                c = 'rgb(180,180,180)'\n              }\n              else if (value < 0.8) {\n                c = 'rgb(180,180,0)'\n              }\n              else {\n                c = 'rgb(200,0,0)'\n              }\n\n              return c\n            }\n          }\n        }\n        else if (['bed', 'gff3', 'gtf', 'genePred', 'genePredExt', 'peaks', 'narrowPeak', 'broadPeak', 'bigBed', 'bedpe'].includes(data.type)) {\n          //docs @ https://github.com/igvteam/igv.js/wiki/Alignment-Track\n          console.log(`Adding ${data.url} ${data.type} track`)\n\n          igvTracks.push({\n            type: 'annotation',\n            format: data.type,\n            name: `${row.name} ${data.label || ''}`,\n            url: data.url,\n            indexURL: data.indexURL || `${data.url}.tbi`,\n            height: 100,\n          })\n        }\n        else if ((data.type === 'vcf' || data.url.includes('.vcf')) && enabledDataTypes.includes('vcf')) {\n          //docs @ https://github.com/igvteam/igv.js/wiki/Alignment-Track\n          console.log(`Adding ${data.url} track #`)\n\n          igvTracks.push({\n            type: 'variant',\n            format: 'vcf',\n            url: data.url,\n            indexURL: data.indexURL || `${data.url}.tbi`,\n            indexed: true,\n            name: `${row.name} ${data.label || 'vcf'}`,\n            displayMode: vcfOptions.displayMode,\n            oauthToken: getGoogleAccessToken,\n            order: i * 100 + j,\n            rowName: row.name,\n            categoryName: categoryName,\n          })\n        }\n        else if (data.type === 'alignment' || data.url.includes('.bam') || data.url.includes('.cram')) {\n          //docs @ https://github.com/igvteam/igv.js/wiki/Alignment-Track\n          console.log(`Adding ${data.url} track #`)\n\n          igvTracks.push({\n            type: 'alignment',\n            url: data.url,\n            indexURL: data.indexURL || (`${data.url}`.endsWith('cram') ? `${data.url}.crai` : `${data.url}`.endsWith('bam') ? `${data.url}.bai` : null),\n            indexed: true,\n            name: `${row.name} ${data.label || 'bam'}`,\n            height: bamOptions.trackHeight,\n            colorBy: bamOptions.colorBy,\n            viewAsPairs: bamOptions.viewAsPairs,\n            showSoftClips: bamOptions.showSoftClips,\n            oauthToken: getGoogleAccessToken,\n            order: i * 100 + j,\n            rowName: row.name,\n            categoryName: categoryName,\n          })\n        }\n      })\n\n      if (coverageTrack && junctionsTrack) {\n        console.log(`Adding ${junctionsTrack.url} & ${coverageTrack.url} track`)\n        igvTracks.push({\n          type: 'merged',\n          name: junctionsTrack.name,\n          height: sjOptions.trackHeight,\n          tracks: [coverageTrack, junctionsTrack],\n          order: i * 10 + 2,\n          rowName: row.name,\n          categoryName: categoryName,\n        })\n      } else if (junctionsTrack) {\n        console.log(`Adding ${junctionsTrack.url} track`)\n        igvTracks.push(junctionsTrack)\n      } else if (coverageTrack) {\n        console.log(`Adding ${coverageTrack.url} track`)\n        igvTracks.push(coverageTrack)\n      }\n    }))\n\n    igvTracks.push({\n      name: 'Gencode v32 Genes',\n      format: 'refgene',\n      url: 'gs://tgg-viewer/ref/GRCh38/gencode_v32/gencode_v32_knownGene.sorted.txt.gz',\n      indexURL: 'gs://tgg-viewer/ref/GRCh38/gencode_v32/gencode_v32_knownGene.sorted.txt.gz.tbi',\n      indexed: true,\n      searchable: true,\n      height: 350,\n      visibilityWindow: -1,\n      displayMode: 'EXPANDED',\n      order: 1000001,\n      color: 'rgb(76,171,225)',\n      oauthToken: getGoogleAccessToken,\n    })\n\n    return igvTracks\n  },\n)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Button, Icon } from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport ColorPicker from './optionsPanels/ColorPicker'\nimport { GCNV_DEFAULT_HIGHLIGHT_COLOR } from '../constants'\nimport { getSelectedSamplesByCategoryNameAndRowName } from '../redux/selectors'\n\nconst SelectedDataCategory = styled.span`\n  margin: 10px 0px 8px 0px;\n  font-style: italic;\n`\n\nconst DeleteButton = styled(Button).attrs({ basic: true, icon: true })`\n  padding: 0px !important;\n  box-shadow: none !important;\n`\n\nconst SampleNameText = styled.span`\n  word-wrap: break-word;\n  word-break: break-all;  \n  white-space: normal;\n`\n\nconst SamplePanel = ({ categoryName, rowName, sample, sampleSettings, hideSample, updateSampleSettings, numSelectedSamplesInRow }) => (\n  <div style={{ whiteSpace: 'nowrap' }}>\n    <DeleteButton onClick={() => hideSample(categoryName, rowName, sample, numSelectedSamplesInRow)}>\n      <Icon name=\"delete\" />\n    </DeleteButton>\n    <SampleNameText>{sample}</SampleNameText>\n    <span style={{ marginLeft: '8px' }}>\n      <ColorPicker\n        key={sampleSettings.color}\n        color={sampleSettings.color || GCNV_DEFAULT_HIGHLIGHT_COLOR}\n        colorChangedHandler={(newColor) => updateSampleSettings(categoryName, rowName, sample, { color: newColor })}\n      />\n    </span>\n  </div>)\n\n\nSamplePanel.propTypes = {\n  categoryName: PropTypes.string,\n  rowName: PropTypes.string,\n  sample: PropTypes.string,\n  sampleSettings: PropTypes.object,\n  hideSample: PropTypes.func,\n  updateSampleSettings: PropTypes.func,\n  numSelectedSamplesInRow: PropTypes.number,\n}\n\nconst SelectedDataPanel = ({ selectedSamplesByCategoryNameAndRowName, hideRow, hideSample, updateSampleSettings }) => {\n  const result = []\n  Object.entries(selectedSamplesByCategoryNameAndRowName).forEach(([categoryName, categoryObj]) => {\n    Object.entries(categoryObj.selectedSamples || {}).forEach(([rowName, selectedSamples]) => {\n      result.push(\n        <div key={`${categoryName}!!${rowName}`}>\n          <div style={{ whiteSpace: 'nowrap', margin: '15px 0px 7px 0px' }}>\n            {\n              /*<DeleteButton onClick={() => hideRow(categoryName, rowName)}>\n                <Icon name=\"delete\" />\n              </DeleteButton>\n              */\n            }\n            <SelectedDataCategory>{`${categoryName}: ${rowName}`}</SelectedDataCategory>\n          </div>\n          {\n            selectedSamples.map((sample) => (\n              <SamplePanel\n                key={sample}\n                categoryName={categoryName}\n                rowName={rowName}\n                sample={sample}\n                sampleSettings={((categoryObj.sampleSettings || {})[rowName] || {})[sample] || {}}\n                hideRow={hideRow}\n                hideSample={hideSample}\n                updateSampleSettings={updateSampleSettings}\n                numSelectedSamplesInRow={selectedSamples.length}\n              />),\n            )\n          }\n        </div>)\n    })\n  })\n\n  return result.length > 0 ? result : null\n}\n\nSelectedDataPanel.propTypes = {\n  selectedSamplesByCategoryNameAndRowName: PropTypes.object,\n  hideRow: PropTypes.func,\n  hideSample: PropTypes.func,\n  updateSampleSettings: PropTypes.func,\n}\n\n\nconst mapStateToProps = (state) => ({\n  selectedSamplesByCategoryNameAndRowName: getSelectedSamplesByCategoryNameAndRowName(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateGcnvOptions: (newSettings) => {\n    dispatch({\n      type: 'UPDATE_GCNV_OPTIONS',\n      updates: newSettings,\n    })\n  },\n  hideRow: (categoryName, rowName) => {\n    dispatch({\n      type: 'REMOVE_SELECTED_ROW_NAMES',\n      categoryName,\n      selectedRowNames: [rowName],\n    })\n  },\n  hideSample: (categoryName, rowName, sample, numSelectedSamplesInRow) => {\n    if (numSelectedSamplesInRow <= 1) {\n      // if the last sample is being hidden, hide the row as well\n      dispatch({\n        type: 'REMOVE_SELECTED_ROW_NAMES',\n        categoryName,\n        selectedRowNames: [rowName],\n      })\n    }\n\n    dispatch({\n      type: 'REMOVE_SELECTED_SAMPLES',\n      categoryName,\n      selectedSamplesByRowName: {\n        [rowName]: [sample],\n      },\n    })\n  },\n  updateSampleSettings: (categoryName, rowName, sample, newSettings) => {\n    dispatch({\n      type: 'UPDATE_SAMPLE_SETTINGS',\n      categoryName,\n      sampleSettingsByRowNameAndSampleName: {\n        [rowName]: {\n          [sample]: newSettings,\n        },\n      },\n    })\n  },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectedDataPanel)\n","/**\n * Redux reducers take a 'state' object representing the current application\n * state, and an 'action' object specifying some change to that state.\n * They apply the change and return the updated 'state' object.\n * For more details, see: http://redux.js.org/docs/basics/Reducers.html\n *\n * This module provides generic reducers that can be used to manage the following common types of\n * state shapes:\n *\n * { ... } - zero actions - arbitrary state shape that doesn't change after it's initialized, so\n *          this reducer doesn't perform any actions.\n *\n * value - single value - reducer supports 1 action that replaces the value with a new value.\n *\n * { key1: value1, key2: value2 .. } - single object - reducer supports 1 action that allows\n *          changing the values of one or more keys.\n *\n * { id1: { key1: value1, key2: value2, .. },\n *   id2: { key1: value1, key2: value2, .. },\n *   id3: ... }  -  objects by id - reducer supports several actions:\n *          adding or deleting objects by id, and updating the values within one or more objects\n *          specified by id.\n *\n *\n * ==========\n * Additional state shapes that may be implemnted as needed:\n *\n * { id1: value1, id2: value2 .. } - values by id - reducer supports several actions:\n *          adding or deleting values by id, and replacing one or more values by id.\n *\n * [ value1, value2, .. ] - single array - supports actions that add and remove values from the array\n *\n * { id1: [ value1, value2, .. ]\n *   id2: [ value1, value2, .. ] - arrays by id\n */\n\n/**\n * Reducer that can be used to manage any state that doesn't change after it's initialized.\n */\nexport const zeroActionsReducer = (state = {}) => {\n  return state\n}\n\n/**\n * Factory function that creates a reducer for managing any state object that's treated as a single\n * atomic value, where the only supported modification is to replace this value with a new value.\n *\n * As an example use case, lets say an app has one or more on/off toggles. Each of these toggles is\n * bound to a single state variable: 'isOn' which is either true or false.\n *\n * This function can be used to create the reducer(s) for managing a toggle's state:\n *\n * const rootReducer = combineReducers({\n *        toggleA: createSingleValueReducer('UPDATE_TOGGLE_A'),\n *        toggleB: createSingleValueReducer('UPDATE_TOGGLE_B'),\n *        ...\n *      })\n *\n * Here, the argument 'UPDATE_TOGGLE_A' specifies the action type that will later be dispatched\n * to update that toggle's state. For example, to set a toggle to \"off\":\n *\n * dispatch({\n *      type: 'UPDATE_TOGGLE_A',\n *      newValue: false,\n * })\n *\n * @param updateActionType (string) action.type that will later be used to replace the state with a\n * new state.\n */\nexport const createSingleValueReducer = (updateActionType, initialState, debug = false) => {\n  const reducer = (state = initialState, action) => {\n    if (!action) {\n      return state\n    }\n\n    switch (action.type) {\n      case updateActionType: {\n        if (action.newValue === undefined) {\n          console.error(`Invalid ${updateActionType} action: action.newValue is undefined: `, action)\n          return state\n        }\n        if (debug) {\n          console.log('singleValueReducer: applying action: ', action, 'State changing from ', state, ' to ', action.newValue)\n        }\n        return action.newValue\n      }\n      default:\n        return state\n    }\n  }\n\n  return reducer\n}\n\n\n/**\n * Factory function that creates a reducer for managing a state object with some fixed set of keys.\n * The reducer supports an 'UPDATE' action that can be used to set one or more\n * of these keys to new values.\n *\n * As an example use case, lets say an app displays several instances of a widget whose state\n * consists of this state object:\n *\n *    { isVisible: true, size: 5, names:  ['bob', 'gary', .. ], ... }\n *\n * This function can be used to create a reducer for this state:\n *\n *    const widgetReducer = createSingleObjectReducer('UPDATE_WIDGET')\n *\n * Here, the argument 'UPDATE_WIDGET' specifies the action type that will later be dispatched to\n * update the widget's state.\n *\n * After this, an action with type 'UPDATE_WIDGET' can be dispatched:\n *\n *    dispatch({\n *      type: 'UPDATE_WIDGET',\n *      updates: { isVisible: false, names: ['jim', 'liza'] }\n *    })\n *\n * which will cause the state object to be updated to:\n *\n *    { isVisible: false, size: 5, names:  ['jim', 'liza'], ... }\n *\n * These reducers can also be used with combineReducers(..):\n *\n *    const rootReducer = combineReducers({\n *        widget1: createSingleObjectReducer('UPDATE_WIDGET1'),\n *        widget2: createSingleObjectReducer('UPDATE_WIDGET2'),\n *        other: ..,\n *        ..\n *    })\n *\n * @param updateActionType (string) action.type that will later be used to update the state object.\n */\nexport const createSingleObjectReducer = (updateActionType, initialState = {}, debug = false) => {\n  const reducer = (state = initialState, action) => {\n    if (!action) {\n      return state\n    }\n\n    switch (action.type) {\n      case updateActionType: {\n        if (action.updates === undefined) {\n          console.error(`Invalid ${updateActionType} action: action.updates is undefined: `, action)\n          return state\n        }\n\n        const newState = { ...state, ...action.updates }\n        if (debug) {\n          console.log('singleObjectReducer: applying action: ', action, 'State changing from ', state, ' to ', newState)\n        }\n        return newState\n      }\n      default:\n        return state\n    }\n  }\n\n  return reducer\n}\n\n\n/**\n * Factory function that creates a reducer for managing an array of items.\n * The reducer supports 'ADD' and 'REMOVE' actions for adding/removing one or more items from the array.\n * It also supports a 'SET' action that replaces the existing array with a new one (or can be used to set\n * it to an empty array).\n *\n * An example use case is a list of track names in IGV:\n *\n *    [ 'Sample1', 'Sample2']\n *\n * This function can be used to create a reducer for this state:\n *\n *    const samplesReducer = createArrayReducer('SAMPLES', [ 'Sample1', 'Sample2'])\n *\n * Here, the argument 'SAMPLES' means the reducer will support the following action types:\n *    'ADD_SAMPLES'     (to add one or more samples to the end of the list)\n *    'REMOVE_SAMPLES'  (to remove or more samples from the list)\n *    'SET_SAMPLES'     (to replace existing samples with a new array of 0 or more samples)\n *\n * After this, an 'ADD_SAMPLES' action can be dispatched as follows:\n *\n *    dispatch({\n *      type: 'ADD_SAMPLES',\n *      values: ['Sample3', 'Sample4']\n *    })\n *\n * which will cause the state object to be updated to:\n *\n *    [ 'Sample1', 'Sample2', 'Sample3', 'Sample4']\n *\n * These reducers can also be used with combineReducers(..):\n *\n *    const rootReducer = combineReducers({\n *        samples: createArrayReducer('SAMPLES', ['Sample1', 'Sample2']),\n *        tags: createArrayReducer('TAGS'),\n *        other: ..,\n *        ..\n *    })\n *\n * @param updateActionType (string) action.type that will later be used to update the state object.\n */\nexport const createArrayReducer = (actionTypeSuffix, initialState = [], debug = false) => {\n  const reducer = (state = initialState, action) => {\n    if (!action) {\n      return state\n    }\n\n    switch (action.type) {\n      case `SET_${actionTypeSuffix}`:\n      case `ADD_${actionTypeSuffix}`:\n      case `REMOVE_${actionTypeSuffix}`: {\n        if (!Array.isArray(action.values)) {\n          console.error(`Invalid ${action.type} action: action.values is undefined or not an array: `, action)\n          return state\n        }\n\n        let newState\n        if (action.type === `SET_${actionTypeSuffix}`) {\n          newState = [...action.values] // make a copy of action.values\n        } else if (action.type === `ADD_${actionTypeSuffix}`) {\n          newState = [...state, ...action.values]\n        } else {\n          const valuesToRemove = action.values\n          newState = state.filter((v) => !valuesToRemove.includes(v))\n        }\n\n        if (debug) {\n          console.log('createArrayReducer: applying action: ', action, 'State changing from ', state, ' to ', newState)\n        }\n        return newState\n      }\n\n      default:\n        return state\n    }\n  }\n\n  return reducer\n}\n\n/**\n * Factory function that creates a reducer for managing a state object that looks like:\n *\n * { id1: { key1: valueA, key2: valueB, key3: valueC },\n *   id2: { key1: valueI, key2: valueJ, key3: valueK },\n *   id3: ...\n * }\n *\n * This state object is analogous to a database table, where the contained objects represent table\n * rows and have identical sets of keys but different values, so that each key can be thought of as\n * a column in the table.\n *\n * This reducer supports a single action type that can be used to transform the underlying state\n * in several ways:\n *    - adding new objects by id\n *    - deleting objects by id\n *    - updating the values within one or more existing objects by id\n *\n * As an example, the reducer can be created as follows:\n *\n *      const tableRowReducer = createObjectsByIdReducer('UPDATE_TABLE_X')\n *\n * Here, the 'UPDATE_TABLE_X' argument specifies the action type that will later be dispatched\n * to perform modifications. For example, the action below will change some of the values and also\n * both delete some ids and add some new ids:\n *\n * dispatch({\n *   type: 'UPDATE_TABLE_X',\n *   updatesById: {\n *     id1: { key2: valueM },                                 // update key2 value in object with id1\n *     idNew: { key1: valueX, key2: valueY, key3: valueZ },   // add new object and id\n *     id2: null,                                             // delete id2\n *   }\n *  })\n *\n * The resulting state after this action would look like:\n *\n * { id1: { key1: valueA, key2: valueM, key3: valueC },\n *   idNew: { key1: valueX, key2: valueY, key3: valueZ },\n *   id3: ...\n * }\n *\n * @param updateStateActionId (string) action.type that will later be used to update the state object.\n */\nexport const createObjectsByIdReducer = (updateActionType, key, initialState = {}, debug = false) => {\n  const reducer = (state = initialState, action) => {\n    if (!action) {\n      return state\n    }\n\n    switch (action.type) {\n      case updateActionType: {\n        if (action.updatesById === undefined) {\n          console.error(`Invalid ${updateActionType} action. action.updatesById is undefined: `, action)\n          return state\n        }\n        let updates = action.updatesById\n        if (key) {\n          if (!(key in updates)) {\n            return state\n          }\n          updates = updates[key]\n        }\n        const shallowCopy = { ...state }\n        Object.entries(updates).forEach(([id, obj]) => {\n          if (obj == null) {\n            // if the id is mapped to a null or undefined value, then delete this id\n            delete shallowCopy[id]\n          } else if (shallowCopy[id]) {\n            shallowCopy[id] = { ...shallowCopy[id], ...obj }\n          } else {\n            shallowCopy[id] = { ...obj }\n          }\n        })\n\n        if (debug) {\n          console.log('objectsByIdReducer: applying action: ', action, 'State changing from: ', state, ' to ', shallowCopy)\n        }\n        return shallowCopy\n      }\n      default:\n        return state\n    }\n  }\n\n  return reducer\n}\n\n\n/**\n * Factory function that creates a reducer for managing a state object that looks like:\n *\n * {\n *    loading: false,\n *    error: null,\n * }\n *\n * This state object encapsulates an entity type that is fetched from the server\n *\n * This reducer supports a two action types:\n * 1) A request action that sets the state to loading\n * 2) A receive action that indicates the loading has completed\n *\n * @param requestActionType (string) action.type representing a \"request\" event\n * @param receiveActionType (string) action.type representing a \"receive\" event\n */\nexport const loadingReducer = (requestActionType, receiveActionType, initialState = { isLoading: false, errorMessage: null }, debug = false) => {\n  const reducer = (state = initialState, action) => {\n    switch (action.type) {\n      case requestActionType:\n        if (debug) {\n          console.log(`fetchObjectsReducer: applying action: ${action.type}. State changing to loading`)\n        }\n        return { ...state, isLoading: true }\n\n      case receiveActionType:\n        if (debug) {\n          console.log(`fetchObjectsReducer: applying action: ${action.type}. State changing to received: ${action.byGuid}`)\n        }\n        return { ...state, isLoading: false, errorMessage: action.error }\n\n      default:\n        return state\n    }\n  }\n  return reducer\n}\n","import { createObjectsByIdReducer } from './reducerFactories'\n\n\n// actions\nconst UPDATE_MODAL_STATE = 'UPDATE_MODAL_STATE'\n\n// action creators\nexport const openModal = (modalName) => (dispatch) => (\n  dispatch({ type: UPDATE_MODAL_STATE, updatesById: { [modalName]: { open: true } } })\n)\n\nexport const closeModal = (modalName, confirmed) => (dispatch, getState) => {\n  if (getState().modals[modalName].confirmOnClose && !confirmed) {\n    dispatch({ type: UPDATE_MODAL_STATE, updatesById: { [modalName]: { confirming: true } } })\n  } else {\n    dispatch({ type: UPDATE_MODAL_STATE, updatesById: { [modalName]: { open: false, confirming: false, confirmOnClose: null } } })\n  }\n}\n\n// root reducer\nexport default {\n  modals: createObjectsByIdReducer(UPDATE_MODAL_STATE),\n}\n\n// basic selectors\nexport const getModalOpen = (state, modalName) => state.modals[modalName] && state.modals[modalName].open\n","/* eslint-disable react/destructuring-assignment */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport { Button, Modal, Icon } from 'semantic-ui-react'\n\nimport { getModalOpen, openModal, closeModal } from '../redux/utils/modalReducer'\n\nexport const ButtonLink = styled(Button).attrs({ basic: true })`\n  &.ui.button.basic {\n    white-space: nowrap;\n    border: none;\n    padding: ${(props) => props.padding || 0};\n    color: ${(props) => props.color || '#4183C4'} !important;\n    text-decoration: none;\n    font-weight: ${(props) => props.fontWeight || 'inherit'};\n    box-shadow: none !important;\n    user-select: auto;\n    \n    &:hover, &:focus, &:active {\n      color: #1e70bf !important;\n      background: transparent !important;\n    }\n    \n    &[class*=\"right labeled\"].icon {\n      padding-left: 0 !important;\n      padding-right: 2.1em !important;\n      \n      > .icon {\n        background-color: initial;\n      }\n    }\n  }\n`\n\nconst ContainerDiv = styled.div`\n  float: right;\n  padding: 0px 20px 20px 20px;\n`\n\nconst StyledButton = styled(Button)`\n  margin-left: 10px !important;\n  width: 100px;\n`\n\n\nclass CustomModal extends React.PureComponent\n{\n  handleClose = () => {\n    let doClose = true\n    if (this.props.handleClose) {\n      doClose = this.props.handleClose()\n    }\n    if (doClose) {\n      this.props.close()\n    }\n  }\n\n  handleSave = () => {\n    let doClose = true\n    if (this.props.handleSave) {\n      doClose = this.props.handleSave()\n    }\n    if (doClose) {\n      this.props.close()\n    }\n  }\n\n  render() {\n    const trigger = this.props.trigger ? React.cloneElement(this.props.trigger, { onClick: this.props.open }) : null\n    return (\n      <Modal open={this.props.isOpen} trigger={trigger} onClose={this.handleClose} size={this.props.size}>\n        <Modal.Header>\n          {this.props.title}\n          <ButtonLink floated=\"right\" onClick={this.handleClose} icon={<Icon name=\"remove\" color=\"grey\" />} />\n        </Modal.Header>\n        <Modal.Content>\n          {this.props.children}\n        </Modal.Content>\n        <ContainerDiv>\n          <StyledButton tabIndex={0} onClick={this.handleClose} type=\"button\">Cancel</StyledButton>\n          <StyledButton tabIndex={0} onClick={this.handleSave} type=\"submit\" color=\"blue\">{ this.props.handleSave ? 'Save' : 'Ok' }</StyledButton>\n        </ContainerDiv>\n      </Modal>\n    )\n  }\n}\n\nCustomModal.defaultProps = {\n  size: 'small',\n}\n\nCustomModal.propTypes = {\n  trigger: PropTypes.node,\n  title: PropTypes.string,\n  handleSave: PropTypes.func,\n  handleClose: PropTypes.func,\n  size: PropTypes.oneOf(['small', 'large', 'fullscreen']),\n  isOpen: PropTypes.bool,\n  open: PropTypes.func,\n  close: PropTypes.func,\n  children: PropTypes.node,\n}\n\n\nconst mapStateToProps = (state, ownProps) => ({\n  isOpen: getModalOpen(state, ownProps.modalName),\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    open: (e) => {\n      e.preventDefault()\n      dispatch(openModal(ownProps.modalName))\n    },\n    close: () => {\n      dispatch(closeModal(ownProps.modalName, true))\n    },\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomModal)\n","/* eslint-disable react/jsx-one-expression-per-line */\n/* eslint-disable react/no-array-index-key */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport { Form, TextArea } from 'semantic-ui-react'\nimport Modal from './Modal'\n\nconst LinkButton = styled.a`\n  cursor: pointer;\n`\n\nclass EditLocusListButtonAndModal extends React.PureComponent {\n\n  constructor(props) {\n    super(props)\n\n    const {\n      locusList,\n    } = this.props\n\n    this.textAreaValue = (locusList || []).join('\\n') // TextArea refs don't work - probably because its a pure component, so use this hack\n  }\n\n  render = () => {\n    const {\n      locusList,\n      name,\n      setLocusList,\n    } = this.props\n\n    const title = `Locus List - ${name}`\n\n    return (\n      <Modal\n        title={title}\n        size=\"large\"\n        modalName={title}\n        trigger={\n          <LinkButton>\n            {\n              (locusList || []).length > 0\n                ? <div><br />Edit Locus List</div>\n                : <div>Add Locus List To Side Bar</div>\n            }\n          </LinkButton>\n        }\n        handleSave={() => {\n          const newLocusList = this.textAreaValue.split(/[,\\s]+/).filter(Boolean)\n          setLocusList(newLocusList)\n\n          return true\n        }}\n      >\n        <Form>\n          <Form.Field\n            control={TextArea}\n            style={{ minHeight: '300px' }}\n            defaultValue={this.textAreaValue}\n            onKeyUp={(e) => { this.textAreaValue = e.target.value }}\n            placeholder=\"Enter genomic positions, intervals, and/or gene names separated by commas, spaces, or new lines. &#10;\n              These can be in any format recognized by the IGV search bar. &#10;\n              For example: DMD, ENST00000589830, chr1:55516888, 2:152341851-152591002\"\n          />\n        </Form>\n        <br />\n        <b><i>NOTE:</i></b> This locus list will be saved across page refreshes in this browser, &nbsp;\n        but will not be recorded in the page url like other settings.&nbsp;\n        Sharing or bookmarking this page won&apos;t include the contents of this list.\n      </Modal>)\n  }\n}\n\nEditLocusListButtonAndModal.propTypes = {\n  name: PropTypes.string,\n  locusList: PropTypes.array,\n  setLocusList: PropTypes.func,\n}\n\nconst EditLocusList = ({ name, locusList, setLocus, setLocusList }) => (\n  <div>\n    {\n      locusList.map((locus, i) => <div key={`${locus} ${i}`}>{i + 1}. &nbsp; <LinkButton onClick={() => { setLocus(locus) }}>{locus}</LinkButton></div>)\n    }\n    <EditLocusListButtonAndModal name={name} locusList={locusList} setLocusList={setLocusList} />\n  </div>)\n\n\nEditLocusList.propTypes = {\n  name: PropTypes.string,\n  locusList: PropTypes.array,\n  setLocus: PropTypes.func,\n  setLocusList: PropTypes.func,\n}\n\nexport default EditLocusList\n","/* eslint-disable react/jsx-one-expression-per-line */\n/* eslint-disable react/self-closing-comp */\n/* eslint-disable object-shorthand */\n/* eslint-disable no-else-return */\n/* eslint-disable react/no-array-index-key */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport { Form, Icon, Message, Popup, TextArea } from 'semantic-ui-react'\n\nimport Modal from './Modal'\n\nconst LinkButton = styled.a`\n  cursor: pointer;\n  padding: 10px 10px 10px 0px;\n  display: inline-block;\n`\n\nconst ExampleDiv = styled.div`\n  font-family: monospace;\n  margin: 20px 30px;\n  padding: 10px;\n  background-color: #F7F7F7;\n  white-space: nowrap;\n`\n\nconst ExamplePath = styled.span`\n  font-family: monospace;\n  background-color: #F7F7F7;\n`\n\nconst StyledPopup = styled(Popup).attrs({ position: 'right center' })`\n`\n\nexport const SUPPORTED_FILE_EXTENSIONS = {\n  '.bigWig': 'coverage',\n  '.bw': 'coverage',\n  '.junctions.bed': 'junctions',\n  '.spliceJunctions.bed': 'junctions',\n  '.junctions.bed.gz': 'junctions',\n  '.spliceJunctions.bed.gz': 'junctions',\n\n  '.bam': 'bam',\n  '.cram': 'bam',\n\n  '.vcf': 'vcf',\n  '.vcf.gz': 'vcf',\n\n  '.wig': 'wig',\n  '.bedGraph': 'wig',\n\n  '.bed': 'bed',\n  '.bed.gz': 'bed',\n  '.gff3': 'annotation',\n  '.gtf': 'annotation',\n  '.gtf.gz': 'annotation',\n  '.genePred': 'annotation',\n  '.bigBed': 'annotation',\n}\n\n\nclass AddRowsButtonAndModal extends React.PureComponent {\n\n  getInitialState = () => {\n    return {\n      textAreaValue: '',\n      warningMessage: null,\n      errorMessage: null,\n    }\n  }\n\n  constructor(props) {\n    super(props)\n\n    this.state = this.getInitialState()\n  }\n\n  parseTextAreaValueToRows = (textAreaValue) => {\n    if (!textAreaValue.trim()) {\n      return { rows: [], errorMessage: null }\n    }\n\n    let errorMessage = null\n    const invalidPaths = []\n    const dataPaths = textAreaValue.split(/[,\\s]+/).filter(Boolean)\n\n    const newRowsByRowName = dataPaths.reduce((acc, dataPath) => {\n      const pathTokens = dataPath.split('/')\n      const fileName = pathTokens[pathTokens.length - 1]\n      const matchingExtensions = Object.keys(SUPPORTED_FILE_EXTENSIONS).filter((ext) => fileName.endsWith(ext))\n      if (matchingExtensions.length === 0) {\n        invalidPaths.push(dataPath)\n      } else {\n        const ext = matchingExtensions[0]\n        const filePrefix = fileName.replace(ext, '')\n        if (!acc[filePrefix]) {\n          acc[filePrefix] = { data: [] }\n        }\n\n        acc[filePrefix].name = filePrefix\n        acc[filePrefix].data.push(\n          { type: SUPPORTED_FILE_EXTENSIONS[ext], url: dataPath },\n        )\n      }\n      return acc\n    }, {})\n\n    if (invalidPaths.length > 0) {\n      errorMessage = `These paths have file suffixes that are not recognized: ${invalidPaths.join(', ')}`\n    }\n\n    return { newRows: Object.values(newRowsByRowName), errorMessage }\n  }\n\n  handleModalSave = () => {\n    const {\n      addRows,\n    } = this.props\n\n    const {\n      textAreaValue,\n    } = this.state\n\n    const { newRows, errorMessage } = this.parseTextAreaValueToRows(textAreaValue)\n    if (errorMessage) {\n      this.setState({ errorMessage: errorMessage })\n      return false\n    } else {\n      addRows(newRows)\n      this.setState(this.getInitialState())\n      return true\n    }\n  }\n\n  handleModalClose = () => {\n    this.setState(this.getInitialState())\n    return true\n  }\n\n  render = () => {\n    const {\n      title,\n      trigger,\n    } = this.props\n\n    const {\n      textAreaValue,\n      warningMessage,\n      errorMessage,\n    } = this.state\n\n    const fullTitle = `${title} Rows`\n\n    return (\n      <Modal\n        title={fullTitle}\n        size=\"large\"\n        modalName={fullTitle}\n        trigger={trigger}\n        handleSave={this.handleModalSave}\n        handleClose={this.handleModalClose}\n      >\n        <div>\n          Enter google bucket path(s) for data files: &nbsp;\n          <StyledPopup trigger={<Icon style={{ margin: '10px 0px' }} name=\"question circle outline\" />} content={\n            <div>\n              <b>Format</b>:<br />\n              <br />\n              Enter a list of data file paths separated by commas, spaces or new lines. <br />\n              <br />\n              Example:<br />\n              <ExampleDiv>\n                gs://your-bucket/dir/sample-name1.bigWig <br />\n                gs://your-bucket/dir/sample2.bigWig <br />\n                gs://your-bucket/dir/sample-name1.junctions.bed.gz <br />\n                gs://your-bucket/dir/sample-name1.bam <br />\n                gs://your-bucket/dir/sample2.junctions.bed.gz <br />\n              </ExampleDiv>\n              Paths that have the same prefix (eg. <ExamplePath>gs://your-bucket/dir/sample-name1</ExamplePath> above) will be interpreted as different data types from the same sample.<br />\n              The order of paths doesn&apos;t matter.<br />\n              <br />\n              IGV.js track types will be inferred from file extensions as follows:<br />\n              <div style={{ margin: '10px 30px' }}>\n                <table>\n                  <tbody>\n                    <tr><td> <b> File Extension </b> </td><td> <b>IGV.js Track Type</b> </td></tr>\n                    {Object.entries(SUPPORTED_FILE_EXTENSIONS).filter(([ext]) => !ext.endsWith('.bed')).map(\n                      ([ext, fileType], i) => <tr key={`${ext} ${fileType} ${i}`}><td>{ext}</td><td>{fileType}</td></tr>,\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          }\n          />\n          <br />\n        </div>\n        <Form>\n          <TextArea\n            style={{ minHeight: '300px' }}\n            value={textAreaValue}\n            onChange={(e) => {\n              this.setState({ textAreaValue: e.target.value })\n            }}\n            placeholder=\"Enter file path(s)\"\n          >\n          </TextArea>\n        </Form>\n\n        <br />\n        <b><i>NOTE:</i></b> These paths will be saved across page refreshes in this browser, but will not be recorded in the page url like other settings. Sharing or bookmarking this page won&apos;t include these paths.\n        {\n          warningMessage && (\n          <Message color=\"yellow\">\n            {warningMessage}\n          </Message>)\n        }\n        {\n          errorMessage && (\n          <Message color=\"red\">\n            {errorMessage}\n          </Message>)\n        }\n      </Modal>)\n  }\n}\n\nAddRowsButtonAndModal.propTypes = {\n  title: PropTypes.string,\n  addRows: PropTypes.func,\n  trigger: PropTypes.node,\n}\n\n\nconst AddRows = ({ category, addRows }) => (\n  <div>\n    <AddRowsButtonAndModal\n      title={`Add ${category.categoryName}`}\n      categoryName={category.categoryName}\n      addRows={(rows) => addRows(category.categoryName, rows)}\n      trigger={<LinkButton>Add {category.rows.length === 0 ? category.categoryName : null} Rows</LinkButton>}\n    />\n  </div>)\n\n\nAddRows.propTypes = {\n  category: PropTypes.object,\n  addRows: PropTypes.func,\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  addRows: (categoryName, rows) => {\n    dispatch({\n      type: 'ADD_ROWS',\n      categoryName: categoryName,\n      rows: rows,\n    })\n  },\n})\n\nexport default connect(null, mapDispatchToProps)(AddRows)\n","/* eslint-disable react/destructuring-assignment */\n/* eslint-disable react/require-optimization */\n\nimport _ from 'lodash'\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport { Search } from 'semantic-ui-react'\nimport { CategoryH3 } from './SideBarUtils'\nimport {\n  getRowsInCategories,\n  getSelectedRowNamesByCategoryName,\n  getSelectedSamplesByCategoryNameAndRowName,\n} from '../redux/selectors'\n\nconst SearchPanelContainer = styled.div`\n  margin: 5px 0px;\n`\n\nconst StyledSearch = styled(Search)`\n  margin: 13px 0px; \n  .prompt {\n    border-radius: 2px !important;\n    width: 155px;\n  }\n  \n  input {\n      max-width: none !important;\n      padding: 5px !important;\n  }\n  \n  .input {\n    -webkit-box-shadow: 0px 0px 1px 0px rgba(0,0,0) !important;\n    -moz-box-shadow: 0px 0px 1px 0px rgba(0,0,0) !important;\n    box-shadow: 0px 0px 1px 0px rgba(0,0,0) !important;\n  }\n  \n  .results {\n      min-width: max-content;\n  }\n\n  .red-text {\n    .title {\n      color: #CC0000 !important;\n      font-weight: 500 !important;\n     }\n  }\n`\n\nconst MAX_AUTOCOMPLETE_RESULTS = 12\nconst INITIAL_STATE = { isLoading: false, results: [], value: '' }\n\nclass SearchRows extends React.Component {\n\n  constructor() {\n    super()\n    this.state = INITIAL_STATE\n  }\n\n  handleResultSelect = (e, { result }) => {\n    this.setState({ value: '' })\n\n    const idTokens = result.id.split('!!')\n    const action = idTokens[0]\n    const categoryName = idTokens[1]\n    const rowName = idTokens[2]\n    const sampleName = idTokens[3]\n\n    if (sampleName) {\n      if (action === 'ADD') {\n        this.props.updateSelectedRowNames(action, categoryName, [rowName])\n      } else if (this.getSelectedSamplesForRow(categoryName, rowName).length <= 1) {\n        this.props.updateSelectedRowNames(action, categoryName, [rowName])\n      }\n      this.props.updateSelectedSamples(action, categoryName, { [rowName]: [sampleName] })\n    } else {\n      this.props.updateSelectedRowNames(action, categoryName, [rowName])\n    }\n  }\n\n  getSelectedRowNames = (categoryName) => (this.props.selectedRowNamesByCategoryName[categoryName] || [])\n\n  isRowSelected = (categoryName, rowName) => this.getSelectedRowNames(categoryName).includes(rowName)\n\n  getSelectedSamplesByRowName = (categoryName) => ((this.props.selectedSamplesByCategoryNameAndRowName[categoryName] || {}).selectedSamples || {})\n\n  getSelectedSamplesForRow = (categoryName, rowName) => (this.getSelectedSamplesByRowName(categoryName)[rowName] || [])\n\n  isSampleSelected = (categoryName, rowName, sample) => this.getSelectedSamplesForRow(categoryName, rowName).includes(sample)\n\n  addRowsToHide = (resultsByCategoryName, resultsCounter) => {\n    Object.keys(this.props.selectedRowNamesByCategoryName).forEach((categoryName) => {\n      if (resultsCounter >= MAX_AUTOCOMPLETE_RESULTS) return\n      this.props.selectedRowNamesByCategoryName[categoryName].forEach((rowName) => {\n        if (resultsCounter >= MAX_AUTOCOMPLETE_RESULTS) return\n        resultsByCategoryName[categoryName] = resultsByCategoryName[categoryName] || []\n        const newResult = { action: 'REMOVE', categoryName, rowName }\n        if (!_.some(resultsByCategoryName[categoryName], newResult)) {\n          resultsByCategoryName[categoryName].push(newResult)\n          resultsCounter += 1\n        }\n      })\n    })\n\n    return resultsCounter\n  }\n\n  addSamplesToHide = (resultsByCategoryName, resultsCounter) => {\n    Object.keys(this.props.selectedSamplesByCategoryNameAndRowName).forEach((categoryName) => {\n      if (resultsCounter >= MAX_AUTOCOMPLETE_RESULTS) return\n      Object.keys(this.getSelectedSamplesByRowName(categoryName)).forEach((rowName) => {\n        if (resultsCounter >= MAX_AUTOCOMPLETE_RESULTS || !this.isRowSelected(categoryName, rowName)) return\n        this.getSelectedSamplesForRow(categoryName, rowName).forEach((sample) => {\n          if (resultsCounter >= MAX_AUTOCOMPLETE_RESULTS) return\n          resultsByCategoryName[categoryName] = resultsByCategoryName[categoryName] || []\n          const newResult = { action: 'REMOVE', categoryName, rowName, sample }\n          if (!_.some(resultsByCategoryName[categoryName], newResult)) {\n            resultsByCategoryName[categoryName].push(newResult)\n            resultsCounter += 1\n          }\n        })\n      })\n    })\n\n    return resultsCounter\n  }\n\n  addMatchingSamplesFromRow = (categoryName, row, inputStringRegExp, resultsByCategoryName, resultsCounter) => {\n    if (!row.data) {\n      return resultsCounter\n    }\n\n    const dataItemsWithSamples = row.data.filter((data) => data.samples && data.samples.length > 0)\n    if (dataItemsWithSamples.length > 1) {\n      console.warn('Found row with multiple data items each of which has a samples array. This may behave unexpectedly if there are duplicate samples')\n    }\n\n    //add samples with matching names\n    dataItemsWithSamples.forEach((data) => {\n      (data.samples || []).forEach((sample) => {\n        if (resultsCounter >= MAX_AUTOCOMPLETE_RESULTS) return\n        if (inputStringRegExp.test(sample)) {\n          resultsByCategoryName[categoryName] = resultsByCategoryName[categoryName] || []\n          const newResult = {\n            action: this.isRowSelected(categoryName, row.name) && this.isSampleSelected(categoryName, row.name, sample) ? 'REMOVE' : 'ADD',\n            categoryName,\n            rowName: row.name,\n            sample,\n          }\n          if (!_.some(resultsByCategoryName[categoryName], newResult)) {\n            resultsByCategoryName[categoryName].push(newResult)\n            resultsCounter += 1\n          }\n        }\n      })\n    })\n\n    return resultsCounter\n  }\n\n  addMatchingRowsAndSamples = (inputStringRegExp, resultsByCategoryName, resultsCounter) => {\n    const matchingRowsByCategoryName = {} //used later to add samples from this row\n    this.props.rowsInCategories.forEach((category) => {\n      if (resultsCounter >= MAX_AUTOCOMPLETE_RESULTS) return\n      const { categoryName } = category\n      category.rows.forEach((row) => {\n        if (resultsCounter >= MAX_AUTOCOMPLETE_RESULTS) return\n        //add rows with matching names\n        if (inputStringRegExp.test(row.name)) {\n          matchingRowsByCategoryName[categoryName] = matchingRowsByCategoryName[categoryName] || []\n          matchingRowsByCategoryName[categoryName].push(row)\n\n          resultsByCategoryName[categoryName] = resultsByCategoryName[categoryName] || []\n          const newResult = {\n            action: this.isRowSelected(categoryName, row.name) ? 'REMOVE' : 'ADD',\n            categoryName,\n            rowName: row.name,\n          }\n          if (!_.some(resultsByCategoryName[categoryName], newResult)) { //avoid duplicates\n            resultsByCategoryName[categoryName].push(newResult)\n            resultsCounter += 1\n          }\n        }\n\n        resultsCounter = this.addMatchingSamplesFromRow(categoryName, row, inputStringRegExp, resultsByCategoryName, resultsCounter)\n\n      })\n    })\n\n    Object.entries(matchingRowsByCategoryName).forEach(([categoryName, rows]) => {\n      if (resultsCounter >= MAX_AUTOCOMPLETE_RESULTS) return\n      resultsByCategoryName[categoryName] = resultsByCategoryName[categoryName] || []\n      rows.forEach((row) => {\n        if (resultsCounter >= MAX_AUTOCOMPLETE_RESULTS) return\n        resultsCounter = this.addMatchingSamplesFromRow(categoryName, row, /.*/, resultsByCategoryName, resultsCounter)\n      })\n    })\n\n    return resultsCounter\n  }\n\n  handleSearchChange = (e, { value }) => {\n    this.setState({ isLoading: true, value })\n\n    setTimeout(() => {\n      if (this.state.value.length < 1) {\n        return this.setState(INITIAL_STATE)\n      }\n\n      const inputStringRegExp = new RegExp(_.escapeRegExp(this.state.value), 'i')\n\n      const resultsByCategoryName = {}\n      let resultsCounter = 0\n\n      // search actions\n      if (inputStringRegExp.test('Hide')) {\n        resultsCounter = this.addRowsToHide(resultsByCategoryName, resultsCounter)\n      }\n\n      if (inputStringRegExp.test('Hide') || inputStringRegExp.test('Hide sample')) {\n        // hide samples\n        resultsCounter = this.addSamplesToHide(resultsByCategoryName, resultsCounter)\n      }\n\n      // search rows\n      this.addMatchingRowsAndSamples(inputStringRegExp, resultsByCategoryName, resultsCounter)\n\n      const useCategories = this.props.rowsInCategories.length > 1\n      const results = useCategories ? {} : []\n      Object.keys(resultsByCategoryName).forEach((categoryName) => {\n        if (useCategories) {\n          results[categoryName] = { name: categoryName, results: [] }\n        }\n        const resultsArray = useCategories ? results[categoryName].results : results\n        resultsByCategoryName[categoryName].forEach((item) => {\n          if (item.sample) {\n            const actionLabel = item.action === 'ADD' ? 'Show sample' : 'Hide sample'\n            resultsArray.push({\n              id: `${item.action}!!${categoryName}!!${item.rowName}!!${item.sample}`,\n              title: `${actionLabel} ${item.rowName} > ${item.sample}`,\n              className: item.action !== 'ADD' ? 'red-text' : null,\n            })\n          } else {\n            const actionLabel = item.action === 'ADD' ? 'Show' : 'Hide'\n            resultsArray.push({\n              id: `${item.action}!!${categoryName}!!${item.rowName}`,\n              title: `${actionLabel} ${item.rowName}`,\n              className: item.action !== 'ADD' ? 'red-text' : null,\n            })\n          }\n        })\n      })\n\n      return this.setState({\n        isLoading: false,\n        results,\n      })\n    }, 1)\n  }\n\n  render = () => {\n    const { isLoading, value, results } = this.state\n\n    return (\n      <SearchPanelContainer>\n        <CategoryH3>Select Data</CategoryH3>\n        <StyledSearch\n          category={this.props.rowsInCategories.length > 1}\n          loading={isLoading}\n          onResultSelect={this.handleResultSelect}\n          onFocus={this.handleSearchChange}\n          onSearchChange={this.handleSearchChange}\n          placeholder=\"Select data\"\n          results={results}\n          value={value}\n        />\n      </SearchPanelContainer>)\n  }\n}\n\nSearchRows.propTypes = {\n  rowsInCategories: PropTypes.array,\n  selectedRowNamesByCategoryName: PropTypes.object,\n  selectedSamplesByCategoryNameAndRowName: PropTypes.object,\n  updateSelectedRowNames: PropTypes.func,\n  updateSelectedSamples: PropTypes.func,\n}\n\nconst mapStateToProps = (state) => ({\n  rowsInCategories: getRowsInCategories(state),\n  selectedRowNamesByCategoryName: getSelectedRowNamesByCategoryName(state),\n  selectedSamplesByCategoryNameAndRowName: getSelectedSamplesByCategoryNameAndRowName(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateSelectedRowNames: (actionType, categoryName, selectedRowNames) => {\n    dispatch({\n      type: `${actionType}_SELECTED_ROW_NAMES`,\n      categoryName,\n      selectedRowNames,\n    })\n  },\n\n  updateSelectedSamples: (actionType, categoryName, selectedSamplesByRowName) => {\n    dispatch({\n      type: `${actionType}_SELECTED_SAMPLES`,\n      categoryName,\n      selectedSamplesByRowName,\n    })\n  },\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchRows)\n","/* eslint-disable react/jsx-one-expression-per-line */\n/* eslint-disable implicit-arrow-linebreak */\n/* eslint-disable react/no-array-index-key */\n/* eslint-disable react/no-danger */\n\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport { Checkbox, Icon, Popup } from 'semantic-ui-react'\nimport DOMPurify from 'dompurify'\nimport { CategoryH3, OptionDiv, OptionInputDiv, StyledPopup } from './SideBarUtils'\nimport SelectedDataPanel from './SelectedDataPanel'\nimport EditLocusList from './EditLocusList'\nimport AddRows from './AddRows'\nimport SearchRows from './SearchRows'\n\nimport {\n  getLeftSideBarLocusList,\n  getRowsInCategories,\n  getDataTypesUsersCanToggle,\n  getEnabledDataTypes,\n  getSelectedRowNamesByCategoryName,\n} from '../redux/selectors'\n\nconst CategoryDetails = styled.div`\n  display: inline-block;\n  margin: 0px 0px 0px 15px;\n  color: #999;\n  white-space: nowrap;\n`\n\nconst DataTypeIcon = styled.div.attrs({ name: 'stop' })`\n  color: ${(props) => props.color};\n  background-color: ${(props) => props.color};\n  border: 3px solid ${(props) => props.color};\n  display: inline-block;\n  width: 6px;\n  border-radius: 1px;\n  height: 10px;\n  cursor: pointer;\n`\n\nconst dataTypeIconColors = {\n  junctions: '#B0B0EC',\n  coverage: '#B5D29A',\n  alignment: '#5DB6E9',\n  vcf: '#E6A01B',\n  gcnv_bed: '#AA3333',\n  default: '#000000',\n}\n\nconst dataTypeLabels = {\n  coverage: 'Coverage',\n  junctions: 'Splice Junctions',\n  vcf: 'Variants (VCF)',\n  gcnv_bed: 'gCNV',\n  alignment: 'Reads (BAM)',\n  bed: 'Annotations (BED)',\n  gff3: 'Annotations (GFF3)',\n  gtf: 'Annotations (GTF)',\n  genePred: 'Annotations (genePred)',\n  bigBed: 'Annotations (bigBed)',\n}\n\nconst LinkButton = styled.a`\n  cursor: pointer;\n  padding: 10px 10px 10px 0px;\n  display: inline-block;\n`\n\nconst RowColorLabelsContainer = styled.span`\n  padding-left: 5px;\n  white-space: nowrap;\n`\n\nconst NoWrapDiv = styled.div`\n  white-space: nowrap;\n`\n\n/*\nconst SelectedDataSectionHeading = styled.div`\n  font-weight: 700;\n  margin: 8px 0px;\n`\n*/\n\nconst ShowTrackTypesPanel = ({ dataTypesUsersCanToggle, enabledDataTypes, updateDataTypesToShow }) => {\n  if (dataTypesUsersCanToggle.length < 2) {\n    return null\n  }\n  const checkBoxes = [...dataTypesUsersCanToggle].map((dataType, i) => {\n    const label = dataTypeLabels[dataType] || (dataType.charAt(0).toUpperCase() + dataType.slice(1)) //to Title case\n    return (\n      <OptionDiv key={`${dataType} ${i}`}>\n        <Checkbox label={`${label.toLocaleString()}`} checked={enabledDataTypes.includes(dataType)} onChange={(e, data) => updateDataTypesToShow(data.checked ? 'ADD' : 'REMOVE', [dataType])} />\n        <RowColorLabelsContainer><Popup content={`This stripe marks rows that have ${label.toLowerCase()} data. Use the checkbox on the left to show or hide ${label.toLowerCase()} tracks for all rows selected below.`} position=\"right center\" trigger={<DataTypeIcon color={dataTypeIconColors[dataType] || dataTypeIconColors.default} />} /></RowColorLabelsContainer>\n      </OptionDiv>)\n  })\n\n  return (\n    <div>\n      <CategoryH3>Show Track Types</CategoryH3>\n      {checkBoxes}\n    </div>)\n}\n\nShowTrackTypesPanel.propTypes = {\n  dataTypesUsersCanToggle: PropTypes.array,\n  enabledDataTypes: PropTypes.array,\n  updateDataTypesToShow: PropTypes.func,\n}\n\n\nconst RowColorLabelsWithPopup = ({ row }) => {\n  const handleCopyToClipboard = () => {\n    const s = (row.data || []).map((d) => d.url).join('\\n')\n    navigator.clipboard.writeText(s)\n  }\n\n  return (<Popup\n    flowing\n    content={\n      <table>\n        <tbody>\n          {\n            (row.data || []).map((d, i) =>\n              <tr key={`${d.url} ${d.type} ${i}`}>\n                <td style={{ paddingRight: '10px' }}>\n                  <b>{d.type && (dataTypeLabels[d.type] || d.type.toUpperCase())}:</b>\n                </td>\n                <td>\n                  <NoWrapDiv>{d.url}</NoWrapDiv>\n                </td>\n                <td style={{ color: 'gray', whiteSpace: 'nowrap', paddingLeft: '15px' }}>\n                  {d.samples ? `(${d.samples.length} samples)` : null}\n                </td>\n              </tr>,\n            )\n          }\n          <tr><td colSpan={2}><div style={{ fontSize: 'small', color: 'grey', marginTop: '10px' }}>(click to copy paths)</div></td></tr>\n        </tbody>\n      </table>\n    }\n    position=\"right center\"\n    trigger={\n      <RowColorLabelsContainer onClick={handleCopyToClipboard}>\n        {\n          (row.data || []).map((d, i) => <DataTypeIcon key={`${d.url} ${d.type} ${i}`} color={dataTypeIconColors[d.type] || dataTypeIconColors.default} />)\n        }\n      </RowColorLabelsContainer>\n    }\n    style={{ marginLeft: '2px' }}\n  />)\n}\n\nRowColorLabelsWithPopup.propTypes = {\n  row: PropTypes.object,\n}\n\nconst CategoryPanel = ({ category, updateSelectedRowNames }) => (\n  <div>\n    <CategoryH3>{category.categoryName}</CategoryH3>\n    {\n      category.rows.length >= 12 && <CategoryDetails>{`(N=${category.rows.length}) `}</CategoryDetails>\n    }\n    {\n      category.rows.length > 0 && (\n      <div>\n        <LinkButton onClick={\n          (e) => {\n            e.preventDefault()\n            updateSelectedRowNames('SET', category.categoryName, [])\n          }\n        }\n        >\n          Uncheck All\n        </LinkButton>\n      </div>)\n    }\n  </div>)\n\nCategoryPanel.propTypes = {\n  category: PropTypes.object,\n  updateSelectedRowNames: PropTypes.func,\n}\n\nconst RowsPanel = ({ rowsInCategories, selectedRowNamesByCategoryName, updateSelectedRowNames }) => (\n  rowsInCategories.map((category, i) => (\n    <div key={`${category.categoryName} ${i}`}>\n      <CategoryPanel category={category} updateSelectedRowNames={updateSelectedRowNames} />\n      {\n        category.rows.map((row, j) => {\n          const selectedRowNames = selectedRowNamesByCategoryName[category.categoryName] || []\n          return <RowPanel key={`${row.name} ${j}`} row={row} categoryName={category.categoryName} selectedRowNames={selectedRowNames} updateSelectedRowNames={updateSelectedRowNames} />\n        })\n      }\n      { i === rowsInCategories.length - 1 ? <AddRows category={category} /> : null }\n    </div>),\n  ))\n\nRowsPanel.propTypes = {\n  rowsInCategories: PropTypes.array,\n  selectedRowNamesByCategoryName: PropTypes.object,\n  updateSelectedRowNames: PropTypes.func,\n}\n\n\nconst RowPanel = ({ row, categoryName, selectedRowNames, updateSelectedRowNames }) => (\n  <NoWrapDiv>\n    <Checkbox\n      label={row.name}\n      checked={selectedRowNames.includes(row.name)}\n      data-row={row.name}\n      onChange={(e, data) => updateSelectedRowNames(data.checked ? 'ADD' : 'REMOVE', categoryName, [data['data-row']])}\n    />\n    <RowDetails row={row} />\n    <RowColorLabelsWithPopup row={row} />\n  </NoWrapDiv>)\n\nRowPanel.propTypes = {\n  row: PropTypes.object,\n  categoryName: PropTypes.string,\n  selectedRowNames: PropTypes.array,\n  updateSelectedRowNames: PropTypes.func,\n}\n/*\nconst DataSubrows = ({ data }) => {\n  if (!data) {\n    return null\n  }\n\n  const items = []\n  data.filter((d) => d.type === 'gcnv_bed' && d.samples).forEach((d) => {\n    d.samples.forEach((sample) => {\n      items.push(<Checkbox\n        key={sample}\n        label={sample}\n        checked={false}\n        onChange={(e, _) => console.log(e, _)}\n      />)\n    })\n  })\n\n  return items\n}\n\nDataSubrows.propTypes = {\n  data: PropTypes.array,\n}\n*/\n\nconst RowDetails = ({ row }) => {\n  return (\n    row.description\n      ? <StyledPopup\n        flowing\n        content={row.description && <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(row.description) }} />}\n        position=\"right center\"\n        trigger={\n          <Icon style={{ marginLeft: '10px' }} name=\"question circle outline\" />\n        }\n      />\n      : null)\n}\n\nRowDetails.propTypes = {\n  row: PropTypes.object,\n}\n\nclass LeftSideBar extends React.PureComponent\n{\n  render() {\n    //const params = new URLSearchParams(window.location.search)\n    const {\n      locusList,\n      rowsInCategories,\n      dataTypesUsersCanToggle,\n      enabledDataTypes,\n      selectedRowNamesByCategoryName,\n      setLocus,\n      setLocusList,\n      updateDataTypesToShow,\n      updateSelectedRowNames,\n    } = this.props\n\n    return (\n      <div>\n        <EditLocusList name=\"Left Side Bar\" locusList={locusList} setLocus={setLocus} setLocusList={setLocusList} />\n        <ShowTrackTypesPanel\n          dataTypesUsersCanToggle={dataTypesUsersCanToggle}\n          enabledDataTypes={enabledDataTypes}\n          updateDataTypesToShow={updateDataTypesToShow}\n        />\n        <SearchRows />\n        <OptionInputDiv>\n          {/*<SelectedDataSectionHeading>Selected data:</SelectedDataSectionHeading>*/}\n          <SelectedDataPanel />\n        </OptionInputDiv>\n        <RowsPanel\n          rowsInCategories={rowsInCategories}\n          selectedRowNamesByCategoryName={selectedRowNamesByCategoryName}\n          updateSelectedRowNames={updateSelectedRowNames}\n        />\n      </div>)\n  }\n}\n\nLeftSideBar.propTypes = {\n  locusList: PropTypes.array,\n  rowsInCategories: PropTypes.array,\n  dataTypesUsersCanToggle: PropTypes.array,\n  enabledDataTypes: PropTypes.array,\n  selectedRowNamesByCategoryName: PropTypes.object,\n  setLocus: PropTypes.func,\n  setLocusList: PropTypes.func,\n  updateDataTypesToShow: PropTypes.func,\n  updateSelectedRowNames: PropTypes.func,\n}\n\nconst mapStateToProps = (state) => ({\n  locusList: getLeftSideBarLocusList(state),\n  rowsInCategories: getRowsInCategories(state),\n  dataTypesUsersCanToggle: getDataTypesUsersCanToggle(state),\n  enabledDataTypes: getEnabledDataTypes(state),\n  selectedRowNamesByCategoryName: getSelectedRowNamesByCategoryName(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  setLocus: (locus) => {\n    dispatch({\n      type: 'UPDATE_LOCUS',\n      newValue: locus,\n    })\n  },\n  setLocusList: (locusList) => {\n    dispatch({\n      type: 'SET_LEFT_SIDE_BAR_LOCUS_LIST',\n      values: locusList,\n    })\n  },\n  updateDataTypesToShow: (actionType, dataTypes) => {\n    dispatch({\n      type: `${actionType}_DATA_TYPES_TO_SHOW`,\n      values: dataTypes,\n    })\n  },\n  updateSelectedRowNames: (actionType, categoryName, selectedRowNames) => {\n    dispatch({\n      type: `${actionType}_SELECTED_ROW_NAMES`,\n      categoryName,\n      selectedRowNames,\n    })\n  },\n  updateSjOptions: (newSettings) => {\n    dispatch({\n      type: 'UPDATE_SJ_OPTIONS',\n      updates: newSettings,\n    })\n  },\n  updateVcfOptions: (newSettings) => {\n    dispatch({\n      type: 'UPDATE_VCF_OPTIONS',\n      updates: newSettings,\n    })\n  },\n  updateBamOptions: (newSettings) => {\n    dispatch({\n      type: 'UPDATE_BAM_OPTIONS',\n      updates: newSettings,\n    })\n  },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LeftSideBar)\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { Button, Checkbox } from 'semantic-ui-react'\nimport { CategoryH3, OptionDiv, OptionInputDiv, OptionInput } from '../SideBarUtils'\nimport { getBamOptions } from '../../redux/selectors'\n\nconst editedFields = {}\n\nconst BamOptionsPanel = ({ bamOptions, updateBamOptions }) => {\n  const handleTextInput = (e, name, value = null) => {\n    if (e.keyCode === 13) {\n      updateBamOptions({ ...bamOptions, ...editedFields })\n    } else {\n      editedFields[name] = value\n    }\n  }\n\n  const handleApplyButton = () => {\n    updateBamOptions({ ...bamOptions, ...editedFields })\n  }\n\n  return (\n    <div>\n      <CategoryH3>BAM Track <br />Options</CategoryH3><br />\n      <OptionDiv><Checkbox label=\"View as pairs\" checked={bamOptions.viewAsPairs} onChange={(e, data) => updateBamOptions({ viewAsPairs: data.checked })} /></OptionDiv>\n      <OptionDiv><Checkbox label=\"Show soft-clips\" checked={bamOptions.showSoftClips} onChange={(e, data) => updateBamOptions({ showSoftClips: data.checked })} /></OptionDiv>\n      <OptionDiv>\n        Color by:\n        <select value={bamOptions.colorBy} onChange={(e) => updateBamOptions({ colorBy: e.target.value })}>\n          <option value=\"strand\">Strand</option>\n          <option value=\"firstOfPairStrand\">First-of-pair strand</option>\n          <option value=\"pairOrientation\">Pair orientation</option>\n          <option value=\"fragmentLength\">Insert size (TLEN)</option>\n          <option value=\"none\">None</option>\n        </select>\n      </OptionDiv>\n      <OptionInputDiv>Track height: <OptionInput key={`track-height-${bamOptions.trackHeight}`} type=\"text\" defaultValue={bamOptions.trackHeight} onKeyUp={(e) => handleTextInput(e, 'trackHeight', parseInt(e.target.value, 10))} /> px</OptionInputDiv>\n      <OptionInputDiv><Button compact size=\"small\" onClick={handleApplyButton}>Apply</Button></OptionInputDiv>\n    </div>)\n}\n\nBamOptionsPanel.propTypes = {\n  bamOptions: PropTypes.object,\n  updateBamOptions: PropTypes.func,\n}\n\nconst mapStateToProps = (state) => ({\n  bamOptions: getBamOptions(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateBamOptions: (newSettings) => {\n    dispatch({\n      type: 'UPDATE_BAM_OPTIONS',\n      updates: newSettings,\n    })\n  },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BamOptionsPanel)\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { CategoryH3, OptionDiv } from '../SideBarUtils'\nimport { getVcfOptions } from '../../redux/selectors'\n\nconst VcfOptionsPanel = ({ vcfOptions, updateVcfOptions }) => {\n  return (\n    <div>\n      <CategoryH3>VCF Track <br />Options</CategoryH3><br />\n      <OptionDiv>\n        Display mode: &nbsp;\n        <select value={vcfOptions.displayMode} onChange={(e) => updateVcfOptions({ displayMode: e.target.value })}>\n          <option value=\"COLLAPSED\">Collapse</option>\n          <option value=\"SQUISHED\">Squish</option>\n          <option value=\"EXPANDED\">Expand</option>\n        </select>\n      </OptionDiv>\n    </div>)\n}\n\nVcfOptionsPanel.propTypes = {\n  vcfOptions: PropTypes.object,\n  updateVcfOptions: PropTypes.func,\n}\n\nconst mapStateToProps = (state) => ({\n  vcfOptions: getVcfOptions(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateVcfOptions: (newSettings) => {\n    dispatch({\n      type: 'UPDATE_VCF_OPTIONS',\n      updates: newSettings,\n    })\n  },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(VcfOptionsPanel)\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport { Button, Checkbox, Icon, Radio } from 'semantic-ui-react'\nimport { CategoryH3, ColorLegendIcon, OptionDiv, OptionInputDiv, OptionInput, StyledPopup } from '../SideBarUtils'\nimport { SJ_MOTIFS, SJ_DEFAULT_COLOR_BY_NUM_READS_THRESHOLD } from '../../constants'\nimport { getSjOptions } from '../../redux/selectors'\n\n\nexport const OptionBox = styled.div`\n  margin-top: 5px;\n`\n\nconst StyledRadio = styled(Radio)`\n  label {\n    margin-left: 10px;\n    margin-bottom: 10px;\n    padding-left: 1.4em !important;\n  }\n`\n\nconst ColorByLegend = ({ sjOptions, handleTextInput }) => {\n  if (sjOptions.colorBy === 'strand') {\n    return (\n      <div>\n        <ColorLegendIcon name=\"stop\" style={{ color: '#b0b0ec' }} /> plus\n        <ColorLegendIcon name=\"stop\" style={{ color: '#ecb0b0', marginLeft: '10px' }} /> minus\n      </div>)\n  }\n\n  if (sjOptions.colorBy === 'motif') {\n    // IGV.js Dark2 color palette\n    return (\n      <div>\n        <ColorLegendIcon name=\"stop\" style={{ color: 'rgb(27,158,119)' }} /> GT/AG <br />\n        <ColorLegendIcon name=\"stop\" style={{ color: 'rgb(217,95,2)' }} /> CT/AC <br />\n        <ColorLegendIcon name=\"stop\" style={{ color: 'rgb(117,112,179)' }} /> GC/AG <br />\n        <ColorLegendIcon name=\"stop\" style={{ color: 'rgb(231,41,138)' }} /> CT/GC <br />\n        <ColorLegendIcon name=\"stop\" style={{ color: 'rgb(102,166,30)' }} /> AT/AC <br />\n        <ColorLegendIcon name=\"stop\" style={{ color: 'rgb(230,171,2)' }} /> GT/AT <br />\n        <ColorLegendIcon name=\"stop\" style={{ color: 'rgb(166,118,29)' }} /> non-canonical <br />\n      </div>)\n  }\n\n  if (sjOptions.colorBy === 'numUniqueReads' || sjOptions.colorBy === 'numReads') {\n    return (\n      <div>\n        # reads<ColorLegendIcon name=\"stop\" style={{ color: '#AAAAAA', marginLeft: '10px' }} />\n        &nbsp;≤ &nbsp;\n        <OptionInput\n          type=\"text\"\n          key={`num-reads-${sjOptions.colorByNumReadsThreshold}`}\n          defaultValue={sjOptions.colorByNumReadsThreshold !== undefined ? sjOptions.colorByNumReadsThreshold : SJ_DEFAULT_COLOR_BY_NUM_READS_THRESHOLD}\n          onKeyUp={(e) => handleTextInput(e, 'colorByNumReadsThreshold')}\n          style={{ width: '35px' }}\n        />\n        &nbsp; &lt; &nbsp;\n        <ColorLegendIcon name=\"stop\" style={{ color: 'blue' }} />\n      </div>)\n  }\n  if (sjOptions.colorBy === 'isAnnotatedJunction') {\n    return (\n      <div>\n        <ColorLegendIcon name=\"stop\" style={{ color: '#b0b0ec' }} /> known junction <br />\n        <ColorLegendIcon name=\"stop\" style={{ color: 'orange' }} /> novel junction\n      </div>)\n  }\n\n  return <div />\n}\n\nColorByLegend.propTypes = {\n  sjOptions: PropTypes.object,\n  handleTextInput: PropTypes.func,\n}\n\nconst editedFields = {}\n\nconst SpliceJunctionsOptionsPanel = ({ sjOptions, updateSjOptions }) => {\n  const handleTextInput = (e, name, value = null) => {\n    if (e.keyCode === 13) {\n      updateSjOptions({ ...sjOptions, ...editedFields })\n    } else {\n      editedFields[name] = value\n    }\n  }\n  const handleApplyButton = () => {\n    updateSjOptions({ ...sjOptions, ...editedFields })\n  }\n\n  return (\n    <div>\n      <CategoryH3>Junctions Track <br />Options</CategoryH3><br />\n      <OptionBox>\n        <OptionDiv>Color by:</OptionDiv>\n        <OptionDiv>\n          <select value={sjOptions.colorBy} onChange={(e) => updateSjOptions({ colorBy: e.target.value })}>\n            <option value=\"strand\">strand</option>\n            <option value=\"motif\">donor/acceptor motif</option>\n            <option value=\"numUniqueReads\"># uniquely-mapped reads</option>\n            <option value=\"numReads\"># total reads</option>\n            <option value=\"isAnnotatedJunction\">is known junction</option>\n          </select>\n          <ColorByLegend sjOptions={sjOptions} handleTextInput={handleTextInput} />\n        </OptionDiv>\n      </OptionBox>\n      <OptionBox>\n        <OptionDiv>Junction label #1:</OptionDiv>\n        <OptionDiv>\n          <StyledRadio label=\"# uniquely-mapped\" name=\"junctionLabelButton\" checked={sjOptions.labelWith === 'uniqueReadCount'} onChange={(e, data) => data.checked && updateSjOptions({ labelWith: 'uniqueReadCount' })} />\n          <StyledRadio label=\"# total reads\" name=\"junctionLabelButton\" checked={sjOptions.labelWith === 'totalReadCount'} onChange={(e, data) => data.checked && updateSjOptions({ labelWith: 'totalReadCount' })} />\n          <StyledRadio label=\"# samples with junction\" name=\"junctionLabelButton\" checked={sjOptions.labelWith === 'numSamplesWithThisJunction'} onChange={(e, data) => data.checked && updateSjOptions({ labelWith: 'numSamplesWithThisJunction' })} />\n          <StyledRadio label=\"% samples with junction\" name=\"junctionLabelButton\" checked={sjOptions.labelWith === 'percentSamplesWithThisJunction'} onChange={(e, data) => data.checked && updateSjOptions({ labelWith: 'percentSamplesWithThisJunction' })} />\n          <StyledRadio label=\"motif\" name=\"junctionLabelButton\" checked={sjOptions.labelWith === 'motif'} onChange={(e, data) => data.checked && updateSjOptions({ labelWith: 'motif' })} />\n        </OptionDiv>\n      </OptionBox>\n      <OptionBox>\n        <OptionDiv>Junction label #2:</OptionDiv>\n        <OptionDiv>\n          <StyledRadio label=\"none\" name=\"junctionLabel2Button\" checked={!sjOptions.labelWithInParen} onChange={(e, data) => data.checked && updateSjOptions({ labelWithInParen: null })} />\n          <StyledRadio label=\"# uniquely-mapped\" name=\"junctionLabel2Button\" checked={sjOptions.labelWithInParen === 'uniqueReadCount'} onChange={(e, data) => data.checked && updateSjOptions({ labelWithInParen: 'uniqueReadCount' })} />\n          <StyledRadio label=\"# total reads\" name=\"junctionLabel2Button\" checked={sjOptions.labelWithInParen === 'totalReadCount'} onChange={(e, data) => data.checked && updateSjOptions({ labelWithInParen: 'totalReadCount' })} />\n          <StyledRadio label=\"# multi-mapped\" name=\"junctionLabel2Button\" checked={sjOptions.labelWithInParen === 'multiMappedReadCount'} onChange={(e, data) => data.checked && updateSjOptions({ labelWithInParen: 'multiMappedReadCount' })} />\n          <StyledRadio label=\"# samples with junction\" name=\"junctionLabel2Button\" checked={sjOptions.labelWithInParen === 'numSamplesWithThisJunction'} onChange={(e, data) => data.checked && updateSjOptions({ labelWithInParen: 'numSamplesWithThisJunction' })} />\n          <StyledRadio label=\"% samples with junction\" name=\"junctionLabel2Button\" checked={sjOptions.labelWithInParen === 'percentSamplesWithThisJunction'} onChange={(e, data) => data.checked && updateSjOptions({ labelWithInParen: 'percentSamplesWithThisJunction' })} />\n          <StyledRadio label=\"motif\" name=\"junctionLabel2Button\" checked={sjOptions.labelWithInParen === 'motif'} onChange={(e, data) => data.checked && updateSjOptions({ labelWithInParen: 'motif' })} />\n        </OptionDiv>\n      </OptionBox>\n      <OptionBox>\n        <OptionDiv>Junction thickness:</OptionDiv>\n        <OptionDiv>\n          <select value={sjOptions.thicknessBasedOn} onChange={(e) => updateSjOptions({ thicknessBasedOn: e.target.value })}>\n            <option value=\"numUniqueReads\"># uniquely-mapped reads</option>\n            <option value=\"numReads\"># total reads</option>\n            <option value=\"isAnnotatedJunction\">is known junction</option>\n            <option value=\"numSamplesWithThisJunction\"># samples with this junction</option>\n          </select>\n        </OptionDiv>\n      </OptionBox>\n      <OptionBox>\n        <OptionDiv>Junction bounce height:</OptionDiv>\n        <OptionDiv>\n          <select value={sjOptions.bounceHeightBasedOn} onChange={(e) => updateSjOptions({ bounceHeightBasedOn: e.target.value })}>\n            <option value=\"random\">random</option>\n            <option value=\"distance\">distance</option>\n            <option value=\"thickness\">thickness</option>\n          </select>\n        </OptionDiv>\n      </OptionBox>\n      <CategoryH3>Junctions Track Filters</CategoryH3><br />\n      <OptionBox>\n        <OptionDiv>\n          Show: <br />\n          <StyledRadio label=\"only local junctions\" name=\"minJunctionEndsVisibleButton\" checked={sjOptions.minJunctionEndsVisible === 2} onChange={(e, data) => data.checked && updateSjOptions({ minJunctionEndsVisible: 2 })} />\n          <StyledPopup\n            content=\"Only show splice junctions that start and end within the current view.\"\n            position=\"left center\"\n            trigger={\n              <Icon style={{ marginLeft: '8px' }} name=\"question circle outline\" />\n            }\n          /><br />\n          <StyledRadio label=\"semi-local junctions\" name=\"minJunctionEndsVisibleButton\" checked={sjOptions.minJunctionEndsVisible === 1} onChange={(e, data) => data.checked && updateSjOptions({ minJunctionEndsVisible: 1 })} />\n          <StyledPopup\n            content=\"Hide splice junctions that span the current view (start to the left of the current view and end to the right of it).\"\n            position=\"left center\"\n            trigger={\n              <Icon style={{ marginLeft: '8px' }} name=\"question circle outline\" />\n            }\n          /><br />\n          <StyledRadio label=\"all junctions\" name=\"minJunctionEndsVisibleButton\" checked={sjOptions.minJunctionEndsVisible === 0} onChange={(e, data) => data.checked && updateSjOptions({ minJunctionEndsVisible: 0 })} />\n          <StyledPopup\n            content=\"Show all splice junctions\"\n            position=\"left center\"\n            trigger={\n              <Icon style={{ marginLeft: '8px' }} name=\"question circle outline\" />\n            }\n          />\n        </OptionDiv>\n      </OptionBox>\n      <OptionBox>\n        <OptionDiv>\n          Show Strands:\n          <StyledRadio label=\"both\" name=\"strandButton\" checked={!sjOptions.showOnlyPlusStrand && !sjOptions.showOnlyMinusStrand} onChange={(e, data) => data.checked && updateSjOptions({ showOnlyPlusStrand: false, showOnlyMinusStrand: false })} />\n          <StyledRadio label=\"plus\" name=\"strandButton\" checked={sjOptions.showOnlyPlusStrand} onChange={(e, data) => data.checked && updateSjOptions({ showOnlyPlusStrand: true, showOnlyMinusStrand: false })} />\n          <StyledRadio label=\"minus\" name=\"strandButton\" checked={sjOptions.showOnlyMinusStrand} onChange={(e, data) => data.checked && updateSjOptions({ showOnlyPlusStrand: false, showOnlyMinusStrand: true })} />\n        </OptionDiv>\n      </OptionBox>\n      <OptionBox>\n        <OptionDiv><Checkbox label=\"Show known junctions\" checked={!sjOptions.hideAnnotated} onChange={(e, data) => updateSjOptions({ hideAnnotated: !data.checked })} /></OptionDiv>\n        <OptionDiv><Checkbox label=\"Show novel junctions\" checked={!sjOptions.hideUnannotated} onChange={(e, data) => updateSjOptions({ hideUnannotated: !data.checked })} /></OptionDiv>\n      </OptionBox>\n      <OptionBox>\n        <div>\n          <OptionDiv>Uniquely-mapped reads:</OptionDiv>\n          at least <OptionInput key={`uniquely-mapped-reads-${sjOptions.minUniquelyMappedReads}`} type=\"text\" defaultValue={sjOptions.minUniquelyMappedReads} onKeyUp={(e) => handleTextInput(e, 'minUniquelyMappedReads', parseInt(e.target.value, 10))} />\n        </div>\n        <div>\n          <OptionDiv>Total reads:</OptionDiv>\n          at least <OptionInput key={`total-reads-${sjOptions.minTotalReads}`} type=\"text\" defaultValue={sjOptions.minTotalReads} onKeyUp={(e) => handleTextInput(e, 'minTotalReads', parseInt(e.target.value, 10))} />\n        </div>\n        <div>\n          <OptionDiv>Fraction multi-mapped:\n            <StyledPopup\n              content=\"Allows filtering of junctions where most reads that span the junction are multi-mapped reads. For example, setting this to 0.79 will hide junctions where 8 out of 10 (or more) reads that span the junction are not uniquely mapped reads.\"\n              position=\"left center\"\n              trigger={\n                <Icon style={{ marginLeft: '8px' }} name=\"question circle outline\" />\n              }\n            />\n          </OptionDiv>\n          at most <OptionInput key={`fraction-multi-mapped-${sjOptions.maxFractionMultiMappedReads}`} type=\"text\" defaultValue={sjOptions.maxFractionMultiMappedReads} onKeyUp={(e) => handleTextInput(e, 'maxFractionMultiMappedReads', parseInt(e.target.value, 10))} />\n        </div>\n      </OptionBox>\n      <OptionBox>\n        <div>\n          <OptionDiv>Splice overhang base-pairs:</OptionDiv>\n          at least <OptionInput key={`spliced-alignment-overhang-${sjOptions.minSplicedAlignmentOverhang}`} type=\"text\" defaultValue={sjOptions.minSplicedAlignmentOverhang} onKeyUp={(e) => handleTextInput(e, 'minSplicedAlignmentOverhang', parseInt(e.target.value, 10))} />\n        </div>\n        <div>\n          <OptionDiv># samples with junction:\n            <StyledPopup\n              content=\"Filter junctions based on how many samples in the batch have this junction. A sample is counted as having the junction as long as the junction is supported by at least one read.\"\n              position=\"left center\"\n              trigger={\n                <Icon style={{ marginLeft: '8px' }} name=\"question circle outline\" />\n              }\n            />\n          </OptionDiv>\n          <OptionInput key={`samples-with-junction-more-than-${sjOptions.minSamplesWithThisJunction}`} type=\"text\" defaultValue={sjOptions.minSamplesWithThisJunction} onKeyUp={(e) => handleTextInput(e, 'minSamplesWithThisJunction', parseInt(e.target.value, 10))} /> &nbsp;≤ n ≤ <OptionInput key={`samples-with-junction-less-than-${sjOptions.maxSamplesWithThisJunction}`} type=\"text\" defaultValue={sjOptions.maxSamplesWithThisJunction} onKeyUp={(e) => handleTextInput(e, 'maxSamplesWithThisJunction', parseInt(e.target.value, 10))} />\n        </div>\n        <div>\n          <OptionDiv>% samples with junction:\n            <StyledPopup\n              content=\"Filter junctions based on what percentage of samples in the batch have this junction. A sample is counted as having the junction as long as the junction is supported by at least one read.\"\n              position=\"left center\"\n              trigger={\n                <Icon style={{ marginLeft: '8px' }} name=\"question circle outline\" />\n              }\n            />\n          </OptionDiv>\n          <OptionInput key={`percent-samples-with-junction-more-than-${sjOptions.minPercentSamplesWithThisJunction}`} type=\"text\" defaultValue={sjOptions.minPercentSamplesWithThisJunction} onKeyUp={(e) => handleTextInput(e, 'minPercentSamplesWithThisJunction', parseInt(e.target.value, 10))} /> &nbsp;≤ % ≤ <OptionInput key={`percent-samples-with-junction-less-than-${sjOptions.maxPercentSamplesWithThisJunction}`} type=\"text\" defaultValue={sjOptions.maxPercentSamplesWithThisJunction} onKeyUp={(e) => handleTextInput(e, 'maxPercentSamplesWithThisJunction', parseInt(e.target.value, 10))} />\n        </div>\n      </OptionBox>\n      <OptionBox>\n        <div>\n          <OptionDiv>Donor/Acceptor Motifs:</OptionDiv>\n          {\n            SJ_MOTIFS.map((motif) => <OptionDiv key={motif}><Checkbox label={`Show ${motif}`} checked={!sjOptions[`hideMotif${motif}`]} onChange={(e, data) => updateSjOptions({ [`hideMotif${motif}`]: !data.checked })} /></OptionDiv>)\n          }\n        </div>\n        <OptionInputDiv>Track height: <OptionInput key={`track-height-${sjOptions.trackHeight}`} type=\"text\" defaultValue={sjOptions.trackHeight} onKeyUp={(e) => handleTextInput(e, 'trackHeight', parseInt(e.target.value, 10))} /> px</OptionInputDiv>\n        <OptionInputDiv><Button compact size=\"small\" onClick={handleApplyButton}>Apply</Button></OptionInputDiv>\n      </OptionBox>\n    </div>)\n}\n\nSpliceJunctionsOptionsPanel.propTypes = {\n  sjOptions: PropTypes.object,\n  updateSjOptions: PropTypes.func,\n}\n\nconst mapStateToProps = (state) => ({\n  sjOptions: getSjOptions(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateSjOptions: (newSettings) => {\n    dispatch({\n      type: 'UPDATE_SJ_OPTIONS',\n      updates: newSettings,\n    })\n  },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SpliceJunctionsOptionsPanel)\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n//import styled from 'styled-components'\nimport { Button, Checkbox } from 'semantic-ui-react'\nimport { CategoryH3, OptionInputDiv, OptionInput } from '../SideBarUtils'\nimport { getGcnvOptions } from '../../redux/selectors'\n\nconst editedFields = {}\n\nconst GcnvOptionsPanel = ({ gcnvOptions, updateGcnvOptions }) => {\n  const handleTextInput = (e, name, value = null) => {\n    if (e.keyCode === 13) {\n      updateGcnvOptions({ ...gcnvOptions, ...editedFields })\n    } else {\n      editedFields[name] = value\n    }\n  }\n\n  const handleApplyButton = () => {\n    updateGcnvOptions({ ...gcnvOptions, ...editedFields })\n  }\n\n  return (\n    <div>\n      <CategoryH3>gCNV Options</CategoryH3><br />\n      <OptionInputDiv><Checkbox label=\"Enable clicking background samples\" checked={!gcnvOptions.onlyHandleClicksForHighlightedSamples} onChange={(e, data) => updateGcnvOptions({ ...gcnvOptions, onlyHandleClicksForHighlightedSamples: !data.checked })} /></OptionInputDiv>\n      <OptionInputDiv>Y-min: <OptionInput key={`y-max-${gcnvOptions.trackMin}`} type=\"text\" defaultValue={gcnvOptions.trackMin} onKeyUp={(e) => handleTextInput(e, 'trackMin', parseInt(e.target.value, 10))} /> copies</OptionInputDiv>\n      <OptionInputDiv>Y-max: <OptionInput key={`y-max-${gcnvOptions.trackMax}`} type=\"text\" defaultValue={gcnvOptions.trackMax} onKeyUp={(e) => handleTextInput(e, 'trackMax', parseInt(e.target.value, 10))} /> copies</OptionInputDiv>\n      <OptionInputDiv>Track height: <OptionInput key={`track-height-${gcnvOptions.trackHeight}`} type=\"text\" defaultValue={gcnvOptions.trackHeight} onKeyUp={(e) => handleTextInput(e, 'trackHeight', parseInt(e.target.value, 10))} /> px</OptionInputDiv>\n      <OptionInputDiv><Button compact size=\"small\" onClick={handleApplyButton}>Apply</Button></OptionInputDiv>\n    </div>)\n}\n\nGcnvOptionsPanel.propTypes = {\n  gcnvOptions: PropTypes.object,\n  updateGcnvOptions: PropTypes.func,\n}\n\nconst mapStateToProps = (state) => ({\n  gcnvOptions: getGcnvOptions(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateGcnvOptions: (newSettings) => {\n    dispatch({\n      type: 'UPDATE_GCNV_OPTIONS',\n      updates: newSettings,\n    })\n  },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GcnvOptionsPanel)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport EditLocusList from './EditLocusList'\nimport BamOptionsPanel from './optionsPanels/BamOptionsPanel'\nimport VcfOptionsPanel from './optionsPanels/VcfOptionsPanel'\nimport SpliceJunctionsOptionsPanel from './optionsPanels/SpliceJunctionsOptionsPanel'\nimport GcnvOptionsPanel from './optionsPanels/GcnvOptionsPanel'\n\nimport {\n  getRightSideBarLocusList,\n  getEnabledDataTypes,\n} from '../redux/selectors'\n\nclass RightSideBar extends React.PureComponent\n{\n  render() {\n    const {\n      locusList,\n      enabledDataTypes,\n      setLocus,\n      setLocusList,\n    } = this.props\n\n    return (\n      <div>\n        <EditLocusList\n          name=\"Right Side Bar\"\n          locusList={locusList}\n          setLocus={setLocus}\n          setLocusList={setLocusList}\n        />\n\n        {enabledDataTypes.includes('alignment') && <BamOptionsPanel />}\n        {enabledDataTypes.includes('vcf') && <VcfOptionsPanel />}\n        {enabledDataTypes.includes('junctions') && <SpliceJunctionsOptionsPanel />}\n        {enabledDataTypes.includes('gcnv_bed') && <GcnvOptionsPanel />}\n      </div>)\n  }\n}\n\nRightSideBar.propTypes = {\n  locusList: PropTypes.array,\n  enabledDataTypes: PropTypes.array,\n  setLocus: PropTypes.func,\n  setLocusList: PropTypes.func,\n}\n\nconst mapStateToProps = (state) => ({\n  locusList: getRightSideBarLocusList(state),\n  enabledDataTypes: getEnabledDataTypes(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  setLocus: (locus) => {\n    dispatch({\n      type: 'UPDATE_LOCUS',\n      newValue: locus,\n    })\n  },\n  setLocusList: (locusList) => {\n    dispatch({\n      type: 'SET_RIGHT_SIDE_BAR_LOCUS_LIST',\n      values: locusList,\n    })\n  },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RightSideBar)\n","/* eslint-disable react/jsx-one-expression-per-line */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable  react/jsx-closing-tag-location */\n\nimport React from 'react'\nimport styled from 'styled-components'\nimport { Icon } from 'semantic-ui-react'\nimport Modal from './Modal'\n\nconst LinkButton = styled.a`\n  cursor: pointer;\n  margin-left: 20px;\n`\n\nconst AboutLink = () => (\n  <Modal\n    title=\"About the TGG Viewer\"\n    size=\"large\"\n    modalName=\"AboutModal\"\n    trigger={<LinkButton>About</LinkButton>}\n  >\n    The Translational Genomics Group (TGG) Viewer is a free, open-source web app for visualizing splice junctions, copy number, and other data\n    genome-wide using <a href=\"https://github.com/igvteam/igv.js\" target=\"_blank\">IGV.js</a><br />\n    <br />\n    Main features: <br />\n    <ul>\n      <li>Supports most file formats supported by IGV.js, including: .bed, .vcf, .bam, .cram, .bigWig, as well as\n        several custom formats for splice junctions (.junctions.bed.gz) and gCNV copy-number variants (.gcnv.bed.gz) </li>\n      <li>Includes custom reference tracks such as splice junctions from GTEx v8 muscle, blood, and fibroblast samples.</li>\n      <li>Supports adding gene or locus lists to left or right side bar for quick navigation across a list of regions.</li>\n      <li>Can load data files or reference tracks from any Google bucket to which you have read-access.</li>\n      <li>Retrieves just the on-screen sections of the files directly from Google buckets.</li>\n      <li>All settings, gene lists, and data paths can be exported and later restored or shared with others via a .json config file.\n        To export all current settings, click the <Icon name=\"download\" /> button, upload the .json file to github (or another public url), and then\n        to restore the settings, paste the file's URL into the Initial Settings input, and Apply. </li>\n      <li>The page url also records page settings so that they can be bookmarked or shared, but does not include gene lists.</li>\n    </ul>\n\n    <a href=\"https://github.com/broadinstitute/tgg-viewer/issues\" target=\"_blank\">Issues</a>\n    &nbsp;or <a href=\"https://github.com/broadinstitute/tgg-viewer/issues\" target=\"_blank\">Feature Requests</a>\n    &nbsp;can be submitted via <a href=\"https://github.com/broadinstitute/tgg-viewer\" target=\"_blank\">GitHub</a>.\n  </Modal>\n)\n\nexport default AboutLink\n","/* eslint-disable react/jsx-one-expression-per-line */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { getUser } from '../redux/selectors'\n\n\nclass UserInfo extends React.PureComponent\n{\n  render() {\n\n    const {\n      user,\n    } = this.props\n\n    if (!user.googleUserEmail) {\n      return <div>Signing in to Google Buckets...</div>\n    }\n\n    return <div>Signed in to Google Buckets as <b>{user.googleUserEmail}</b></div>\n  }\n}\n\nUserInfo.propTypes = {\n  user: PropTypes.object.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  user: getUser(state),\n\n})\n\nexport default connect(mapStateToProps)(UserInfo)\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Grid } from 'semantic-ui-react'\nimport AboutLink from './About'\nimport UserInfo from './UserInfo'\n\nconst HeaderRow = styled(Grid.Row)`\n  color: #444;\n  margin-bottom: 5px;\n`\n\nconst Column1 = styled(Grid.Column).attrs({ width: 6 })`\n  text-align: left;\n  padding-left: 75px !important;\n`\nconst Column2 = styled(Grid.Column).attrs({ width: 10 })`\n  text-align: right;\n  padding-right: 75px !important;\n`\n\nexport default () => (\n  <Grid>\n    <HeaderRow>\n      <Column1>\n        <b>TGG Viewer:</b>\n        <AboutLink />\n        {/* <a href=\"#\">Intro Video</a> &nbsp; &nbsp; */}\n      </Column1>\n      <Column2>\n        <UserInfo />\n      </Column2>\n    </HeaderRow>\n  </Grid>)\n","\nexport const throttle = (delay, fn) => {\n  let timerId\n  return (...args) => {\n    if (timerId) {\n      clearTimeout(timerId)\n    }\n    timerId = setTimeout(() => {\n      fn(...args)\n      timerId = null\n    }, delay)\n  }\n}\n","/* eslint-disable eqeqeq */\n/* eslint-disable react/destructuring-assignment */\n/* eslint-disable react/no-unused-prop-types */\n\nimport _ from 'lodash'\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport igv from 'igv/dist/igv.esm'\nimport { connect } from 'react-redux'\n\nimport {\n  getGenome,\n  getLocus,\n  getTracks,\n  getSelectedSamplesByCategoryNameAndRowName,\n  getEnabledDataTypes,\n  getSjOptions,\n  getVcfOptions,\n  getBamOptions,\n  getGcnvOptions,\n} from '../redux/selectors'\nimport { throttle } from '../utils/throttle'\n\nconst IGV_SETTINGS = {\n  showIdeogram: true,\n  showNavigation: true,\n  showRuler: true,\n  showCenterGuide: true,\n  showCursorTrackingGuide: true,\n  showCommandBar: true,\n}\n\n\nclass IGV extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    this.container = null\n    this.browser = null\n    this.ignoreNextTrackRemovedEvent = false\n  }\n\n  setContainerElement = (element) => {\n    this.container = element\n  }\n\n  render = () => <div><div ref={this.setContainerElement} /></div>\n\n  async componentDidMount() {\n\n    if (!this.container) {\n      return\n    }\n\n    const {\n      genome,\n      locus,\n      tracks,\n      locusChangedHandler,\n      trackRemovedHandler,\n    } = this.props\n\n    const igvBrowserOptions = {\n      ...IGV_SETTINGS,\n      locus,\n      genome,\n      tracks,\n    }\n\n    //console.log('Calling igv.createBrowser(..)', igvBrowserOptions)\n    igv.createBrowser(this.container, igvBrowserOptions).then((browser) => {\n      this.browser = browser\n      window.igvBrowser = browser //for debugging\n\n      if (locusChangedHandler) {\n        this.browser.on('locuschange', throttle(300, locusChangedHandler))\n      }\n\n      if (trackRemovedHandler) {\n        this.browser.on('trackremoved', (track) => {\n          if (!this.ignoreNextTrackRemovedEvent) {\n            trackRemovedHandler(track.config.categoryName, track.config.rowName)\n          }\n          this.ignoreNextTrackRemovedEvent = false\n        })\n      }\n    })\n  }\n\n  shouldTrackBeReloaded = (track, props, nextProps) => {\n    const {\n      selectedSamplesByCategoryNameAndRowName,\n      enabledDataTypes,\n      sjOptions,\n      vcfOptions,\n      bamOptions,\n      gcnvOptions,\n    } = props\n\n    const junctionTrackDisplaySettingsChanged = ['merged', 'wig', 'spliceJunctions'].includes(track.type) && (\n      nextProps.enabledDataTypes.includes('junctions') !== enabledDataTypes.includes('junctions')\n      || nextProps.enabledDataTypes.includes('coverage') !== enabledDataTypes.includes('coverage')\n      || nextProps.sjOptions !== sjOptions)\n    const vcfTrackDisplaySettingsChanged = track.type === 'variant' && nextProps.vcfOptions !== vcfOptions\n    const alignmentTrackDisplaySettingsChanged = track.type === 'alignment' && nextProps.bamOptions !== bamOptions\n    const gcnvTrackDisplaySettingsChanged = track.type === 'gcnv' && nextProps.gcnvOptions !== gcnvOptions\n    const gcnvTrackHighlightedSamplesChanged = track.type === 'gcnv' && (\n      !_.isEqual(\n        ((nextProps.selectedSamplesByCategoryNameAndRowName[track.categoryName] || {}).selectedSamples || {})[track.rowName],\n        ((selectedSamplesByCategoryNameAndRowName[track.categoryName] || {}).selectedSamples || {})[track.rowName])\n      || !_.isEqual(\n        ((nextProps.selectedSamplesByCategoryNameAndRowName[track.categoryName] || {}).sampleSettings || {})[track.rowName],\n        ((selectedSamplesByCategoryNameAndRowName[track.categoryName] || {}).sampleSettings || {})[track.rowName])\n    )\n\n    return junctionTrackDisplaySettingsChanged\n      || vcfTrackDisplaySettingsChanged\n      || alignmentTrackDisplaySettingsChanged\n      || gcnvTrackDisplaySettingsChanged\n      || gcnvTrackHighlightedSamplesChanged\n  }\n\n  getTrackId = (track) => `${track.url}|${track.categoryName}|${track.rowName}`\n\n  getIgvTrackView = (track) => {\n    const trackId = this.getTrackId(track)\n\n    const existingTrackViews = this.browser.trackViews.filter((existingTrackView) => {\n      const existingTrackConfig = (existingTrackView.track || {}).config || {}\n      return trackId === this.getTrackId(existingTrackConfig)\n    })\n\n    return existingTrackViews.length > 0 && existingTrackViews[0]\n  }\n\n  reloadRemoveAndAddTracks = (nextProps) => {\n\n    const nextTrackByTrackName = nextProps.tracks.reduce((acc, track) => {\n      return { [track.name]: track, ...acc }\n    }, {})\n\n    // reload or remove existing tracks\n    this.props.tracks.forEach((track) => {\n      const nextTrack = nextTrackByTrackName[track.name]\n      if (nextTrack) {\n        if (this.shouldTrackBeReloaded(track, this.props, nextProps))\n        {\n          console.log('Reloading track', track.name)\n          this.ignoreNextTrackRemovedEvent = true\n          try {\n            this.browser.removeTrackByName(track.name)\n          } catch (e) {\n            console.warn('Unable to remove track', track.name, e)\n          }\n          if (!this.getIgvTrackView(track)) { // double-check that the track isn't already loaded\n            //console.log('calling this.browser.loadTrack for', track.name)\n            this.browser.loadTrack(nextTrack)\n          }\n        }\n\n        // delete track from nextTrackByTrackName to indicate that it's still selected\n        delete nextTrackByTrackName[track.name]\n\n      } else {\n        // remove track that was de-selected\n        try {\n          console.log('Removing track', track.name)\n          this.ignoreNextTrackRemovedEvent = true\n          this.browser.removeTrackByName(track.name)\n        } catch (e) {\n          console.warn('Unable to remove track', track.name, e)\n        }\n      }\n    })\n\n    // load any newly-selected track(s)\n    const remainingTracks = Object.values(nextTrackByTrackName)\n    remainingTracks.forEach((track) => {\n      try {\n        if (!this.getIgvTrackView(track)) { // double-check that the track isn't already loaded\n          console.log('Loading new track', track.name)\n          this.browser.loadTrack(track)\n        }\n      } catch (e) {\n        console.warn('Unable to add track', track.name, e)\n      }\n    })\n  }\n\n  shouldComponentUpdate(nextProps) {\n    if (!this.container || !this.browser) {\n      return false\n    }\n\n    //console.log('Should component update', nextProps)\n    //update locus\n    const currentIGVLocus = this.browser.$searchInput.val()\n    const nextIGVLocus = nextProps.locus\n    if (nextProps.locus && (!currentIGVLocus || nextIGVLocus.replace(/,/g, '') !== currentIGVLocus.replace(/,/g, ''))) {\n      this.browser.search(nextIGVLocus)\n    }\n\n    this.reloadRemoveAndAddTracks(nextProps)\n\n    return false\n  }\n}\n\nIGV.propTypes = {\n  genome: PropTypes.string.isRequired,\n  locus: PropTypes.string.isRequired,\n  tracks: PropTypes.array.isRequired,\n  selectedSamplesByCategoryNameAndRowName: PropTypes.object.isRequired,\n  enabledDataTypes: PropTypes.array.isRequired,\n  locusChangedHandler: PropTypes.func,\n  trackRemovedHandler: PropTypes.func,\n  sjOptions: PropTypes.object,\n  vcfOptions: PropTypes.object,\n  bamOptions: PropTypes.object,\n  gcnvOptions: PropTypes.object,\n}\n\nconst mapStateToProps = (state) => ({\n  genome: getGenome(state),\n  locus: getLocus(state),\n  tracks: getTracks(state),\n  enabledDataTypes: getEnabledDataTypes(state),\n  selectedSamplesByCategoryNameAndRowName: getSelectedSamplesByCategoryNameAndRowName(state),\n  sjOptions: getSjOptions(state),\n  vcfOptions: getVcfOptions(state),\n  bamOptions: getBamOptions(state),\n  gcnvOptions: getGcnvOptions(state),\n})\n\n\nconst mapDispatchToProps = (dispatch) => ({\n  locusChangedHandler: (event) => {\n    const newLocus = event.label.replace(/,/g, '')\n\n    dispatch({\n      type: 'UPDATE_LOCUS',\n      newValue: newLocus,\n    })\n  },\n\n  trackRemovedHandler: (categoryName, trackName) => {\n    dispatch({\n      type: 'REMOVE_SELECTED_ROW_NAMES',\n      categoryName,\n      selectedRowNames: [trackName],\n    })\n  },\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IGV)\n","/* eslint-disable react/destructuring-assignment */\n/* eslint-disable react/require-optimization */\n/* eslint-disable react/jsx-one-expression-per-line */\n/* eslint-disable operator-linebreak */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport { GoogleLogin } from 'react-google-login'\nimport IGV from './IGV'\nimport { getGoogleUserEmail, googleSignIn, initGoogleClient } from '../utils/googleAuth'\nimport { getInitialSettingsUrl, getRowsInCategories } from '../redux/selectors'\n\nconst SignInButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 50px;\n`\n\nconst InfoContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin-top: 50px;\n  margin-left: 100px;\n  word-wrap: break-word;\n  word-break: break-all;\n`\n\nclass LoginAndShowIGV extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {}\n  }\n\n  handleGoogleSignIn = (user) => {\n    const profile = user && user.getBasicProfile()\n    const googleUserEmail = profile && profile.getEmail()\n\n    this.setState({ show: googleUserEmail ? 'igv' : 'signin-button' })\n    this.props.userChangedHandler(googleUserEmail)\n  }\n\n  async componentDidMount() {\n\n    // TODO check if any tracks need google sign-in\n    try {\n      await initGoogleClient()\n    } catch (e) {\n      console.error('Error during google sign-in init:', e)\n      this.setState({ show: 'signin-button' })\n      return\n    }\n\n    try {\n      this.setState({ signInError: null })\n      await googleSignIn()\n    } catch (e) {\n      console.error('Error during google sign-in:', e)\n      if (e.details && e.details.search('Cookies are not enabled') >= 0) {\n        this.setState({ signInError: 'cookies-disabled' })\n      }\n\n      this.setState({ show: 'signin-button' })\n      return\n    }\n    const googleUserEmail = await getGoogleUserEmail()\n\n    this.setState({ show: googleUserEmail ? 'igv' : 'signin-button' })\n    this.props.userChangedHandler(googleUserEmail)\n  }\n\n  render = () => {\n    if (this.state.show === 'igv') {\n      console.log('Render <IGV />')\n      return <IGV />\n    }\n\n    if (this.state.show === 'signin-button') {\n      let dataPathCounter = 0\n      const buckets = new Set()\n      this.props.rowsInCategories.forEach((category) => {\n        category.rows.forEach((row) => {\n          if (row.data) {\n            row.data.forEach((data) => {\n              if (data.url && data.url.startsWith('gs://')) {\n                dataPathCounter += 1\n\n                const urlTokens = data.url.split('/')\n                const bucket = urlTokens[2]\n                if (bucket !== 'tgg-viewer') {\n                  buckets.add(bucket)\n                }\n              }\n            })\n          }\n        })\n      })\n\n      if (dataPathCounter === 0) {\n        return <InfoContainer>No dataset paths loaded. &nbsp; Please specify an Initial settings url.</InfoContainer>\n      }\n\n      return (\n        <div>\n          <InfoContainer>\n            <div>\n              Retrieved {dataPathCounter} data paths from settings file: <a href={this.props.initialSettingsUrl} target=\"_blank\">{this.props.initialSettingsUrl}</a><br />\n              <br />\n            </div>\n\n            {\n              buckets.size > 0 &&\n              <div>\n                To view this data, you should have read access to the following Google Storage buckets:\n                <ul>\n                  {\n                    Array.from(buckets).map((bucket) => <li key={bucket}><a href={`https://console.cloud.google.com/storage/browser/${bucket}`} target=\"_blank\">{bucket}</a></li>)\n                  }\n                </ul>\n              </div>\n            }\n            {\n              this.state.signInError === 'cookies-disabled' &&\n              <div style={{ marginTop: '20px', color: 'red', textAlign: 'left' }}>\n\n                <b>ERROR: Cookies are disabled</b><br />\n                Please allow cookies to enable sign in with Google.\n              </div>\n            }\n          </InfoContainer>\n\n          <SignInButtonContainer>\n            <GoogleLogin\n              clientId={window.TGG_VIEWER_CLIENT_ID}\n              theme=\"dark\"\n              buttonText=\"Sign in with Google\"\n              disabled={this.state.signInError}\n              onSuccess={this.handleGoogleSignIn}\n              onFailure={this.handleGoogleSignIn}\n              cookiePolicy=\"single_host_origin\"\n            />\n          </SignInButtonContainer>\n        </div>)\n\n    }\n\n    return null\n  }\n}\n\nLoginAndShowIGV.propTypes = {\n  rowsInCategories: PropTypes.array,\n  initialSettingsUrl: PropTypes.string,\n  userChangedHandler: PropTypes.func,\n}\n\nconst mapStateToProps = (state) => ({\n  rowsInCategories: getRowsInCategories(state),\n  initialSettingsUrl: getInitialSettingsUrl(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  userChangedHandler: (googleUserEmail) => {\n    dispatch({\n      type: 'UPDATE_USER',\n      updates: { googleUserEmail },\n    })\n  },\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginAndShowIGV)\n","/* eslint-disable react/destructuring-assignment */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Icon, Popup } from 'semantic-ui-react'\n\n\nclass RequestStatus extends React.PureComponent {\n\n  static NONE = 'NONE'\n\n  static IN_PROGRESS = 'IN_PROGRESS'\n\n  static SUCCEEDED = 'SUCCEEDED'\n\n  static ERROR = 'ERROR'\n\n  render() {\n    switch (this.props.status) {\n      case RequestStatus.IN_PROGRESS:\n        return <Icon loading name=\"spinner\" style={{ color: '#4183c4' }} />\n      case RequestStatus.SUCCEEDED:\n        return <Popup\n          trigger={\n            <Icon name=\"check circle\" style={{ color: '#00C000' }} />\n          }\n          content={this.props.successMessage || 'Success'}\n          position=\"top center\"\n          size=\"small\"\n        />\n      case RequestStatus.ERROR:\n        return <Popup\n          trigger={\n            <Icon name=\"warning circle\" style={{ color: '#F00000' }} />\n          }\n          content={this.props.errorMessage || ''}\n          position=\"top center\"\n          size=\"small\"\n        />\n      default:\n        return <Icon name=\"warning circle\" style={{ color: 'rgb(0,0,0,0.0)' }} />\n    }\n  }\n}\n\nRequestStatus.propTypes = {\n  status: PropTypes.string,\n  errorMessage: PropTypes.string,\n  successMessage: PropTypes.string,\n}\n\nexport default RequestStatus\n","import LZString from 'lz-string'\n\n/* in-memory cache to avoid unnecessary compression/decompression */\nconst CACHE = {}\n\n/**\n * Uses the localStorage API to save a state object in the browser under the given label.\n * @param label {string}\n * @param state {object}\n */\nexport const saveState = (label, state) => {\n  try {\n    const jsonString = JSON.stringify(state)\n    if (CACHE[label] === jsonString) {\n      return\n    }\n    console.warn(`LocalStorage: compressing ${label}`)\n    const serializedState = LZString.compress(jsonString)\n    localStorage.setItem(label, serializedState)\n    CACHE[label] = jsonString\n  } catch (err) {\n    console.warn('Unable to save state: ', label, state, err)\n  }\n}\n\n\n/**\n * Uses the localStorage API to restored a previously-saved state object.\n * @param label {string}\n * @param state {object}\n */\nexport const loadState = (label) => {\n  try {\n    const serializedState = localStorage.getItem(label)\n    const jsonString = LZString.decompress(serializedState)\n    CACHE[label] = jsonString\n\n    if (jsonString === null) {\n      return undefined\n    }\n\n    return JSON.parse(jsonString)\n  } catch (err) {\n    return undefined\n  }\n}\n","/* eslint-disable operator-linebreak */\n/* eslint-disable no-unused-vars */\n\nimport jsurl from 'jsurl'\n\nimport { loadState, saveState } from '../utils/localStorage'\n\n\nconst INITIAL_ROWS_IN_CATEGORIES = []\n\nexport const DEFAULT_STATE = {\n  genome: 'hg38',\n  locus: 'chr15:92,835,700-93,031,800',\n  dataTypesToShow: ['junctions', 'coverage', 'vcf', 'gcnv_bed'],\n  leftSideBarLocusList: [],\n  rightSideBarLocusList: [],\n  rowsInCategories: INITIAL_ROWS_IN_CATEGORIES,\n  selectedRowNamesByCategoryName: {},\n  sjOptions: {\n    trackHeight: 170,\n    hideAnnotated: false,\n    hideUnannotated: false,\n    colorBy: 'strand',\n    minUniquelyMappedReads: 0,\n    minTotalReads: 1,\n    maxFractionMultiMappedReads: 1,\n    minSplicedAlignmentOverhang: 0,\n    thicknessBasedOn: 'numUniqueReads', //options: numUniqueReads (default), numReads, isAnnotatedJunction\n    bounceHeightBasedOn: 'random', //options: random (default), distance, thickness\n    labelWith: 'uniqueReadCount',\n    labelWithInParen: 'multiMappedReadCount',\n  },\n  vcfOptions: {\n    displayMode: 'EXPANDED',\n  },\n  bamOptions: {\n    trackHeight: 200,\n    showSoftClips: true,\n    alignmentShading: 'strand',\n  },\n  gcnvOptions: {\n    trackHeight: 200,\n    trackMin: 0,\n    trackMax: 5,\n    autoscale: false,\n    onlyHandleClicksForHighlightedSamples: true,\n  },\n  initialSettingsUrl: '',\n}\n\n\nconst KEYS_TO_PERSIST_IN_LOCAL_STORAGE = [\n  'leftSideBarLocusList', 'rightSideBarLocusList',\n]\n\nexport const getStateFromLocalStorage = () => {\n  // restore values from local storage\n  const stateFromLocalStorage = KEYS_TO_PERSIST_IN_LOCAL_STORAGE.reduce((acc, key) => {\n    const v = loadState(key)\n    if (v !== undefined) {\n      acc[key] = v\n    }\n    return acc\n  }, {})\n\n  return stateFromLocalStorage\n}\n\nconst KEYS_TO_PERSIST_IN_URL = {\n  locus: 'locus',\n  dataTypesToShow: 'show',\n  selectedRowNamesByCategoryName: 'selectedRows',\n  selectedSamplesByCategoryNameAndRowName: 'selectedSamples',\n  sjOptions: 'sjOptions',\n  vcfOptions: 'vcfOptions',\n  bamOptions: 'bamOptions',\n  gcnvOptions: 'gcnvOptions',\n  initialSettingsUrl: 'settingsUrl',\n}\n\nexport const getStateFromUrlHash = () => {\n  // restore values from url\n  const REVERSE_KEY_NAME_LOOKUP = Object.entries(KEYS_TO_PERSIST_IN_URL).reduce(\n    (acc, [key, value]) => {\n      return { ...acc, [value]: key }\n    }, {})\n  const hashString = window.location.hash.replace(/^#/, '')\n\n  const stateFromUrlHash = hashString ?\n    hashString.split('&').reduce((acc, keyValue) => {\n      const keyValueList = keyValue.split('=')\n      const key = (keyValueList[0] in REVERSE_KEY_NAME_LOOKUP) ? REVERSE_KEY_NAME_LOOKUP[keyValueList[0]] : keyValueList[0]\n      if (key === 'locus') {\n        acc = { ...acc, [key]: keyValueList[1] }\n      } else {\n        try {\n          acc[key] = jsurl.parse(keyValueList[1])\n        } catch (e) {\n          console.error('Couldn\\'t parse url hash param', keyValueList[0], ': ', keyValueList[1])\n        }\n      }\n      return acc\n    }, {})\n    : {}\n\n  return stateFromUrlHash\n}\n\nexport const computeInitialState = () => {\n\n  const stateFromLocalStorage = getStateFromLocalStorage()\n  const stateFromUrlHash = getStateFromUrlHash()\n\n  // default values are over-ridden by values from local storage, which are over-ridden by values from the url\n  const initialState = { ...DEFAULT_STATE, ...stateFromLocalStorage, ...stateFromUrlHash }\n\n  return initialState\n}\n\n\nexport const updateLocalStorageAndUrl = (state) => {\n  //update local storage\n\n  KEYS_TO_PERSIST_IN_LOCAL_STORAGE.forEach((key) => {\n    saveState(key, state[key])\n  })\n\n  //update url\n  const hashString = Object.keys(state)\n    .filter((key) => (key in KEYS_TO_PERSIST_IN_URL))\n    .reduce((hashKeyValueList, key) => {\n      const value = key === 'locus' ? state[key].replace(',', '') : jsurl.stringify(state[key])\n      return [\n        ...hashKeyValueList,\n        `${KEYS_TO_PERSIST_IN_URL[key]}=${value}`,\n      ]\n    }, []).join('&')\n\n  window.location.hash = `#${hashString}`\n}\n","/* eslint-disable react/no-find-dom-node */\n/* eslint-disable react/destructuring-assignment */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport { Button, Input, Popup } from 'semantic-ui-react'\nimport delay from 'timeout-as-promise'\nimport yaml from 'js-yaml'\nimport { getInitialSettingsUrl } from '../redux/selectors'\nimport RequestStatus from './RequestStatus'\nimport { DEFAULT_STATE, getStateFromLocalStorage, getStateFromUrlHash } from '../redux/initialState'\n\nconst StyledDiv = styled.div`\n  color: #999;\n  width: 100%;\n  text-align: center;\n  \n  .ui.label {\n    color: #444;\n    background-color: #f3f3f3;\n  }\n`\n\nconst StyledInput = styled(Input)`\n  margin-top: 100px;\n  width: calc(100% - 350px);\n`\n\nconst StyledButton = styled(Button)`\n  margin-left: 20px !important;\n  margin-right: 15px !important;\n`\n\nclass InitialSettingsForm extends React.PureComponent\n{\n  constructor(props) {\n    super(props)\n    this.textInputValue = props.initialSettingsUrl || ''\n    this.state = {\n      requestStatus: RequestStatus.NONE,\n      successMessage: '',\n      errorMessage: '',\n    }\n  }\n\n  async componentDidMount() {\n    const { initialSettingsUrl } = this.props\n    if (initialSettingsUrl) {\n      // download url\n      console.log('Loading settings from', initialSettingsUrl)\n      await this.applyInitialSettingsUrl(initialSettingsUrl, false)\n    }\n  }\n\n  loadInitialSettingsUrl = async (url, overrideLocalSettings) => {\n    const {\n      globalState,\n      updateInitialSettingsUrl,\n      resetGlobalState,\n    } = this.props\n\n    if (!url) {\n      //reset url to empty\n      resetGlobalState({ ...DEFAULT_STATE, ...{ user: globalState.user } })\n      updateInitialSettingsUrl('')\n      return\n    }\n\n    let stateFromLocalStorage\n    let stateFromUrlHash\n    if (!overrideLocalSettings) {\n      stateFromLocalStorage = getStateFromLocalStorage()\n      stateFromUrlHash = getStateFromUrlHash()\n    }\n\n    //validate url\n    if (url.search(':') === -1 || url.search('/') === -1) {\n      throw new Error(`Invalid url: \"${url}\"`)\n    }\n\n    const isYaml = url.search('.yaml') !== -1 || url.search('.yml') !== -1\n    const isJson = url.search('.json') !== -1\n    const isUnknown = !isYaml && !isJson\n\n    //NOTE: changed my mind about requiring a .yaml or .json extension to allow for more flexibility.\n    //if (!isYamlURL && !isJsonURL) {\n    //  throw new Error('Expected file extensions (\".yaml\", \".yml\", or \".json\") not found in the URL')\n    //}\n\n    const response = await fetch(url)\n    if (!response.ok) {\n      throw new Error(`Couldn't load URL. Error: ${response.statusText.toLowerCase()} (${response.status})`)\n    }\n\n    const fileContents = await response.text()\n\n    let settings = null\n    if (!settings && (isYaml || isUnknown)) {\n      try {\n        settings = yaml.safeLoad(fileContents)\n      } catch (e) {\n        if (isYaml) {\n          console.error(`Unable to parse YAML file: ${url}. ${e}`)\n          return\n        }\n      }\n    }\n\n    if (!settings && (isJson || isUnknown)) {\n      try {\n        settings = JSON.parse(fileContents)\n      } catch (e) {\n        if (isJson) {\n          console.error(`Unable to parse JSON file: ${url}. ${e}`)\n          return\n        }\n      }\n    }\n\n    if (!settings) {\n      console.error(`Unable to parse JSON or YAML from: ${url}`)\n      return\n    }\n\n    // TODO validate settings more\n\n    // filter settings to keys in globalState\n    const filteredSettings = Object.keys(globalState).reduce((acc, key) => {\n      if (key in settings) {\n        return { ...acc, [key]: settings[key] }\n      }\n      return acc\n    }, {})\n\n    console.log('Retrieved state from config file:', filteredSettings)\n\n    // apply settings\n    let newState = { ...globalState, ...filteredSettings }\n    if (!overrideLocalSettings) {\n      console.log('Applying settings from local storage', stateFromLocalStorage)\n      console.log('Applying settings from url hash', stateFromUrlHash)\n      newState = { ...newState, ...stateFromLocalStorage, ...stateFromUrlHash }\n    }\n\n    console.log('Setting global state to', newState)\n    resetGlobalState(newState)\n    updateInitialSettingsUrl(url)\n  }\n\n  applyInitialSettingsUrl = async (url, overrideLocalSettings = false) => {\n\n    this.setState({ requestStatus: RequestStatus.IN_PROGRESS })\n\n    if (url.startsWith('https://github.com/')) {\n      // switch to the github raw url\n      url = url.replace('https://github.com', 'https://raw.githubusercontent.com').replace('blob/', '')\n    }\n\n    try {\n      await this.loadInitialSettingsUrl(url, overrideLocalSettings)\n\n      this.setState({ requestStatus: RequestStatus.SUCCEEDED, successMessage: url ? 'Successfully loaded URL and applied settings' : 'Reset all settings to defaults' })\n    } catch (e) {\n      this.setState({ requestStatus: RequestStatus.ERROR, errorMessage: e.toString() })\n    }\n\n    // wait and then clear the message\n    await delay(10000)\n    if (this.state.requestStatus !== RequestStatus.IN_PROGRESS) {\n      this.setState({ requestStatus: RequestStatus.NONE, errorMessage: '' })\n    }\n  }\n\n  exportCurrentSettings = () => {\n    //convert global state to a JSON string\n    const EXCLUDED_KEYS = ['user', 'modals']\n    const globalStateForExport = Object.keys(this.props.globalState).reduce((acc, key) => {\n      if (!EXCLUDED_KEYS.includes(key)) {\n        acc[key] = this.props.globalState[key]\n      }\n      return acc\n    }, {})\n\n    return encodeURIComponent(JSON.stringify(globalStateForExport, null, 5))\n  }\n\n  render() {\n    const {\n      initialSettingsUrl,\n    } = this.props\n\n    return (\n      <StyledDiv align=\"center\">\n        <StyledInput\n          label=\"Initial settings:\"\n          defaultValue={initialSettingsUrl}\n          placeholder=\"URL of .yaml or .json settings file (eg. http://.../settings.json), or blank to reset all settings to defaults.\"\n          onChange={(e) => { this.textInputValue = e.target.value }}\n          onKeyUp={(e) => e.keyCode === 13 && this.applyInitialSettingsUrl(e.target.value, true)}\n        />\n        <StyledButton\n          content=\"Apply\"\n          onClick={() => this.applyInitialSettingsUrl(this.textInputValue, true)}\n        />\n        <RequestStatus\n          status={this.state.requestStatus}\n          errorMessage={this.state.errorMessage}\n          successMessage={this.state.successMessage}\n        />\n        <Popup\n          content=\"Export current settings to a .json file. If you then upload this file to a public url (for example to github) and then paste the url here, these settings will be restored.\"\n          position=\"right center\"\n          trigger={\n            <a download=\"settings.json\" href={`data:text/json;charset=utf-8,${this.exportCurrentSettings()}`}>\n              <Button icon=\"download\" />\n            </a>\n          }\n        />\n      </StyledDiv>)\n  }\n}\n\nInitialSettingsForm.propTypes = {\n  initialSettingsUrl: PropTypes.string.isRequired,\n  globalState: PropTypes.object,\n  updateInitialSettingsUrl: PropTypes.func,\n  resetGlobalState: PropTypes.func,\n}\n\nconst mapStateToProps = (state) => ({\n  globalState: state,\n  initialSettingsUrl: getInitialSettingsUrl(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateInitialSettingsUrl: (newUrl) => {\n    dispatch({\n      type: 'UPDATE_INITIAL_SETTINGS_URL',\n      newValue: newUrl,\n    })\n  },\n  resetGlobalState: (state) => {\n    dispatch({\n      type: 'RESET_GLOBAL_STATE',\n      newState: state,\n    })\n  },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InitialSettingsForm)\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Grid } from 'semantic-ui-react'\nimport LeftSideBar from './LeftSideBar'\nimport RightSideBar from './RightSideBar'\nimport Header from './Header'\nimport LoginAndShowIGV from './LoginAndShowIGV'\nimport InitialSettingsForm from './InitialSettingsForm'\n\nconst StyledDiv = styled.div`\n  padding: 10px 20px;\n`\n\nconst SIDE_BAR_WIDTH = 210\n\nconst SideBarColumn = styled(Grid.Column)`\n  min-width: ${SIDE_BAR_WIDTH}px !important;\n  z-index: 2;\n`\n\nconst MiddleColumn = styled(Grid.Column)`\n  min-width: calc(99% - ${2 * SIDE_BAR_WIDTH + 5}px) !important;\n  z-index: 1;\n`\n\nexport default () => (\n  <StyledDiv>\n    <Grid>\n      <Grid.Row>\n        <SideBarColumn><LeftSideBar /></SideBarColumn>\n        <MiddleColumn>\n          <Header />\n          <LoginAndShowIGV />\n          <InitialSettingsForm />\n        </MiddleColumn>\n        <SideBarColumn><RightSideBar /></SideBarColumn>\n      </Grid.Row>\n    </Grid>\n  </StyledDiv>\n)\n","/* eslint-disable prefer-object-spread */\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { updateLocalStorageAndUrl, computeInitialState } from './initialState'\n\n\nimport {\n  zeroActionsReducer,\n  createSingleValueReducer,\n  createSingleObjectReducer,\n  createArrayReducer,\n} from './utils/reducerFactories'\n\nimport modalReducers from './utils/modalReducer'\n\n\nconst rowsInCategoriesReducer = (state, action) => {\n  if (!action || !action.categoryName || !action.rows) {\n    return state || []\n  }\n\n  return state.map((category) => {\n    if (category.categoryName !== action.categoryName) {\n      return category\n    }\n\n    let updatedRows\n    switch (action.type) {\n      case 'SET_ROWS': {\n        updatedRows = [...action.rows]\n        break\n      }\n      case 'ADD_ROWS': {\n        const existingNames = category.rows.map((row) => row.name)\n        updatedRows = [...category.rows, ...action.rows.filter((row) => !existingNames.includes(row.name))]\n        break\n      }\n      default:\n        updatedRows = category.rows\n    }\n\n    const result = {\n      ...category,\n      rows: updatedRows,\n    }\n    return result\n  })\n}\n\n\nconst selectedRowNamesByCategoryNameReducer = (state, action) => {\n  if (!action || !action.categoryName || !Array.isArray(action.selectedRowNames)) {\n    return state || {}\n  }\n  const previousList = state[action.categoryName] || []\n  switch (action.type) {\n    case 'SET_SELECTED_ROW_NAMES':\n    case 'ADD_SELECTED_ROW_NAMES':\n    case 'REMOVE_SELECTED_ROW_NAMES': {\n      let updatedList\n      if (action.type === 'SET_SELECTED_ROW_NAMES') {\n        updatedList = Array.from(new Set(action.selectedRowNames)) // make a copy of action.values\n      } else if (action.type === 'ADD_SELECTED_ROW_NAMES') {\n        updatedList = Array.from(new Set([...previousList, ...action.selectedRowNames]))\n      } else {\n        const valuesToRemove = action.selectedRowNames\n        updatedList = previousList.filter((v) => !valuesToRemove.includes(v))\n      }\n\n      return {\n        ...state,\n        [action.categoryName]: updatedList,\n      }\n    }\n    default:\n      console.trace(`Unknown action type: ${action.type}`)\n  }\n\n  return state\n}\n\n\nconst selectedSamplesByCategoryNameAndRowNameReducer = (state, action) => {\n  if (!action || !action.categoryName || (!action.selectedSamplesByRowName && !action.sampleSettingsByRowNameAndSampleName)) {\n    return state || {}\n  }\n\n  const categoryObj = state[action.categoryName] || {}\n  const previousSelectedSamplesByRowName = categoryObj.selectedSamples || {}\n  const previousSampleSettingsByRowNameAndSampleName = categoryObj.sampleSettings || {}\n  let updatedSelectedSamplesByRowName = previousSelectedSamplesByRowName\n  let updatedSampleSettingsByRowNameAndSampleName = previousSampleSettingsByRowNameAndSampleName\n\n  switch (action.type) {\n    case 'SET_SELECTED_SAMPLES':\n    case 'ADD_SELECTED_SAMPLES':\n    case 'REMOVE_SELECTED_SAMPLES': {\n      if (action.type === 'SET_SELECTED_SAMPLES') {\n        updatedSelectedSamplesByRowName = { ...previousSelectedSamplesByRowName, ...action.selectedSamplesByRowName }\n      } else if (action.type === 'ADD_SELECTED_SAMPLES') {\n        updatedSelectedSamplesByRowName = Array.from(new Set([\n          ...Object.keys(previousSelectedSamplesByRowName),\n          ...Object.keys(action.selectedSamplesByRowName),\n        ])).reduce((acc, rowName) => {\n          acc[rowName] = Array.from(new Set([...(previousSelectedSamplesByRowName[rowName] || []), ...(action.selectedSamplesByRowName[rowName] || [])]))\n\n          return acc\n        }, {})\n      } else {\n        updatedSelectedSamplesByRowName = Object.keys(previousSelectedSamplesByRowName).reduce((acc, rowName) => {\n          const valuesToRemove = action.selectedSamplesByRowName[rowName] || []\n          const updatedList = (previousSelectedSamplesByRowName[rowName] || []).filter((v) => !valuesToRemove.includes(v))\n          if (updatedList.length > 0) {\n            acc[rowName] = updatedList\n          }\n          return acc\n        }, {})\n      }\n      break\n    }\n\n    case 'UPDATE_SAMPLE_SETTINGS': {\n      updatedSampleSettingsByRowNameAndSampleName = {\n        ...previousSampleSettingsByRowNameAndSampleName,\n        ...action.sampleSettingsByRowNameAndSampleName,\n      }\n      Object.keys(action.sampleSettingsByRowNameAndSampleName).forEach((rowName) => {\n        const previousSampleSettingsBySampleName = previousSampleSettingsByRowNameAndSampleName[rowName] || {}\n        const newSampleSettingsBySampleName = action.sampleSettingsByRowNameAndSampleName[rowName]\n        const mergedSamplesSettingsBySampleName = {\n          ...previousSampleSettingsBySampleName,\n          ...newSampleSettingsBySampleName,\n        }\n        Object.entries(newSampleSettingsBySampleName).forEach(\n          ([sampleName, sampleSettings]) => {\n            const mergedSampleSettings = {\n              ...previousSampleSettingsBySampleName[sampleName] || {},\n              ...sampleSettings,\n            }\n            mergedSamplesSettingsBySampleName[sampleName] = mergedSampleSettings\n          })\n        updatedSampleSettingsByRowNameAndSampleName[rowName] = mergedSamplesSettingsBySampleName\n      })\n      break\n    }\n\n    default: {\n      console.trace(`Unknown action type: ${action.type}`)\n      return state\n    }\n  }\n\n  return {\n    ...state,\n    [action.categoryName]: {\n      selectedSamples: updatedSelectedSamplesByRowName,\n      sampleSettings: updatedSampleSettingsByRowNameAndSampleName,\n    },\n  }\n}\n\n// combined reducers\nconst otherReducers = combineReducers(Object.assign({\n  genome: zeroActionsReducer,\n  locus: createSingleValueReducer('UPDATE_LOCUS', ''),\n  rightSideBarLocusList: createArrayReducer('RIGHT_SIDE_BAR_LOCUS_LIST'),\n  leftSideBarLocusList: createArrayReducer('LEFT_SIDE_BAR_LOCUS_LIST'),\n  dataTypesToShow: createArrayReducer('DATA_TYPES_TO_SHOW'),\n  rowsInCategories: rowsInCategoriesReducer,\n  selectedRowNamesByCategoryName: selectedRowNamesByCategoryNameReducer,\n  selectedSamplesByCategoryNameAndRowName: selectedSamplesByCategoryNameAndRowNameReducer,\n  sjOptions: createSingleObjectReducer('UPDATE_SJ_OPTIONS'),\n  vcfOptions: createSingleObjectReducer('UPDATE_VCF_OPTIONS'),\n  bamOptions: createSingleObjectReducer('UPDATE_BAM_OPTIONS'),\n  gcnvOptions: createSingleObjectReducer('UPDATE_GCNV_OPTIONS'),\n  user: createSingleObjectReducer('UPDATE_USER'),\n  initialSettingsUrl: createSingleValueReducer('UPDATE_INITIAL_SETTINGS_URL', ''),\n}, modalReducers))\n\n\nconst rootReducer = (state, action) => {\n  if (action.type === 'RESET_GLOBAL_STATE') {\n    return action.newState\n  }\n\n  const nextState = otherReducers(state, action)\n\n  updateLocalStorageAndUrl(nextState)\n  return nextState\n}\n\n\n/**\n * Initialize and return the Redux store\n * @param rootReducer\n * @param initialState\n * @returns {*}\n */\nexport const createReduxStore = () => {\n\n  const initialState = computeInitialState()\n\n  console.log('Initializing store to:', initialState)\n\n  return createStore(rootReducer, initialState, compose(applyMiddleware(thunkMiddleware)))\n}\n","import React from 'react'\nimport { Provider } from 'react-redux'\n\nimport BaseLayout from './components/BaseLayout'\nimport { createReduxStore } from './redux/rootReducer'\n\nfunction App() {\n  return (\n    <Provider store={createReduxStore()}>\n      <BaseLayout />\n    </Provider>)\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}